
Final Feasibility.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007884  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08007a24  08007a24  00008a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e84  08007e84  00009064  2**0
                  CONTENTS
  4 .ARM          00000008  08007e84  08007e84  00008e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e8c  08007e8c  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e8c  08007e8c  00008e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e90  08007e90  00008e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08007e94  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  20000068  08007ef8  00009068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08007ef8  00009410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8e7  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f9e  00000000  00000000  0001797b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00019920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab8  00000000  00000000  0001a6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017884  00000000  00000000  0001b178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000105aa  00000000  00000000  000329fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000994ac  00000000  00000000  00042fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc452  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fd8  00000000  00000000  000dc498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000e0470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007a0c 	.word	0x08007a0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08007a0c 	.word	0x08007a0c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b96a 	b.w	8000d68 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	460c      	mov	r4, r1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d14e      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000ab8:	4694      	mov	ip, r2
 8000aba:	458c      	cmp	ip, r1
 8000abc:	4686      	mov	lr, r0
 8000abe:	fab2 f282 	clz	r2, r2
 8000ac2:	d962      	bls.n	8000b8a <__udivmoddi4+0xde>
 8000ac4:	b14a      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac6:	f1c2 0320 	rsb	r3, r2, #32
 8000aca:	4091      	lsls	r1, r2
 8000acc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad4:	4319      	orrs	r1, r3
 8000ad6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ada:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ade:	fa1f f68c 	uxth.w	r6, ip
 8000ae2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ae6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aea:	fb07 1114 	mls	r1, r7, r4, r1
 8000aee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af2:	fb04 f106 	mul.w	r1, r4, r6
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b02:	f080 8112 	bcs.w	8000d2a <__udivmoddi4+0x27e>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 810f 	bls.w	8000d2a <__udivmoddi4+0x27e>
 8000b0c:	3c02      	subs	r4, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a59      	subs	r1, r3, r1
 8000b12:	fa1f f38e 	uxth.w	r3, lr
 8000b16:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b1a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb00 f606 	mul.w	r6, r0, r6
 8000b26:	429e      	cmp	r6, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x94>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b32:	f080 80fc 	bcs.w	8000d2e <__udivmoddi4+0x282>
 8000b36:	429e      	cmp	r6, r3
 8000b38:	f240 80f9 	bls.w	8000d2e <__udivmoddi4+0x282>
 8000b3c:	4463      	add	r3, ip
 8000b3e:	3802      	subs	r0, #2
 8000b40:	1b9b      	subs	r3, r3, r6
 8000b42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b46:	2100      	movs	r1, #0
 8000b48:	b11d      	cbz	r5, 8000b52 <__udivmoddi4+0xa6>
 8000b4a:	40d3      	lsrs	r3, r2
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d905      	bls.n	8000b66 <__udivmoddi4+0xba>
 8000b5a:	b10d      	cbz	r5, 8000b60 <__udivmoddi4+0xb4>
 8000b5c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b60:	2100      	movs	r1, #0
 8000b62:	4608      	mov	r0, r1
 8000b64:	e7f5      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000b66:	fab3 f183 	clz	r1, r3
 8000b6a:	2900      	cmp	r1, #0
 8000b6c:	d146      	bne.n	8000bfc <__udivmoddi4+0x150>
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	d302      	bcc.n	8000b78 <__udivmoddi4+0xcc>
 8000b72:	4290      	cmp	r0, r2
 8000b74:	f0c0 80f0 	bcc.w	8000d58 <__udivmoddi4+0x2ac>
 8000b78:	1a86      	subs	r6, r0, r2
 8000b7a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b7e:	2001      	movs	r0, #1
 8000b80:	2d00      	cmp	r5, #0
 8000b82:	d0e6      	beq.n	8000b52 <__udivmoddi4+0xa6>
 8000b84:	e9c5 6300 	strd	r6, r3, [r5]
 8000b88:	e7e3      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	f040 8090 	bne.w	8000cb0 <__udivmoddi4+0x204>
 8000b90:	eba1 040c 	sub.w	r4, r1, ip
 8000b94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b98:	fa1f f78c 	uxth.w	r7, ip
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ba2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ba6:	fb08 4416 	mls	r4, r8, r6, r4
 8000baa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bae:	fb07 f006 	mul.w	r0, r7, r6
 8000bb2:	4298      	cmp	r0, r3
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x11c>
 8000bb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bba:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x11a>
 8000bc0:	4298      	cmp	r0, r3
 8000bc2:	f200 80cd 	bhi.w	8000d60 <__udivmoddi4+0x2b4>
 8000bc6:	4626      	mov	r6, r4
 8000bc8:	1a1c      	subs	r4, r3, r0
 8000bca:	fa1f f38e 	uxth.w	r3, lr
 8000bce:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bd2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bda:	fb00 f707 	mul.w	r7, r0, r7
 8000bde:	429f      	cmp	r7, r3
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x148>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bea:	d202      	bcs.n	8000bf2 <__udivmoddi4+0x146>
 8000bec:	429f      	cmp	r7, r3
 8000bee:	f200 80b0 	bhi.w	8000d52 <__udivmoddi4+0x2a6>
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	1bdb      	subs	r3, r3, r7
 8000bf6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bfa:	e7a5      	b.n	8000b48 <__udivmoddi4+0x9c>
 8000bfc:	f1c1 0620 	rsb	r6, r1, #32
 8000c00:	408b      	lsls	r3, r1
 8000c02:	fa22 f706 	lsr.w	r7, r2, r6
 8000c06:	431f      	orrs	r7, r3
 8000c08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c10:	ea43 030c 	orr.w	r3, r3, ip
 8000c14:	40f4      	lsrs	r4, r6
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	0c38      	lsrs	r0, r7, #16
 8000c1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c20:	fbb4 fef0 	udiv	lr, r4, r0
 8000c24:	fa1f fc87 	uxth.w	ip, r7
 8000c28:	fb00 441e 	mls	r4, r0, lr, r4
 8000c2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c30:	fb0e f90c 	mul.w	r9, lr, ip
 8000c34:	45a1      	cmp	r9, r4
 8000c36:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x1a6>
 8000c3c:	193c      	adds	r4, r7, r4
 8000c3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c42:	f080 8084 	bcs.w	8000d4e <__udivmoddi4+0x2a2>
 8000c46:	45a1      	cmp	r9, r4
 8000c48:	f240 8081 	bls.w	8000d4e <__udivmoddi4+0x2a2>
 8000c4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c50:	443c      	add	r4, r7
 8000c52:	eba4 0409 	sub.w	r4, r4, r9
 8000c56:	fa1f f983 	uxth.w	r9, r3
 8000c5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x1d2>
 8000c6e:	193c      	adds	r4, r7, r4
 8000c70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c74:	d267      	bcs.n	8000d46 <__udivmoddi4+0x29a>
 8000c76:	45a4      	cmp	ip, r4
 8000c78:	d965      	bls.n	8000d46 <__udivmoddi4+0x29a>
 8000c7a:	3b02      	subs	r3, #2
 8000c7c:	443c      	add	r4, r7
 8000c7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c82:	fba0 9302 	umull	r9, r3, r0, r2
 8000c86:	eba4 040c 	sub.w	r4, r4, ip
 8000c8a:	429c      	cmp	r4, r3
 8000c8c:	46ce      	mov	lr, r9
 8000c8e:	469c      	mov	ip, r3
 8000c90:	d351      	bcc.n	8000d36 <__udivmoddi4+0x28a>
 8000c92:	d04e      	beq.n	8000d32 <__udivmoddi4+0x286>
 8000c94:	b155      	cbz	r5, 8000cac <__udivmoddi4+0x200>
 8000c96:	ebb8 030e 	subs.w	r3, r8, lr
 8000c9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000ca2:	40cb      	lsrs	r3, r1
 8000ca4:	431e      	orrs	r6, r3
 8000ca6:	40cc      	lsrs	r4, r1
 8000ca8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	e750      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000cb0:	f1c2 0320 	rsb	r3, r2, #32
 8000cb4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cbc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cc0:	4094      	lsls	r4, r2
 8000cc2:	430c      	orrs	r4, r1
 8000cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ccc:	fa1f f78c 	uxth.w	r7, ip
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cd8:	0c23      	lsrs	r3, r4, #16
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f107 	mul.w	r1, r0, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x24c>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cee:	d22c      	bcs.n	8000d4a <__udivmoddi4+0x29e>
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d92a      	bls.n	8000d4a <__udivmoddi4+0x29e>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d00:	fb08 3311 	mls	r3, r8, r1, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb01 f307 	mul.w	r3, r1, r7
 8000d0c:	42a3      	cmp	r3, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x276>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d18:	d213      	bcs.n	8000d42 <__udivmoddi4+0x296>
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	d911      	bls.n	8000d42 <__udivmoddi4+0x296>
 8000d1e:	3902      	subs	r1, #2
 8000d20:	4464      	add	r4, ip
 8000d22:	1ae4      	subs	r4, r4, r3
 8000d24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d28:	e739      	b.n	8000b9e <__udivmoddi4+0xf2>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	e6f0      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e706      	b.n	8000b40 <__udivmoddi4+0x94>
 8000d32:	45c8      	cmp	r8, r9
 8000d34:	d2ae      	bcs.n	8000c94 <__udivmoddi4+0x1e8>
 8000d36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d3e:	3801      	subs	r0, #1
 8000d40:	e7a8      	b.n	8000c94 <__udivmoddi4+0x1e8>
 8000d42:	4631      	mov	r1, r6
 8000d44:	e7ed      	b.n	8000d22 <__udivmoddi4+0x276>
 8000d46:	4603      	mov	r3, r0
 8000d48:	e799      	b.n	8000c7e <__udivmoddi4+0x1d2>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e7d4      	b.n	8000cf8 <__udivmoddi4+0x24c>
 8000d4e:	46d6      	mov	lr, sl
 8000d50:	e77f      	b.n	8000c52 <__udivmoddi4+0x1a6>
 8000d52:	4463      	add	r3, ip
 8000d54:	3802      	subs	r0, #2
 8000d56:	e74d      	b.n	8000bf4 <__udivmoddi4+0x148>
 8000d58:	4606      	mov	r6, r0
 8000d5a:	4623      	mov	r3, r4
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	e70f      	b.n	8000b80 <__udivmoddi4+0xd4>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	4463      	add	r3, ip
 8000d64:	e730      	b.n	8000bc8 <__udivmoddi4+0x11c>
 8000d66:	bf00      	nop

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <DIGIT_A_Display>:
int temp = 0;
int pastHour = -1;
int isFull = 0;

void DIGIT_A_Display(uint8_t DIGIT_A)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
	 uint8_t DIGITA_VAL = 0x0F & DIGIT_A; //mask off higher4 buts
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	f003 030f 	and.w	r3, r3, #15
 8000d7c:	73fb      	strb	r3, [r7, #15]

	 switch(DIGITA_VAL)
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	2b09      	cmp	r3, #9
 8000d82:	f200 8111 	bhi.w	8000fa8 <DIGIT_A_Display+0x23c>
 8000d86:	a201      	add	r2, pc, #4	@ (adr r2, 8000d8c <DIGIT_A_Display+0x20>)
 8000d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d8c:	08000db5 	.word	0x08000db5
 8000d90:	08000de7 	.word	0x08000de7
 8000d94:	08000e19 	.word	0x08000e19
 8000d98:	08000e4b 	.word	0x08000e4b
 8000d9c:	08000e7d 	.word	0x08000e7d
 8000da0:	08000eaf 	.word	0x08000eaf
 8000da4:	08000ee1 	.word	0x08000ee1
 8000da8:	08000f13 	.word	0x08000f13
 8000dac:	08000f45 	.word	0x08000f45
 8000db0:	08000f77 	.word	0x08000f77
	 {
	 case 0:
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A0_Pin, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dba:	487d      	ldr	r0, [pc, #500]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000dbc:	f003 fc26 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A1_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dc6:	487a      	ldr	r0, [pc, #488]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000dc8:	f003 fc20 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A2_Pin, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dd2:	4877      	ldr	r0, [pc, #476]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000dd4:	f003 fc1a 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dde:	4875      	ldr	r0, [pc, #468]	@ (8000fb4 <DIGIT_A_Display+0x248>)
 8000de0:	f003 fc14 	bl	800460c <HAL_GPIO_WritePin>
	 break;
 8000de4:	e0e0      	b.n	8000fa8 <DIGIT_A_Display+0x23c>
	 case 1:
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A0_Pin, GPIO_PIN_SET);
 8000de6:	2201      	movs	r2, #1
 8000de8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dec:	4870      	ldr	r0, [pc, #448]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000dee:	f003 fc0d 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A1_Pin, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000df8:	486d      	ldr	r0, [pc, #436]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000dfa:	f003 fc07 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A2_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e04:	486a      	ldr	r0, [pc, #424]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000e06:	f003 fc01 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e10:	4868      	ldr	r0, [pc, #416]	@ (8000fb4 <DIGIT_A_Display+0x248>)
 8000e12:	f003 fbfb 	bl	800460c <HAL_GPIO_WritePin>
	 break;
 8000e16:	e0c7      	b.n	8000fa8 <DIGIT_A_Display+0x23c>
	 case 2:
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A0_Pin, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e1e:	4864      	ldr	r0, [pc, #400]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000e20:	f003 fbf4 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A1_Pin, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e2a:	4861      	ldr	r0, [pc, #388]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000e2c:	f003 fbee 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A2_Pin, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e36:	485e      	ldr	r0, [pc, #376]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000e38:	f003 fbe8 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e42:	485c      	ldr	r0, [pc, #368]	@ (8000fb4 <DIGIT_A_Display+0x248>)
 8000e44:	f003 fbe2 	bl	800460c <HAL_GPIO_WritePin>
	 break;
 8000e48:	e0ae      	b.n	8000fa8 <DIGIT_A_Display+0x23c>
	 case 3:
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A0_Pin, GPIO_PIN_SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e50:	4857      	ldr	r0, [pc, #348]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000e52:	f003 fbdb 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A1_Pin, GPIO_PIN_SET);
 8000e56:	2201      	movs	r2, #1
 8000e58:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e5c:	4854      	ldr	r0, [pc, #336]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000e5e:	f003 fbd5 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A2_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e68:	4851      	ldr	r0, [pc, #324]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000e6a:	f003 fbcf 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e74:	484f      	ldr	r0, [pc, #316]	@ (8000fb4 <DIGIT_A_Display+0x248>)
 8000e76:	f003 fbc9 	bl	800460c <HAL_GPIO_WritePin>
	 break;
 8000e7a:	e095      	b.n	8000fa8 <DIGIT_A_Display+0x23c>
	 case 4:
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A0_Pin, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e82:	484b      	ldr	r0, [pc, #300]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000e84:	f003 fbc2 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A1_Pin, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e8e:	4848      	ldr	r0, [pc, #288]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000e90:	f003 fbbc 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A2_Pin, GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e9a:	4845      	ldr	r0, [pc, #276]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000e9c:	f003 fbb6 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ea6:	4843      	ldr	r0, [pc, #268]	@ (8000fb4 <DIGIT_A_Display+0x248>)
 8000ea8:	f003 fbb0 	bl	800460c <HAL_GPIO_WritePin>
	 break;
 8000eac:	e07c      	b.n	8000fa8 <DIGIT_A_Display+0x23c>
	 case 5:
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A0_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eb4:	483e      	ldr	r0, [pc, #248]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000eb6:	f003 fba9 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A1_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ec0:	483b      	ldr	r0, [pc, #236]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000ec2:	f003 fba3 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A2_Pin, GPIO_PIN_SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ecc:	4838      	ldr	r0, [pc, #224]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000ece:	f003 fb9d 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ed8:	4836      	ldr	r0, [pc, #216]	@ (8000fb4 <DIGIT_A_Display+0x248>)
 8000eda:	f003 fb97 	bl	800460c <HAL_GPIO_WritePin>
	 break;
 8000ede:	e063      	b.n	8000fa8 <DIGIT_A_Display+0x23c>
	 case 6:
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A0_Pin, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ee6:	4832      	ldr	r0, [pc, #200]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000ee8:	f003 fb90 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A1_Pin, GPIO_PIN_SET);
 8000eec:	2201      	movs	r2, #1
 8000eee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ef2:	482f      	ldr	r0, [pc, #188]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000ef4:	f003 fb8a 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A2_Pin, GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000efe:	482c      	ldr	r0, [pc, #176]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000f00:	f003 fb84 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f0a:	482a      	ldr	r0, [pc, #168]	@ (8000fb4 <DIGIT_A_Display+0x248>)
 8000f0c:	f003 fb7e 	bl	800460c <HAL_GPIO_WritePin>
	 break;
 8000f10:	e04a      	b.n	8000fa8 <DIGIT_A_Display+0x23c>
	 case 7:
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A0_Pin, GPIO_PIN_SET);
 8000f12:	2201      	movs	r2, #1
 8000f14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f18:	4825      	ldr	r0, [pc, #148]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000f1a:	f003 fb77 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A1_Pin, GPIO_PIN_SET);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f24:	4822      	ldr	r0, [pc, #136]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000f26:	f003 fb71 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A2_Pin, GPIO_PIN_SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f30:	481f      	ldr	r0, [pc, #124]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000f32:	f003 fb6b 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f3c:	481d      	ldr	r0, [pc, #116]	@ (8000fb4 <DIGIT_A_Display+0x248>)
 8000f3e:	f003 fb65 	bl	800460c <HAL_GPIO_WritePin>
	 break;
 8000f42:	e031      	b.n	8000fa8 <DIGIT_A_Display+0x23c>
	 case 8:
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A0_Pin, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f4a:	4819      	ldr	r0, [pc, #100]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000f4c:	f003 fb5e 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A1_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f56:	4816      	ldr	r0, [pc, #88]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000f58:	f003 fb58 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A2_Pin, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f62:	4813      	ldr	r0, [pc, #76]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000f64:	f003 fb52 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_SET);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f6e:	4811      	ldr	r0, [pc, #68]	@ (8000fb4 <DIGIT_A_Display+0x248>)
 8000f70:	f003 fb4c 	bl	800460c <HAL_GPIO_WritePin>
	 break;
 8000f74:	e018      	b.n	8000fa8 <DIGIT_A_Display+0x23c>
	 case 9:
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A0_Pin, GPIO_PIN_SET);
 8000f76:	2201      	movs	r2, #1
 8000f78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f7c:	480c      	ldr	r0, [pc, #48]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000f7e:	f003 fb45 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A1_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f88:	4809      	ldr	r0, [pc, #36]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000f8a:	f003 fb3f 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, DIGIT_A2_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f94:	4806      	ldr	r0, [pc, #24]	@ (8000fb0 <DIGIT_A_Display+0x244>)
 8000f96:	f003 fb39 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fa0:	4804      	ldr	r0, [pc, #16]	@ (8000fb4 <DIGIT_A_Display+0x248>)
 8000fa2:	f003 fb33 	bl	800460c <HAL_GPIO_WritePin>
	 break;
 8000fa6:	bf00      	nop
	 }
}
 8000fa8:	bf00      	nop
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40020800 	.word	0x40020800
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <DIGIT_B_Display>:

void DIGIT_B_Display(uint8_t DIGIT_B)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	 uint8_t DIGITB_VAL = 0x0F & DIGIT_B; //mask off higher4 buts
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	f003 030f 	and.w	r3, r3, #15
 8000fc8:	73fb      	strb	r3, [r7, #15]

	 switch(DIGITB_VAL)
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	2b09      	cmp	r3, #9
 8000fce:	f200 80f3 	bhi.w	80011b8 <DIGIT_B_Display+0x200>
 8000fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8000fd8 <DIGIT_B_Display+0x20>)
 8000fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd8:	08001001 	.word	0x08001001
 8000fdc:	0800102d 	.word	0x0800102d
 8000fe0:	08001059 	.word	0x08001059
 8000fe4:	08001085 	.word	0x08001085
 8000fe8:	080010b1 	.word	0x080010b1
 8000fec:	080010dd 	.word	0x080010dd
 8000ff0:	08001109 	.word	0x08001109
 8000ff4:	08001135 	.word	0x08001135
 8000ff8:	08001161 	.word	0x08001161
 8000ffc:	0800118d 	.word	0x0800118d
	 {
	 case 0:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001006:	486e      	ldr	r0, [pc, #440]	@ (80011c0 <DIGIT_B_Display+0x208>)
 8001008:	f003 fb00 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	2180      	movs	r1, #128	@ 0x80
 8001010:	486b      	ldr	r0, [pc, #428]	@ (80011c0 <DIGIT_B_Display+0x208>)
 8001012:	f003 fafb 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	2140      	movs	r1, #64	@ 0x40
 800101a:	4869      	ldr	r0, [pc, #420]	@ (80011c0 <DIGIT_B_Display+0x208>)
 800101c:	f003 faf6 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	2120      	movs	r1, #32
 8001024:	4866      	ldr	r0, [pc, #408]	@ (80011c0 <DIGIT_B_Display+0x208>)
 8001026:	f003 faf1 	bl	800460c <HAL_GPIO_WritePin>
	 break;
 800102a:	e0c5      	b.n	80011b8 <DIGIT_B_Display+0x200>
	 case 1:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001032:	4863      	ldr	r0, [pc, #396]	@ (80011c0 <DIGIT_B_Display+0x208>)
 8001034:	f003 faea 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	2180      	movs	r1, #128	@ 0x80
 800103c:	4860      	ldr	r0, [pc, #384]	@ (80011c0 <DIGIT_B_Display+0x208>)
 800103e:	f003 fae5 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2140      	movs	r1, #64	@ 0x40
 8001046:	485e      	ldr	r0, [pc, #376]	@ (80011c0 <DIGIT_B_Display+0x208>)
 8001048:	f003 fae0 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	2120      	movs	r1, #32
 8001050:	485b      	ldr	r0, [pc, #364]	@ (80011c0 <DIGIT_B_Display+0x208>)
 8001052:	f003 fadb 	bl	800460c <HAL_GPIO_WritePin>
	 break;
 8001056:	e0af      	b.n	80011b8 <DIGIT_B_Display+0x200>
	 case 2:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800105e:	4858      	ldr	r0, [pc, #352]	@ (80011c0 <DIGIT_B_Display+0x208>)
 8001060:	f003 fad4 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	2180      	movs	r1, #128	@ 0x80
 8001068:	4855      	ldr	r0, [pc, #340]	@ (80011c0 <DIGIT_B_Display+0x208>)
 800106a:	f003 facf 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2140      	movs	r1, #64	@ 0x40
 8001072:	4853      	ldr	r0, [pc, #332]	@ (80011c0 <DIGIT_B_Display+0x208>)
 8001074:	f003 faca 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	2120      	movs	r1, #32
 800107c:	4850      	ldr	r0, [pc, #320]	@ (80011c0 <DIGIT_B_Display+0x208>)
 800107e:	f003 fac5 	bl	800460c <HAL_GPIO_WritePin>
	 break;
 8001082:	e099      	b.n	80011b8 <DIGIT_B_Display+0x200>
	 case 3:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_SET);
 8001084:	2201      	movs	r2, #1
 8001086:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800108a:	484d      	ldr	r0, [pc, #308]	@ (80011c0 <DIGIT_B_Display+0x208>)
 800108c:	f003 fabe 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_SET);
 8001090:	2201      	movs	r2, #1
 8001092:	2180      	movs	r1, #128	@ 0x80
 8001094:	484a      	ldr	r0, [pc, #296]	@ (80011c0 <DIGIT_B_Display+0x208>)
 8001096:	f003 fab9 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2140      	movs	r1, #64	@ 0x40
 800109e:	4848      	ldr	r0, [pc, #288]	@ (80011c0 <DIGIT_B_Display+0x208>)
 80010a0:	f003 fab4 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2120      	movs	r1, #32
 80010a8:	4845      	ldr	r0, [pc, #276]	@ (80011c0 <DIGIT_B_Display+0x208>)
 80010aa:	f003 faaf 	bl	800460c <HAL_GPIO_WritePin>
	 break;
 80010ae:	e083      	b.n	80011b8 <DIGIT_B_Display+0x200>
	 case 4:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010b6:	4842      	ldr	r0, [pc, #264]	@ (80011c0 <DIGIT_B_Display+0x208>)
 80010b8:	f003 faa8 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	2180      	movs	r1, #128	@ 0x80
 80010c0:	483f      	ldr	r0, [pc, #252]	@ (80011c0 <DIGIT_B_Display+0x208>)
 80010c2:	f003 faa3 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	2140      	movs	r1, #64	@ 0x40
 80010ca:	483d      	ldr	r0, [pc, #244]	@ (80011c0 <DIGIT_B_Display+0x208>)
 80010cc:	f003 fa9e 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2120      	movs	r1, #32
 80010d4:	483a      	ldr	r0, [pc, #232]	@ (80011c0 <DIGIT_B_Display+0x208>)
 80010d6:	f003 fa99 	bl	800460c <HAL_GPIO_WritePin>
	 break;
 80010da:	e06d      	b.n	80011b8 <DIGIT_B_Display+0x200>
	 case 5:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010e2:	4837      	ldr	r0, [pc, #220]	@ (80011c0 <DIGIT_B_Display+0x208>)
 80010e4:	f003 fa92 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2180      	movs	r1, #128	@ 0x80
 80010ec:	4834      	ldr	r0, [pc, #208]	@ (80011c0 <DIGIT_B_Display+0x208>)
 80010ee:	f003 fa8d 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	2140      	movs	r1, #64	@ 0x40
 80010f6:	4832      	ldr	r0, [pc, #200]	@ (80011c0 <DIGIT_B_Display+0x208>)
 80010f8:	f003 fa88 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2120      	movs	r1, #32
 8001100:	482f      	ldr	r0, [pc, #188]	@ (80011c0 <DIGIT_B_Display+0x208>)
 8001102:	f003 fa83 	bl	800460c <HAL_GPIO_WritePin>
	 break;
 8001106:	e057      	b.n	80011b8 <DIGIT_B_Display+0x200>
	 case 6:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800110e:	482c      	ldr	r0, [pc, #176]	@ (80011c0 <DIGIT_B_Display+0x208>)
 8001110:	f003 fa7c 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_SET);
 8001114:	2201      	movs	r2, #1
 8001116:	2180      	movs	r1, #128	@ 0x80
 8001118:	4829      	ldr	r0, [pc, #164]	@ (80011c0 <DIGIT_B_Display+0x208>)
 800111a:	f003 fa77 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_SET);
 800111e:	2201      	movs	r2, #1
 8001120:	2140      	movs	r1, #64	@ 0x40
 8001122:	4827      	ldr	r0, [pc, #156]	@ (80011c0 <DIGIT_B_Display+0x208>)
 8001124:	f003 fa72 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	2120      	movs	r1, #32
 800112c:	4824      	ldr	r0, [pc, #144]	@ (80011c0 <DIGIT_B_Display+0x208>)
 800112e:	f003 fa6d 	bl	800460c <HAL_GPIO_WritePin>
	 break;
 8001132:	e041      	b.n	80011b8 <DIGIT_B_Display+0x200>
	 case 7:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_SET);
 8001134:	2201      	movs	r2, #1
 8001136:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800113a:	4821      	ldr	r0, [pc, #132]	@ (80011c0 <DIGIT_B_Display+0x208>)
 800113c:	f003 fa66 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_SET);
 8001140:	2201      	movs	r2, #1
 8001142:	2180      	movs	r1, #128	@ 0x80
 8001144:	481e      	ldr	r0, [pc, #120]	@ (80011c0 <DIGIT_B_Display+0x208>)
 8001146:	f003 fa61 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_SET);
 800114a:	2201      	movs	r2, #1
 800114c:	2140      	movs	r1, #64	@ 0x40
 800114e:	481c      	ldr	r0, [pc, #112]	@ (80011c0 <DIGIT_B_Display+0x208>)
 8001150:	f003 fa5c 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	2120      	movs	r1, #32
 8001158:	4819      	ldr	r0, [pc, #100]	@ (80011c0 <DIGIT_B_Display+0x208>)
 800115a:	f003 fa57 	bl	800460c <HAL_GPIO_WritePin>
	 break;
 800115e:	e02b      	b.n	80011b8 <DIGIT_B_Display+0x200>
	 case 8:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001166:	4816      	ldr	r0, [pc, #88]	@ (80011c0 <DIGIT_B_Display+0x208>)
 8001168:	f003 fa50 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	2180      	movs	r1, #128	@ 0x80
 8001170:	4813      	ldr	r0, [pc, #76]	@ (80011c0 <DIGIT_B_Display+0x208>)
 8001172:	f003 fa4b 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	2140      	movs	r1, #64	@ 0x40
 800117a:	4811      	ldr	r0, [pc, #68]	@ (80011c0 <DIGIT_B_Display+0x208>)
 800117c:	f003 fa46 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_SET);
 8001180:	2201      	movs	r2, #1
 8001182:	2120      	movs	r1, #32
 8001184:	480e      	ldr	r0, [pc, #56]	@ (80011c0 <DIGIT_B_Display+0x208>)
 8001186:	f003 fa41 	bl	800460c <HAL_GPIO_WritePin>
	 break;
 800118a:	e015      	b.n	80011b8 <DIGIT_B_Display+0x200>
	 case 9:
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001192:	480b      	ldr	r0, [pc, #44]	@ (80011c0 <DIGIT_B_Display+0x208>)
 8001194:	f003 fa3a 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B1_Pin, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	2180      	movs	r1, #128	@ 0x80
 800119c:	4808      	ldr	r0, [pc, #32]	@ (80011c0 <DIGIT_B_Display+0x208>)
 800119e:	f003 fa35 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B2_Pin, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2140      	movs	r1, #64	@ 0x40
 80011a6:	4806      	ldr	r0, [pc, #24]	@ (80011c0 <DIGIT_B_Display+0x208>)
 80011a8:	f003 fa30 	bl	800460c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	2120      	movs	r1, #32
 80011b0:	4803      	ldr	r0, [pc, #12]	@ (80011c0 <DIGIT_B_Display+0x208>)
 80011b2:	f003 fa2b 	bl	800460c <HAL_GPIO_WritePin>
	 break;
 80011b6:	bf00      	nop
	 }
}
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40020400 	.word	0x40020400

080011c4 <ADC_Select_CH>:


void ADC_Select_CH(int CH)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
	switch(CH)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b0f      	cmp	r3, #15
 80011de:	f200 814b 	bhi.w	8001478 <ADC_Select_CH+0x2b4>
 80011e2:	a201      	add	r2, pc, #4	@ (adr r2, 80011e8 <ADC_Select_CH+0x24>)
 80011e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e8:	08001229 	.word	0x08001229
 80011ec:	0800124b 	.word	0x0800124b
 80011f0:	0800126d 	.word	0x0800126d
 80011f4:	0800128f 	.word	0x0800128f
 80011f8:	080012b1 	.word	0x080012b1
 80011fc:	080012d3 	.word	0x080012d3
 8001200:	080012f5 	.word	0x080012f5
 8001204:	08001317 	.word	0x08001317
 8001208:	08001339 	.word	0x08001339
 800120c:	0800135b 	.word	0x0800135b
 8001210:	0800137b 	.word	0x0800137b
 8001214:	0800139b 	.word	0x0800139b
 8001218:	080013bb 	.word	0x080013bb
 800121c:	080013db 	.word	0x080013db
 8001220:	080013fb 	.word	0x080013fb
 8001224:	0800141b 	.word	0x0800141b
	{
		case 0:
			sConfig.Channel = ADC_CHANNEL_0;
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 800122c:	2301      	movs	r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	4619      	mov	r1, r3
 8001236:	4892      	ldr	r0, [pc, #584]	@ (8001480 <ADC_Select_CH+0x2bc>)
 8001238:	f002 fc8a 	bl	8003b50 <HAL_ADC_ConfigChannel>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	f000 80fb 	beq.w	800143a <ADC_Select_CH+0x276>
			{
				Error_Handler();
 8001244:	f001 ff92 	bl	800316c <Error_Handler>
			}
		break;
 8001248:	e0f7      	b.n	800143a <ADC_Select_CH+0x276>

		case 1:
			sConfig.Channel = ADC_CHANNEL_1;
 800124a:	2301      	movs	r3, #1
 800124c:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 800124e:	2301      	movs	r3, #1
 8001250:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	4619      	mov	r1, r3
 8001258:	4889      	ldr	r0, [pc, #548]	@ (8001480 <ADC_Select_CH+0x2bc>)
 800125a:	f002 fc79 	bl	8003b50 <HAL_ADC_ConfigChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 80ec 	beq.w	800143e <ADC_Select_CH+0x27a>
			{
				Error_Handler();
 8001266:	f001 ff81 	bl	800316c <Error_Handler>
			}
		break;
 800126a:	e0e8      	b.n	800143e <ADC_Select_CH+0x27a>

		case 2:
			sConfig.Channel = ADC_CHANNEL_2;
 800126c:	2302      	movs	r3, #2
 800126e:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 8001270:	2301      	movs	r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001274:	f107 0308 	add.w	r3, r7, #8
 8001278:	4619      	mov	r1, r3
 800127a:	4881      	ldr	r0, [pc, #516]	@ (8001480 <ADC_Select_CH+0x2bc>)
 800127c:	f002 fc68 	bl	8003b50 <HAL_ADC_ConfigChannel>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 80dd 	beq.w	8001442 <ADC_Select_CH+0x27e>
			{
				Error_Handler();
 8001288:	f001 ff70 	bl	800316c <Error_Handler>
			}
		break;
 800128c:	e0d9      	b.n	8001442 <ADC_Select_CH+0x27e>

		case 3:
			sConfig.Channel = ADC_CHANNEL_3;
 800128e:	2303      	movs	r3, #3
 8001290:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 8001292:	2301      	movs	r3, #1
 8001294:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001296:	f107 0308 	add.w	r3, r7, #8
 800129a:	4619      	mov	r1, r3
 800129c:	4878      	ldr	r0, [pc, #480]	@ (8001480 <ADC_Select_CH+0x2bc>)
 800129e:	f002 fc57 	bl	8003b50 <HAL_ADC_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80ce 	beq.w	8001446 <ADC_Select_CH+0x282>
			{
				Error_Handler();
 80012aa:	f001 ff5f 	bl	800316c <Error_Handler>
			}
		break;
 80012ae:	e0ca      	b.n	8001446 <ADC_Select_CH+0x282>

		case 4:
			sConfig.Channel = ADC_CHANNEL_4;
 80012b0:	2304      	movs	r3, #4
 80012b2:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 80012b4:	2301      	movs	r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b8:	f107 0308 	add.w	r3, r7, #8
 80012bc:	4619      	mov	r1, r3
 80012be:	4870      	ldr	r0, [pc, #448]	@ (8001480 <ADC_Select_CH+0x2bc>)
 80012c0:	f002 fc46 	bl	8003b50 <HAL_ADC_ConfigChannel>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 80bf 	beq.w	800144a <ADC_Select_CH+0x286>
			{
				Error_Handler();
 80012cc:	f001 ff4e 	bl	800316c <Error_Handler>
			}
		break;
 80012d0:	e0bb      	b.n	800144a <ADC_Select_CH+0x286>

		case 5:
			sConfig.Channel = ADC_CHANNEL_5;
 80012d2:	2305      	movs	r3, #5
 80012d4:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 80012d6:	2301      	movs	r3, #1
 80012d8:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	4619      	mov	r1, r3
 80012e0:	4867      	ldr	r0, [pc, #412]	@ (8001480 <ADC_Select_CH+0x2bc>)
 80012e2:	f002 fc35 	bl	8003b50 <HAL_ADC_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 80b0 	beq.w	800144e <ADC_Select_CH+0x28a>
			{
				Error_Handler();
 80012ee:	f001 ff3d 	bl	800316c <Error_Handler>
			}
		break;
 80012f2:	e0ac      	b.n	800144e <ADC_Select_CH+0x28a>

		case 6:
			sConfig.Channel = ADC_CHANNEL_6;
 80012f4:	2306      	movs	r3, #6
 80012f6:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fc:	f107 0308 	add.w	r3, r7, #8
 8001300:	4619      	mov	r1, r3
 8001302:	485f      	ldr	r0, [pc, #380]	@ (8001480 <ADC_Select_CH+0x2bc>)
 8001304:	f002 fc24 	bl	8003b50 <HAL_ADC_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 80a1 	beq.w	8001452 <ADC_Select_CH+0x28e>
			{
				Error_Handler();
 8001310:	f001 ff2c 	bl	800316c <Error_Handler>
			}
		break;
 8001314:	e09d      	b.n	8001452 <ADC_Select_CH+0x28e>

		case 7:
			sConfig.Channel = ADC_CHANNEL_7;
 8001316:	2307      	movs	r3, #7
 8001318:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 800131a:	2301      	movs	r3, #1
 800131c:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131e:	f107 0308 	add.w	r3, r7, #8
 8001322:	4619      	mov	r1, r3
 8001324:	4856      	ldr	r0, [pc, #344]	@ (8001480 <ADC_Select_CH+0x2bc>)
 8001326:	f002 fc13 	bl	8003b50 <HAL_ADC_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 8092 	beq.w	8001456 <ADC_Select_CH+0x292>
			{
				Error_Handler();
 8001332:	f001 ff1b 	bl	800316c <Error_Handler>
			}
		break;
 8001336:	e08e      	b.n	8001456 <ADC_Select_CH+0x292>

		case 8:
			sConfig.Channel = ADC_CHANNEL_8;
 8001338:	2308      	movs	r3, #8
 800133a:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 800133c:	2301      	movs	r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001340:	f107 0308 	add.w	r3, r7, #8
 8001344:	4619      	mov	r1, r3
 8001346:	484e      	ldr	r0, [pc, #312]	@ (8001480 <ADC_Select_CH+0x2bc>)
 8001348:	f002 fc02 	bl	8003b50 <HAL_ADC_ConfigChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 8083 	beq.w	800145a <ADC_Select_CH+0x296>
			{
				Error_Handler();
 8001354:	f001 ff0a 	bl	800316c <Error_Handler>
			}
		break;
 8001358:	e07f      	b.n	800145a <ADC_Select_CH+0x296>

		case 9:
			sConfig.Channel = ADC_CHANNEL_9;
 800135a:	2309      	movs	r3, #9
 800135c:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 800135e:	2301      	movs	r3, #1
 8001360:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001362:	f107 0308 	add.w	r3, r7, #8
 8001366:	4619      	mov	r1, r3
 8001368:	4845      	ldr	r0, [pc, #276]	@ (8001480 <ADC_Select_CH+0x2bc>)
 800136a:	f002 fbf1 	bl	8003b50 <HAL_ADC_ConfigChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d074      	beq.n	800145e <ADC_Select_CH+0x29a>
			{
				Error_Handler();
 8001374:	f001 fefa 	bl	800316c <Error_Handler>
			}
		break;
 8001378:	e071      	b.n	800145e <ADC_Select_CH+0x29a>

		case 10:
			sConfig.Channel = ADC_CHANNEL_10;
 800137a:	230a      	movs	r3, #10
 800137c:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 800137e:	2301      	movs	r3, #1
 8001380:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001382:	f107 0308 	add.w	r3, r7, #8
 8001386:	4619      	mov	r1, r3
 8001388:	483d      	ldr	r0, [pc, #244]	@ (8001480 <ADC_Select_CH+0x2bc>)
 800138a:	f002 fbe1 	bl	8003b50 <HAL_ADC_ConfigChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d066      	beq.n	8001462 <ADC_Select_CH+0x29e>
			{
				Error_Handler();
 8001394:	f001 feea 	bl	800316c <Error_Handler>
			}
		break;
 8001398:	e063      	b.n	8001462 <ADC_Select_CH+0x29e>

		case 11:
			sConfig.Channel = ADC_CHANNEL_11;
 800139a:	230b      	movs	r3, #11
 800139c:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 800139e:	2301      	movs	r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	4619      	mov	r1, r3
 80013a8:	4835      	ldr	r0, [pc, #212]	@ (8001480 <ADC_Select_CH+0x2bc>)
 80013aa:	f002 fbd1 	bl	8003b50 <HAL_ADC_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d058      	beq.n	8001466 <ADC_Select_CH+0x2a2>
			{
				Error_Handler();
 80013b4:	f001 feda 	bl	800316c <Error_Handler>
			}
		break;
 80013b8:	e055      	b.n	8001466 <ADC_Select_CH+0x2a2>

		case 12:
			sConfig.Channel = ADC_CHANNEL_12;
 80013ba:	230c      	movs	r3, #12
 80013bc:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 80013be:	2301      	movs	r3, #1
 80013c0:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	4619      	mov	r1, r3
 80013c8:	482d      	ldr	r0, [pc, #180]	@ (8001480 <ADC_Select_CH+0x2bc>)
 80013ca:	f002 fbc1 	bl	8003b50 <HAL_ADC_ConfigChannel>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d04a      	beq.n	800146a <ADC_Select_CH+0x2a6>
			{
				Error_Handler();
 80013d4:	f001 feca 	bl	800316c <Error_Handler>
			}
		break;
 80013d8:	e047      	b.n	800146a <ADC_Select_CH+0x2a6>

		case 13:
			sConfig.Channel = ADC_CHANNEL_13;
 80013da:	230d      	movs	r3, #13
 80013dc:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 80013de:	2301      	movs	r3, #1
 80013e0:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	4619      	mov	r1, r3
 80013e8:	4825      	ldr	r0, [pc, #148]	@ (8001480 <ADC_Select_CH+0x2bc>)
 80013ea:	f002 fbb1 	bl	8003b50 <HAL_ADC_ConfigChannel>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d03c      	beq.n	800146e <ADC_Select_CH+0x2aa>
			{
				Error_Handler();
 80013f4:	f001 feba 	bl	800316c <Error_Handler>
			}
		break;
 80013f8:	e039      	b.n	800146e <ADC_Select_CH+0x2aa>

		case 14:
			sConfig.Channel = ADC_CHANNEL_14;
 80013fa:	230e      	movs	r3, #14
 80013fc:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 80013fe:	2301      	movs	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001402:	f107 0308 	add.w	r3, r7, #8
 8001406:	4619      	mov	r1, r3
 8001408:	481d      	ldr	r0, [pc, #116]	@ (8001480 <ADC_Select_CH+0x2bc>)
 800140a:	f002 fba1 	bl	8003b50 <HAL_ADC_ConfigChannel>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d02e      	beq.n	8001472 <ADC_Select_CH+0x2ae>
			{
				Error_Handler();
 8001414:	f001 feaa 	bl	800316c <Error_Handler>
			}
		break;
 8001418:	e02b      	b.n	8001472 <ADC_Select_CH+0x2ae>

		case 15:
			sConfig.Channel = ADC_CHANNEL_15;
 800141a:	230f      	movs	r3, #15
 800141c:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 800141e:	2301      	movs	r3, #1
 8001420:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001422:	f107 0308 	add.w	r3, r7, #8
 8001426:	4619      	mov	r1, r3
 8001428:	4815      	ldr	r0, [pc, #84]	@ (8001480 <ADC_Select_CH+0x2bc>)
 800142a:	f002 fb91 	bl	8003b50 <HAL_ADC_ConfigChannel>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d020      	beq.n	8001476 <ADC_Select_CH+0x2b2>
			{
				Error_Handler();
 8001434:	f001 fe9a 	bl	800316c <Error_Handler>
			}
		break;
 8001438:	e01d      	b.n	8001476 <ADC_Select_CH+0x2b2>
		break;
 800143a:	bf00      	nop
 800143c:	e01c      	b.n	8001478 <ADC_Select_CH+0x2b4>
		break;
 800143e:	bf00      	nop
 8001440:	e01a      	b.n	8001478 <ADC_Select_CH+0x2b4>
		break;
 8001442:	bf00      	nop
 8001444:	e018      	b.n	8001478 <ADC_Select_CH+0x2b4>
		break;
 8001446:	bf00      	nop
 8001448:	e016      	b.n	8001478 <ADC_Select_CH+0x2b4>
		break;
 800144a:	bf00      	nop
 800144c:	e014      	b.n	8001478 <ADC_Select_CH+0x2b4>
		break;
 800144e:	bf00      	nop
 8001450:	e012      	b.n	8001478 <ADC_Select_CH+0x2b4>
		break;
 8001452:	bf00      	nop
 8001454:	e010      	b.n	8001478 <ADC_Select_CH+0x2b4>
		break;
 8001456:	bf00      	nop
 8001458:	e00e      	b.n	8001478 <ADC_Select_CH+0x2b4>
		break;
 800145a:	bf00      	nop
 800145c:	e00c      	b.n	8001478 <ADC_Select_CH+0x2b4>
		break;
 800145e:	bf00      	nop
 8001460:	e00a      	b.n	8001478 <ADC_Select_CH+0x2b4>
		break;
 8001462:	bf00      	nop
 8001464:	e008      	b.n	8001478 <ADC_Select_CH+0x2b4>
		break;
 8001466:	bf00      	nop
 8001468:	e006      	b.n	8001478 <ADC_Select_CH+0x2b4>
		break;
 800146a:	bf00      	nop
 800146c:	e004      	b.n	8001478 <ADC_Select_CH+0x2b4>
		break;
 800146e:	bf00      	nop
 8001470:	e002      	b.n	8001478 <ADC_Select_CH+0x2b4>
		break;
 8001472:	bf00      	nop
 8001474:	e000      	b.n	8001478 <ADC_Select_CH+0x2b4>
		break;
 8001476:	bf00      	nop
	}
}
 8001478:	bf00      	nop
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000088 	.word	0x20000088

08001484 <distance_sensor>:

void distance_sensor()
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b0a0      	sub	sp, #128	@ 0x80
 8001488:	af00      	add	r7, sp, #0
	// Distance Sensor
	  HAL_UART_Receive_IT(&huart1,us100_buffer,2);
 800148a:	2202      	movs	r2, #2
 800148c:	494f      	ldr	r1, [pc, #316]	@ (80015cc <distance_sensor+0x148>)
 800148e:	4850      	ldr	r0, [pc, #320]	@ (80015d0 <distance_sensor+0x14c>)
 8001490:	f004 fe83 	bl	800619a <HAL_UART_Receive_IT>
	  HAL_UART_Transmit(&huart1, &cmd_dist, 1, 500);
 8001494:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001498:	2201      	movs	r2, #1
 800149a:	494e      	ldr	r1, [pc, #312]	@ (80015d4 <distance_sensor+0x150>)
 800149c:	484c      	ldr	r0, [pc, #304]	@ (80015d0 <distance_sensor+0x14c>)
 800149e:	f004 fdea 	bl	8006076 <HAL_UART_Transmit>
	  while(us100_Rx_flag = (00)) {};
 80014a2:	bf00      	nop
 80014a4:	4b4c      	ldr	r3, [pc, #304]	@ (80015d8 <distance_sensor+0x154>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
	  distance = us100_buffer[0] << 8 | us100_buffer[1];
 80014aa:	4b48      	ldr	r3, [pc, #288]	@ (80015cc <distance_sensor+0x148>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	b21a      	sxth	r2, r3
 80014b2:	4b46      	ldr	r3, [pc, #280]	@ (80015cc <distance_sensor+0x148>)
 80014b4:	785b      	ldrb	r3, [r3, #1]
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	4313      	orrs	r3, r2
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	b29a      	uxth	r2, r3
 80014be:	4b47      	ldr	r3, [pc, #284]	@ (80015dc <distance_sensor+0x158>)
 80014c0:	801a      	strh	r2, [r3, #0]
	  if(distance >= 650){
 80014c2:	4b46      	ldr	r3, [pc, #280]	@ (80015dc <distance_sensor+0x158>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	f240 2289 	movw	r2, #649	@ 0x289
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d979      	bls.n	80015c2 <distance_sensor+0x13e>
		  uint8_t buffer[128] = {0};
 80014ce:	2300      	movs	r3, #0
 80014d0:	603b      	str	r3, [r7, #0]
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	227c      	movs	r2, #124	@ 0x7c
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f005 fe17 	bl	800710c <memset>
		TIM3->CCR3 = 0;
 80014de:	4b40      	ldr	r3, [pc, #256]	@ (80015e0 <distance_sensor+0x15c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR1 = 0;
 80014e4:	4b3e      	ldr	r3, [pc, #248]	@ (80015e0 <distance_sensor+0x15c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	635a      	str	r2, [r3, #52]	@ 0x34
		sprintf((char*)buffer, "\r\n---------------RESERVOIR IS EMPTY----------------");
 80014ea:	463b      	mov	r3, r7
 80014ec:	493d      	ldr	r1, [pc, #244]	@ (80015e4 <distance_sensor+0x160>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	f005 fdec 	bl	80070cc <siprintf>
		HAL_UART_Transmit(&huart6, buffer, strlen((char*)buffer), 1000);
 80014f4:	463b      	mov	r3, r7
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7fe fe72 	bl	80001e0 <strlen>
 80014fc:	4603      	mov	r3, r0
 80014fe:	b29a      	uxth	r2, r3
 8001500:	4639      	mov	r1, r7
 8001502:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001506:	4838      	ldr	r0, [pc, #224]	@ (80015e8 <distance_sensor+0x164>)
 8001508:	f004 fdb5 	bl	8006076 <HAL_UART_Transmit>



	HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET); // Turn off LD2 LED
 800150c:	2200      	movs	r2, #0
 800150e:	2120      	movs	r1, #32
 8001510:	4836      	ldr	r0, [pc, #216]	@ (80015ec <distance_sensor+0x168>)
 8001512:	f003 f87b 	bl	800460c <HAL_GPIO_WritePin>

	  while(1){
		  HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800151c:	4833      	ldr	r0, [pc, #204]	@ (80015ec <distance_sensor+0x168>)
 800151e:	f003 f875 	bl	800460c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001528:	4830      	ldr	r0, [pc, #192]	@ (80015ec <distance_sensor+0x168>)
 800152a:	f003 f86f 	bl	800460c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, RFD_Pin, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001534:	482d      	ldr	r0, [pc, #180]	@ (80015ec <distance_sensor+0x168>)
 8001536:	f003 f869 	bl	800460c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, RFD_Pin, GPIO_PIN_SET);
 800153a:	2201      	movs	r2, #1
 800153c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001540:	482a      	ldr	r0, [pc, #168]	@ (80015ec <distance_sensor+0x168>)
 8001542:	f003 f863 	bl	800460c <HAL_GPIO_WritePin>

		  HAL_Delay(1000);
 8001546:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800154a:	f002 f94d 	bl	80037e8 <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001554:	4825      	ldr	r0, [pc, #148]	@ (80015ec <distance_sensor+0x168>)
 8001556:	f003 f859 	bl	800460c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001560:	4822      	ldr	r0, [pc, #136]	@ (80015ec <distance_sensor+0x168>)
 8001562:	f003 f853 	bl	800460c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, RFD_Pin, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800156c:	481f      	ldr	r0, [pc, #124]	@ (80015ec <distance_sensor+0x168>)
 800156e:	f003 f84d 	bl	800460c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_SET);
 8001572:	2201      	movs	r2, #1
 8001574:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001578:	481c      	ldr	r0, [pc, #112]	@ (80015ec <distance_sensor+0x168>)
 800157a:	f003 f847 	bl	800460c <HAL_GPIO_WritePin>


		  HAL_Delay(1000);
 800157e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001582:	f002 f931 	bl	80037e8 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800158c:	4817      	ldr	r0, [pc, #92]	@ (80015ec <distance_sensor+0x168>)
 800158e:	f003 f83d 	bl	800460c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001598:	4814      	ldr	r0, [pc, #80]	@ (80015ec <distance_sensor+0x168>)
 800159a:	f003 f837 	bl	800460c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, RFD_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015a4:	4811      	ldr	r0, [pc, #68]	@ (80015ec <distance_sensor+0x168>)
 80015a6:	f003 f831 	bl	800460c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_SET);
 80015aa:	2201      	movs	r2, #1
 80015ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015b0:	480e      	ldr	r0, [pc, #56]	@ (80015ec <distance_sensor+0x168>)
 80015b2:	f003 f82b 	bl	800460c <HAL_GPIO_WritePin>

		  HAL_Delay(1000);
 80015b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015ba:	f002 f915 	bl	80037e8 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_RESET);
 80015be:	bf00      	nop
 80015c0:	e7a9      	b.n	8001516 <distance_sensor+0x92>
	  }

	}
}
 80015c2:	bf00      	nop
 80015c4:	3780      	adds	r7, #128	@ 0x80
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2000029c 	.word	0x2000029c
 80015d0:	200001a8 	.word	0x200001a8
 80015d4:	20000002 	.word	0x20000002
 80015d8:	20000275 	.word	0x20000275
 80015dc:	20000000 	.word	0x20000000
 80015e0:	40000400 	.word	0x40000400
 80015e4:	08007a24 	.word	0x08007a24
 80015e8:	20000230 	.word	0x20000230
 80015ec:	40020000 	.word	0x40020000

080015f0 <manual_mode_INLET>:

void manual_mode_INLET()
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
	ADC_Select_CH(9);
 80015f6:	2009      	movs	r0, #9
 80015f8:	f7ff fde4 	bl	80011c4 <ADC_Select_CH>
	HAL_ADC_Start(&hadc1);
 80015fc:	4811      	ldr	r0, [pc, #68]	@ (8001644 <manual_mode_INLET+0x54>)
 80015fe:	f002 f95b 	bl	80038b8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001602:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001606:	480f      	ldr	r0, [pc, #60]	@ (8001644 <manual_mode_INLET+0x54>)
 8001608:	f002 fa0a 	bl	8003a20 <HAL_ADC_PollForConversion>
	uint8_t ADC_CH9 = HAL_ADC_GetValue(&hadc1);
 800160c:	480d      	ldr	r0, [pc, #52]	@ (8001644 <manual_mode_INLET+0x54>)
 800160e:	f002 fa92 	bl	8003b36 <HAL_ADC_GetValue>
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
	TIM3_DCM_PWM = (((ADC_CH9 << 6) + (ADC_CH9 << 5) + (ADC_CH9 << 2)) >> 8 );
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	019a      	lsls	r2, r3, #6
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	015b      	lsls	r3, r3, #5
 800161e:	441a      	add	r2, r3
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	121b      	asrs	r3, r3, #8
 8001628:	4a07      	ldr	r2, [pc, #28]	@ (8001648 <manual_mode_INLET+0x58>)
 800162a:	6013      	str	r3, [r2, #0]
	TIM3->CCR1 = TIM3_DCM_PWM;
 800162c:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <manual_mode_INLET+0x58>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <manual_mode_INLET+0x5c>)
 8001632:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR3 = 0;
 8001634:	4b05      	ldr	r3, [pc, #20]	@ (800164c <manual_mode_INLET+0x5c>)
 8001636:	2200      	movs	r2, #0
 8001638:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000088 	.word	0x20000088
 8001648:	200002a0 	.word	0x200002a0
 800164c:	40000400 	.word	0x40000400

08001650 <manual_mode_ZONES>:

void manual_mode_ZONES()
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
	ADC_Select_CH(9);
 8001656:	2009      	movs	r0, #9
 8001658:	f7ff fdb4 	bl	80011c4 <ADC_Select_CH>
	HAL_ADC_Start(&hadc1);
 800165c:	4811      	ldr	r0, [pc, #68]	@ (80016a4 <manual_mode_ZONES+0x54>)
 800165e:	f002 f92b 	bl	80038b8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001662:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001666:	480f      	ldr	r0, [pc, #60]	@ (80016a4 <manual_mode_ZONES+0x54>)
 8001668:	f002 f9da 	bl	8003a20 <HAL_ADC_PollForConversion>
	uint8_t ADC_CH9 = HAL_ADC_GetValue(&hadc1);
 800166c:	480d      	ldr	r0, [pc, #52]	@ (80016a4 <manual_mode_ZONES+0x54>)
 800166e:	f002 fa62 	bl	8003b36 <HAL_ADC_GetValue>
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
	TIM3_DCM_PWM = (((ADC_CH9 << 6) + (ADC_CH9 << 5) + (ADC_CH9 << 2)) >> 8 );
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	019a      	lsls	r2, r3, #6
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	015b      	lsls	r3, r3, #5
 800167e:	441a      	add	r2, r3
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	121b      	asrs	r3, r3, #8
 8001688:	4a07      	ldr	r2, [pc, #28]	@ (80016a8 <manual_mode_ZONES+0x58>)
 800168a:	6013      	str	r3, [r2, #0]
	TIM3->CCR3 = TIM3_DCM_PWM;
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <manual_mode_ZONES+0x58>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <manual_mode_ZONES+0x5c>)
 8001692:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR1 = 0;
 8001694:	4b05      	ldr	r3, [pc, #20]	@ (80016ac <manual_mode_ZONES+0x5c>)
 8001696:	2200      	movs	r2, #0
 8001698:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000088 	.word	0x20000088
 80016a8:	200002a0 	.word	0x200002a0
 80016ac:	40000400 	.word	0x40000400

080016b0 <digits_set>:

void digits_set()
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	// calculate percentage fill
	  percent = ((650-distance)*100)/650;
 80016b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001764 <digits_set+0xb4>)
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	f5c3 7322 	rsb	r3, r3, #648	@ 0x288
 80016bc:	3302      	adds	r3, #2
 80016be:	2264      	movs	r2, #100	@ 0x64
 80016c0:	fb02 f303 	mul.w	r3, r2, r3
 80016c4:	4a28      	ldr	r2, [pc, #160]	@ (8001768 <digits_set+0xb8>)
 80016c6:	fb82 1203 	smull	r1, r2, r2, r3
 80016ca:	1212      	asrs	r2, r2, #8
 80016cc:	17db      	asrs	r3, r3, #31
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe ff2f 	bl	8000534 <__aeabi_i2d>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4924      	ldr	r1, [pc, #144]	@ (800176c <digits_set+0xbc>)
 80016dc:	e9c1 2300 	strd	r2, r3, [r1]
	  digits[0] = ((int)(percent))%10;
 80016e0:	4b22      	ldr	r3, [pc, #136]	@ (800176c <digits_set+0xbc>)
 80016e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	f7ff f99f 	bl	8000a2c <__aeabi_d2iz>
 80016ee:	4601      	mov	r1, r0
 80016f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001770 <digits_set+0xc0>)
 80016f2:	fb83 2301 	smull	r2, r3, r3, r1
 80016f6:	109a      	asrs	r2, r3, #2
 80016f8:	17cb      	asrs	r3, r1, #31
 80016fa:	1ad2      	subs	r2, r2, r3
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	1aca      	subs	r2, r1, r3
 8001706:	4b1b      	ldr	r3, [pc, #108]	@ (8001774 <digits_set+0xc4>)
 8001708:	601a      	str	r2, [r3, #0]
	  digits[1] = ((int)percent / 10)%10;
 800170a:	4b18      	ldr	r3, [pc, #96]	@ (800176c <digits_set+0xbc>)
 800170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	f7ff f98a 	bl	8000a2c <__aeabi_d2iz>
 8001718:	4603      	mov	r3, r0
 800171a:	4a15      	ldr	r2, [pc, #84]	@ (8001770 <digits_set+0xc0>)
 800171c:	fb82 1203 	smull	r1, r2, r2, r3
 8001720:	1092      	asrs	r2, r2, #2
 8001722:	17db      	asrs	r3, r3, #31
 8001724:	1ad1      	subs	r1, r2, r3
 8001726:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <digits_set+0xc0>)
 8001728:	fb83 2301 	smull	r2, r3, r3, r1
 800172c:	109a      	asrs	r2, r3, #2
 800172e:	17cb      	asrs	r3, r1, #31
 8001730:	1ad2      	subs	r2, r2, r3
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	1aca      	subs	r2, r1, r3
 800173c:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <digits_set+0xc4>)
 800173e:	605a      	str	r2, [r3, #4]

	  HAL_Delay(100);
 8001740:	2064      	movs	r0, #100	@ 0x64
 8001742:	f002 f851 	bl	80037e8 <HAL_Delay>

	  // display percentage full on timer board
	  DIGIT_A_Display(digits[1]);
 8001746:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <digits_set+0xc4>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fb0d 	bl	8000d6c <DIGIT_A_Display>
	  DIGIT_B_Display(digits[0]);
 8001752:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <digits_set+0xc4>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fc2d 	bl	8000fb8 <DIGIT_B_Display>
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000000 	.word	0x20000000
 8001768:	64d319ff 	.word	0x64d319ff
 800176c:	200002b0 	.word	0x200002b0
 8001770:	66666667 	.word	0x66666667
 8001774:	200002a4 	.word	0x200002a4

08001778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001778:	b5b0      	push	{r4, r5, r7, lr}
 800177a:	f5ad 6d0d 	sub.w	sp, sp, #2256	@ 0x8d0
 800177e:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  uint8_t txd_msg_buffer[128] = {0};
 8001780:	2300      	movs	r3, #0
 8001782:	f8c7 3838 	str.w	r3, [r7, #2104]	@ 0x838
 8001786:	f607 033c 	addw	r3, r7, #2108	@ 0x83c
 800178a:	227c      	movs	r2, #124	@ 0x7c
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f005 fcbc 	bl	800710c <memset>
  uint8_t txd_msg_buffer1[128] = {0};
 8001794:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001798:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	3304      	adds	r3, #4
 80017a2:	227c      	movs	r2, #124	@ 0x7c
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f005 fcb0 	bl	800710c <memset>
  uint8_t txd_msg_buffer2[128] = {0};
 80017ac:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 80017b0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	3304      	adds	r3, #4
 80017ba:	227c      	movs	r2, #124	@ 0x7c
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f005 fca4 	bl	800710c <memset>
  uint8_t txd_msg_buffer3[128] = {0};
 80017c4:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 80017c8:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	3304      	adds	r3, #4
 80017d2:	227c      	movs	r2, #124	@ 0x7c
 80017d4:	2100      	movs	r1, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f005 fc98 	bl	800710c <memset>
  uint8_t txd_msg_buffer4[128] = {0};
 80017dc:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 80017e0:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	3304      	adds	r3, #4
 80017ea:	227c      	movs	r2, #124	@ 0x7c
 80017ec:	2100      	movs	r1, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f005 fc8c 	bl	800710c <memset>
  uint8_t txd_msg_buffer5[128] = {0};
 80017f4:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 80017f8:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	3304      	adds	r3, #4
 8001802:	227c      	movs	r2, #124	@ 0x7c
 8001804:	2100      	movs	r1, #0
 8001806:	4618      	mov	r0, r3
 8001808:	f005 fc80 	bl	800710c <memset>
  uint8_t txd_msg_buffer6[128] = {0};
 800180c:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001810:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	3304      	adds	r3, #4
 800181a:	227c      	movs	r2, #124	@ 0x7c
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f005 fc74 	bl	800710c <memset>
  uint8_t txd_msg_buffer7[128] = {0};
 8001824:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001828:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	3304      	adds	r3, #4
 8001832:	227c      	movs	r2, #124	@ 0x7c
 8001834:	2100      	movs	r1, #0
 8001836:	4618      	mov	r0, r3
 8001838:	f005 fc68 	bl	800710c <memset>
  uint8_t txd_msg_buffer8[128] = {0};
 800183c:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001840:	f5a3 6392 	sub.w	r3, r3, #1168	@ 0x490
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	3304      	adds	r3, #4
 800184a:	227c      	movs	r2, #124	@ 0x7c
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f005 fc5c 	bl	800710c <memset>
  uint8_t txd_msg_buffer9[128] = {0};
 8001854:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001858:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	3304      	adds	r3, #4
 8001862:	227c      	movs	r2, #124	@ 0x7c
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f005 fc50 	bl	800710c <memset>
  uint8_t txd_msg_buffer10[128] = {0};
 800186c:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001870:	f5a3 63b2 	sub.w	r3, r3, #1424	@ 0x590
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	3304      	adds	r3, #4
 800187a:	227c      	movs	r2, #124	@ 0x7c
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f005 fc44 	bl	800710c <memset>
  uint8_t txd_msg_buffer11[128] = {0};
 8001884:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001888:	f5a3 63c2 	sub.w	r3, r3, #1552	@ 0x610
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	3304      	adds	r3, #4
 8001892:	227c      	movs	r2, #124	@ 0x7c
 8001894:	2100      	movs	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f005 fc38 	bl	800710c <memset>
  uint8_t txd_msg_buffer12[128] = {0};
 800189c:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 80018a0:	f5a3 63d2 	sub.w	r3, r3, #1680	@ 0x690
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	3304      	adds	r3, #4
 80018aa:	227c      	movs	r2, #124	@ 0x7c
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f005 fc2c 	bl	800710c <memset>
  uint8_t txd_msg_buffer13[128] = {0};
 80018b4:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 80018b8:	f5a3 63e2 	sub.w	r3, r3, #1808	@ 0x710
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	3304      	adds	r3, #4
 80018c2:	227c      	movs	r2, #124	@ 0x7c
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f005 fc20 	bl	800710c <memset>
  uint8_t txd_msg_buffer14[128] = {0};
 80018cc:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 80018d0:	f5a3 63f2 	sub.w	r3, r3, #1936	@ 0x790
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	3304      	adds	r3, #4
 80018da:	227c      	movs	r2, #124	@ 0x7c
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f005 fc14 	bl	800710c <memset>
  uint8_t txd_msg_buffer15[128] = {0};
 80018e4:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 80018e8:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	3304      	adds	r3, #4
 80018f2:	227c      	movs	r2, #124	@ 0x7c
 80018f4:	2100      	movs	r1, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f005 fc08 	bl	800710c <memset>
  uint8_t txd_msg_buffer16[128] = {0};
 80018fc:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001900:	f5a3 6309 	sub.w	r3, r3, #2192	@ 0x890
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	3304      	adds	r3, #4
 800190a:	227c      	movs	r2, #124	@ 0x7c
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f005 fbfc 	bl	800710c <memset>

  int zones[4] = {0};
 8001914:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001918:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 800191c:	461a      	mov	r2, r3
 800191e:	2300      	movs	r3, #0
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	6053      	str	r3, [r2, #4]
 8001924:	6093      	str	r3, [r2, #8]
 8001926:	60d3      	str	r3, [r2, #12]
  int a;
  int b;
  int servo;
  int time[9] = {0};
 8001928:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 800192c:	f6a3 03c4 	subw	r3, r3, #2244	@ 0x8c4
 8001930:	4618      	mov	r0, r3
 8001932:	2324      	movs	r3, #36	@ 0x24
 8001934:	461a      	mov	r2, r3
 8001936:	2100      	movs	r1, #0
 8001938:	f005 fbe8 	bl	800710c <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800193c:	f001 fee2 	bl	8003704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001940:	f001 f82c 	bl	800299c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001944:	f001 faa0 	bl	8002e88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001948:	f001 fa4a 	bl	8002de0 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800194c:	f001 fa72 	bl	8002e34 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001950:	f001 f884 	bl	8002a5c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001954:	f001 fa1a 	bl	8002d8c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001958:	f001 f948 	bl	8002bec <MX_TIM3_Init>
  MX_TIM2_Init();
 800195c:	f001 f8d0 	bl	8002b00 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001960:	f001 f9c6 	bl	8002cf0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // Servo Motor
  int TIM2_Ch1_DCVAL = 500;
 8001964:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001968:	f8c7 38c4 	str.w	r3, [r7, #2244]	@ 0x8c4
  int TIM2_CH1_STEP = 150;
 800196c:	2396      	movs	r3, #150	@ 0x96
 800196e:	f8c7 38c0 	str.w	r3, [r7, #2240]	@ 0x8c0

  HAL_TIM_Base_Init(&htim3);
 8001972:	48ad      	ldr	r0, [pc, #692]	@ (8001c28 <main+0x4b0>)
 8001974:	f003 fb14 	bl	8004fa0 <HAL_TIM_Base_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001978:	2100      	movs	r1, #0
 800197a:	48ab      	ldr	r0, [pc, #684]	@ (8001c28 <main+0x4b0>)
 800197c:	f003 fc76 	bl	800526c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001980:	2108      	movs	r1, #8
 8001982:	48a9      	ldr	r0, [pc, #676]	@ (8001c28 <main+0x4b0>)
 8001984:	f003 fc72 	bl	800526c <HAL_TIM_PWM_Start>

  // Servo Motor
  HAL_TIM_Base_Start(&htim2);
 8001988:	48a8      	ldr	r0, [pc, #672]	@ (8001c2c <main+0x4b4>)
 800198a:	f003 fb59 	bl	8005040 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800198e:	2100      	movs	r1, #0
 8001990:	48a6      	ldr	r0, [pc, #664]	@ (8001c2c <main+0x4b4>)
 8001992:	f003 fc6b 	bl	800526c <HAL_TIM_PWM_Start>
  TIM2->PSC = 16-1;
 8001996:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800199a:	220f      	movs	r2, #15
 800199c:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM2->ARR = 20000-1;
 800199e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019a2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80019a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM2->CCR1= TIM2_Ch1_DCVAL;
 80019a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019ac:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	@ 0x8c4
 80019b0:	6353      	str	r3, [r2, #52]	@ 0x34


  	// SET UP MODE
	sprintf((char*)txd_msg_buffer, "\r\n----------------SETUP MODE----------------");
 80019b2:	f607 0338 	addw	r3, r7, #2104	@ 0x838
 80019b6:	499e      	ldr	r1, [pc, #632]	@ (8001c30 <main+0x4b8>)
 80019b8:	4618      	mov	r0, r3
 80019ba:	f005 fb87 	bl	80070cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 80019be:	f607 0338 	addw	r3, r7, #2104	@ 0x838
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fc0c 	bl	80001e0 <strlen>
 80019c8:	4603      	mov	r3, r0
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	f607 0138 	addw	r1, r7, #2104	@ 0x838
 80019d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019d4:	4897      	ldr	r0, [pc, #604]	@ (8001c34 <main+0x4bc>)
 80019d6:	f004 fb4e 	bl	8006076 <HAL_UART_Transmit>

	sprintf((char*)txd_msg_buffer16, "\r\nCURRENT WALL CLOCK TIME (00-23): ");
 80019da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019de:	4996      	ldr	r1, [pc, #600]	@ (8001c38 <main+0x4c0>)
 80019e0:	4618      	mov	r0, r3
 80019e2:	f005 fb73 	bl	80070cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer16, strlen((char*)txd_msg_buffer16), 1000);
 80019e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fbf8 	bl	80001e0 <strlen>
 80019f0:	4603      	mov	r3, r0
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80019f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019fc:	488d      	ldr	r0, [pc, #564]	@ (8001c34 <main+0x4bc>)
 80019fe:	f004 fb3a 	bl	8006076 <HAL_UART_Transmit>
	rcv_intpt_flag = 00;
 8001a02:	4b8e      	ldr	r3, [pc, #568]	@ (8001c3c <main+0x4c4>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart6,&byte,1);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	498d      	ldr	r1, [pc, #564]	@ (8001c40 <main+0x4c8>)
 8001a0c:	4889      	ldr	r0, [pc, #548]	@ (8001c34 <main+0x4bc>)
 8001a0e:	f004 fbc4 	bl	800619a <HAL_UART_Receive_IT>
	while(rcv_intpt_flag == (00)) {}
 8001a12:	bf00      	nop
 8001a14:	4b89      	ldr	r3, [pc, #548]	@ (8001c3c <main+0x4c4>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0fb      	beq.n	8001a14 <main+0x29c>
	a = byte - 48;
 8001a1c:	4b88      	ldr	r3, [pc, #544]	@ (8001c40 <main+0x4c8>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	3b30      	subs	r3, #48	@ 0x30
 8001a22:	f8c7 38bc 	str.w	r3, [r7, #2236]	@ 0x8bc
	rcv_intpt_flag = 00;
 8001a26:	4b85      	ldr	r3, [pc, #532]	@ (8001c3c <main+0x4c4>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart6,&byte,1);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	4984      	ldr	r1, [pc, #528]	@ (8001c40 <main+0x4c8>)
 8001a30:	4880      	ldr	r0, [pc, #512]	@ (8001c34 <main+0x4bc>)
 8001a32:	f004 fbb2 	bl	800619a <HAL_UART_Receive_IT>
	while(rcv_intpt_flag == (00)) {}  // Take second number
 8001a36:	bf00      	nop
 8001a38:	4b80      	ldr	r3, [pc, #512]	@ (8001c3c <main+0x4c4>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0fb      	beq.n	8001a38 <main+0x2c0>
	b = byte - 48;
 8001a40:	4b7f      	ldr	r3, [pc, #508]	@ (8001c40 <main+0x4c8>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	3b30      	subs	r3, #48	@ 0x30
 8001a46:	f8c7 38b8 	str.w	r3, [r7, #2232]	@ 0x8b8
	time[0] = (10*a + b); // total scaled time in hours
 8001a4a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	@ 0x8bc
 8001a4e:	4613      	mov	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	461a      	mov	r2, r3
 8001a58:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	@ 0x8b8
 8001a5c:	441a      	add	r2, r3
 8001a5e:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001a62:	f6a3 03c4 	subw	r3, r3, #2244	@ 0x8c4
 8001a66:	601a      	str	r2, [r3, #0]


	// INLET
	sprintf((char*)txd_msg_buffer15, "\r\nFor Inlet INPUT PWM (in %%) 0) Manual 1) 60 2) 80 3) 99 : ");
 8001a68:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001a6c:	4975      	ldr	r1, [pc, #468]	@ (8001c44 <main+0x4cc>)
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f005 fb2c 	bl	80070cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer15, strlen((char*)txd_msg_buffer15), 1000);
 8001a74:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fbb1 	bl	80001e0 <strlen>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8001a86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a8a:	486a      	ldr	r0, [pc, #424]	@ (8001c34 <main+0x4bc>)
 8001a8c:	f004 faf3 	bl	8006076 <HAL_UART_Transmit>
	rcv_intpt_flag = 00;
 8001a90:	4b6a      	ldr	r3, [pc, #424]	@ (8001c3c <main+0x4c4>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart6,&byte,1);
 8001a96:	2201      	movs	r2, #1
 8001a98:	4969      	ldr	r1, [pc, #420]	@ (8001c40 <main+0x4c8>)
 8001a9a:	4866      	ldr	r0, [pc, #408]	@ (8001c34 <main+0x4bc>)
 8001a9c:	f004 fb7d 	bl	800619a <HAL_UART_Receive_IT>
	while(rcv_intpt_flag == (00)) {}
 8001aa0:	bf00      	nop
 8001aa2:	4b66      	ldr	r3, [pc, #408]	@ (8001c3c <main+0x4c4>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0fb      	beq.n	8001aa2 <main+0x32a>
	zones[1] = byte - 48;
 8001aaa:	4b65      	ldr	r3, [pc, #404]	@ (8001c40 <main+0x4c8>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001ab2:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001ab6:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8001aba:	605a      	str	r2, [r3, #4]

	switch(zones[1]){
 8001abc:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001ac0:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d014      	beq.n	8001af4 <main+0x37c>
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	dc19      	bgt.n	8001b02 <main+0x38a>
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d002      	beq.n	8001ad8 <main+0x360>
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d007      	beq.n	8001ae6 <main+0x36e>
 8001ad6:	e014      	b.n	8001b02 <main+0x38a>
		case 1:
			zones[1] = 60;
 8001ad8:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001adc:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8001ae0:	223c      	movs	r2, #60	@ 0x3c
 8001ae2:	605a      	str	r2, [r3, #4]
			break;
 8001ae4:	e00d      	b.n	8001b02 <main+0x38a>
		case 2:
			zones[1] = 80;
 8001ae6:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001aea:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8001aee:	2250      	movs	r2, #80	@ 0x50
 8001af0:	605a      	str	r2, [r3, #4]
			break;
 8001af2:	e006      	b.n	8001b02 <main+0x38a>
		case 3:
			zones[1] = 99;
 8001af4:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001af8:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8001afc:	2263      	movs	r2, #99	@ 0x63
 8001afe:	605a      	str	r2, [r3, #4]
			break;
 8001b00:	bf00      	nop
	}

	sprintf((char*)txd_msg_buffer2, "\r\nFor Zone 1 INPUT PWM (in %%) 0) Manual 1) 60 2) 80 3) 99 : ");
 8001b02:	f507 63e7 	add.w	r3, r7, #1848	@ 0x738
 8001b06:	4950      	ldr	r1, [pc, #320]	@ (8001c48 <main+0x4d0>)
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f005 fadf 	bl	80070cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer2, strlen((char*)txd_msg_buffer2), 1000);
 8001b0e:	f507 63e7 	add.w	r3, r7, #1848	@ 0x738
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fb64 	bl	80001e0 <strlen>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	f507 61e7 	add.w	r1, r7, #1848	@ 0x738
 8001b20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b24:	4843      	ldr	r0, [pc, #268]	@ (8001c34 <main+0x4bc>)
 8001b26:	f004 faa6 	bl	8006076 <HAL_UART_Transmit>
	rcv_intpt_flag = 00;
 8001b2a:	4b44      	ldr	r3, [pc, #272]	@ (8001c3c <main+0x4c4>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart6,&byte,1);
 8001b30:	2201      	movs	r2, #1
 8001b32:	4943      	ldr	r1, [pc, #268]	@ (8001c40 <main+0x4c8>)
 8001b34:	483f      	ldr	r0, [pc, #252]	@ (8001c34 <main+0x4bc>)
 8001b36:	f004 fb30 	bl	800619a <HAL_UART_Receive_IT>
	while(rcv_intpt_flag == (00)) {}
 8001b3a:	bf00      	nop
 8001b3c:	4b3f      	ldr	r3, [pc, #252]	@ (8001c3c <main+0x4c4>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0fb      	beq.n	8001b3c <main+0x3c4>
	zones[1] = byte - 48;
 8001b44:	4b3e      	ldr	r3, [pc, #248]	@ (8001c40 <main+0x4c8>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001b4c:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001b50:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8001b54:	605a      	str	r2, [r3, #4]

	switch(zones[1]){
 8001b56:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001b5a:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d014      	beq.n	8001b8e <main+0x416>
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	dc19      	bgt.n	8001b9c <main+0x424>
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d002      	beq.n	8001b72 <main+0x3fa>
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d007      	beq.n	8001b80 <main+0x408>
 8001b70:	e014      	b.n	8001b9c <main+0x424>
		case 1:
			zones[1] = 60;
 8001b72:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001b76:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8001b7a:	223c      	movs	r2, #60	@ 0x3c
 8001b7c:	605a      	str	r2, [r3, #4]
			break;
 8001b7e:	e00d      	b.n	8001b9c <main+0x424>
		case 2:
			zones[1] = 80;
 8001b80:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001b84:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8001b88:	2250      	movs	r2, #80	@ 0x50
 8001b8a:	605a      	str	r2, [r3, #4]
			break;
 8001b8c:	e006      	b.n	8001b9c <main+0x424>
		case 3:
			zones[1] = 99;
 8001b8e:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001b92:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8001b96:	2263      	movs	r2, #99	@ 0x63
 8001b98:	605a      	str	r2, [r3, #4]
			break;
 8001b9a:	bf00      	nop
	}

	sprintf((char*)txd_msg_buffer4, "\r\nFor Zone 2 INPUT PWM (in %%) 0) Manual 1) 60 2) 80 3) 99 : ");
 8001b9c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 8001ba0:	492a      	ldr	r1, [pc, #168]	@ (8001c4c <main+0x4d4>)
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f005 fa92 	bl	80070cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer4, strlen((char*)txd_msg_buffer4), 1000);
 8001ba8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fb17 	bl	80001e0 <strlen>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	f507 61c7 	add.w	r1, r7, #1592	@ 0x638
 8001bba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bbe:	481d      	ldr	r0, [pc, #116]	@ (8001c34 <main+0x4bc>)
 8001bc0:	f004 fa59 	bl	8006076 <HAL_UART_Transmit>
	rcv_intpt_flag = 00;
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c3c <main+0x4c4>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart6,&byte,1);
 8001bca:	2201      	movs	r2, #1
 8001bcc:	491c      	ldr	r1, [pc, #112]	@ (8001c40 <main+0x4c8>)
 8001bce:	4819      	ldr	r0, [pc, #100]	@ (8001c34 <main+0x4bc>)
 8001bd0:	f004 fae3 	bl	800619a <HAL_UART_Receive_IT>
	while(rcv_intpt_flag == (00)) {}
 8001bd4:	bf00      	nop
 8001bd6:	4b19      	ldr	r3, [pc, #100]	@ (8001c3c <main+0x4c4>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0fb      	beq.n	8001bd6 <main+0x45e>
	zones[2] = byte - 48;
 8001bde:	4b18      	ldr	r3, [pc, #96]	@ (8001c40 <main+0x4c8>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001be6:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001bea:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8001bee:	609a      	str	r2, [r3, #8]

	switch(zones[2]){
 8001bf0:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001bf4:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	d028      	beq.n	8001c50 <main+0x4d8>
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	dc2d      	bgt.n	8001c5e <main+0x4e6>
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d002      	beq.n	8001c0c <main+0x494>
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d007      	beq.n	8001c1a <main+0x4a2>
 8001c0a:	e028      	b.n	8001c5e <main+0x4e6>
		case 1:
			zones[2] = 60;
 8001c0c:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001c10:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8001c14:	223c      	movs	r2, #60	@ 0x3c
 8001c16:	609a      	str	r2, [r3, #8]
			break;
 8001c18:	e021      	b.n	8001c5e <main+0x4e6>
		case 2:
			zones[2] = 80;
 8001c1a:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001c1e:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8001c22:	2250      	movs	r2, #80	@ 0x50
 8001c24:	609a      	str	r2, [r3, #8]
			break;
 8001c26:	e01a      	b.n	8001c5e <main+0x4e6>
 8001c28:	20000118 	.word	0x20000118
 8001c2c:	200000d0 	.word	0x200000d0
 8001c30:	08007a58 	.word	0x08007a58
 8001c34:	20000230 	.word	0x20000230
 8001c38:	08007a88 	.word	0x08007a88
 8001c3c:	20000274 	.word	0x20000274
 8001c40:	20000084 	.word	0x20000084
 8001c44:	08007aac 	.word	0x08007aac
 8001c48:	08007aec 	.word	0x08007aec
 8001c4c:	08007b2c 	.word	0x08007b2c
		case 3:
			zones[2] = 99;
 8001c50:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001c54:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8001c58:	2263      	movs	r2, #99	@ 0x63
 8001c5a:	609a      	str	r2, [r3, #8]
			break;
 8001c5c:	bf00      	nop
	}

	sprintf((char*)txd_msg_buffer6, "\r\nFor Zone 3 INPUT PWM (in %%) 0) Manual 1) 60 2) 80 3) 99 : ");
 8001c5e:	f507 63a7 	add.w	r3, r7, #1336	@ 0x538
 8001c62:	4922      	ldr	r1, [pc, #136]	@ (8001cec <main+0x574>)
 8001c64:	4618      	mov	r0, r3
 8001c66:	f005 fa31 	bl	80070cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer6, strlen((char*)txd_msg_buffer6), 1000);
 8001c6a:	f507 63a7 	add.w	r3, r7, #1336	@ 0x538
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fab6 	bl	80001e0 <strlen>
 8001c74:	4603      	mov	r3, r0
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	f507 61a7 	add.w	r1, r7, #1336	@ 0x538
 8001c7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c80:	481b      	ldr	r0, [pc, #108]	@ (8001cf0 <main+0x578>)
 8001c82:	f004 f9f8 	bl	8006076 <HAL_UART_Transmit>
	rcv_intpt_flag = 00;
 8001c86:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf4 <main+0x57c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart6,&byte,1);
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	491a      	ldr	r1, [pc, #104]	@ (8001cf8 <main+0x580>)
 8001c90:	4817      	ldr	r0, [pc, #92]	@ (8001cf0 <main+0x578>)
 8001c92:	f004 fa82 	bl	800619a <HAL_UART_Receive_IT>
	while(rcv_intpt_flag == (00)) {}
 8001c96:	bf00      	nop
 8001c98:	4b16      	ldr	r3, [pc, #88]	@ (8001cf4 <main+0x57c>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0fb      	beq.n	8001c98 <main+0x520>
	zones[3] = byte - 48;
 8001ca0:	4b15      	ldr	r3, [pc, #84]	@ (8001cf8 <main+0x580>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001ca8:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001cac:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8001cb0:	60da      	str	r2, [r3, #12]

	switch(zones[3]){
 8001cb2:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001cb6:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d01d      	beq.n	8001cfc <main+0x584>
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	dc22      	bgt.n	8001d0a <main+0x592>
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d002      	beq.n	8001cce <main+0x556>
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d007      	beq.n	8001cdc <main+0x564>
 8001ccc:	e01d      	b.n	8001d0a <main+0x592>
		case 1:
			zones[3] = 60;
 8001cce:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001cd2:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8001cd6:	223c      	movs	r2, #60	@ 0x3c
 8001cd8:	60da      	str	r2, [r3, #12]
			break;
 8001cda:	e016      	b.n	8001d0a <main+0x592>
		case 2:
			zones[3] = 80;
 8001cdc:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001ce0:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8001ce4:	2250      	movs	r2, #80	@ 0x50
 8001ce6:	60da      	str	r2, [r3, #12]
			break;
 8001ce8:	e00f      	b.n	8001d0a <main+0x592>
 8001cea:	bf00      	nop
 8001cec:	08007b6c 	.word	0x08007b6c
 8001cf0:	20000230 	.word	0x20000230
 8001cf4:	20000274 	.word	0x20000274
 8001cf8:	20000084 	.word	0x20000084
		case 3:
			zones[3] = 99;
 8001cfc:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001d00:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8001d04:	2263      	movs	r2, #99	@ 0x63
 8001d06:	60da      	str	r2, [r3, #12]
			break;
 8001d08:	bf00      	nop
	}

	sprintf((char*)txd_msg_buffer1, "\r\nFor Inlet Enter START TIME (00-23): ");
 8001d0a:	f507 63f7 	add.w	r3, r7, #1976	@ 0x7b8
 8001d0e:	49c5      	ldr	r1, [pc, #788]	@ (8002024 <main+0x8ac>)
 8001d10:	4618      	mov	r0, r3
 8001d12:	f005 f9db 	bl	80070cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer1, strlen((char*)txd_msg_buffer1), 1000);
 8001d16:	f507 63f7 	add.w	r3, r7, #1976	@ 0x7b8
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fa60 	bl	80001e0 <strlen>
 8001d20:	4603      	mov	r3, r0
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	f507 61f7 	add.w	r1, r7, #1976	@ 0x7b8
 8001d28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d2c:	48be      	ldr	r0, [pc, #760]	@ (8002028 <main+0x8b0>)
 8001d2e:	f004 f9a2 	bl	8006076 <HAL_UART_Transmit>
	rcv_intpt_flag = 00;
 8001d32:	4bbe      	ldr	r3, [pc, #760]	@ (800202c <main+0x8b4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart6,&byte,1);
 8001d38:	2201      	movs	r2, #1
 8001d3a:	49bd      	ldr	r1, [pc, #756]	@ (8002030 <main+0x8b8>)
 8001d3c:	48ba      	ldr	r0, [pc, #744]	@ (8002028 <main+0x8b0>)
 8001d3e:	f004 fa2c 	bl	800619a <HAL_UART_Receive_IT>
	while(rcv_intpt_flag == (00)) {}  // Take first number
 8001d42:	bf00      	nop
 8001d44:	4bb9      	ldr	r3, [pc, #740]	@ (800202c <main+0x8b4>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0fb      	beq.n	8001d44 <main+0x5cc>
	a = byte - 48;
 8001d4c:	4bb8      	ldr	r3, [pc, #736]	@ (8002030 <main+0x8b8>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	3b30      	subs	r3, #48	@ 0x30
 8001d52:	f8c7 38bc 	str.w	r3, [r7, #2236]	@ 0x8bc
	rcv_intpt_flag = 00;
 8001d56:	4bb5      	ldr	r3, [pc, #724]	@ (800202c <main+0x8b4>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart6,&byte,1);
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	49b4      	ldr	r1, [pc, #720]	@ (8002030 <main+0x8b8>)
 8001d60:	48b1      	ldr	r0, [pc, #708]	@ (8002028 <main+0x8b0>)
 8001d62:	f004 fa1a 	bl	800619a <HAL_UART_Receive_IT>
	while(rcv_intpt_flag == (00)) {}  // Take second number
 8001d66:	bf00      	nop
 8001d68:	4bb0      	ldr	r3, [pc, #704]	@ (800202c <main+0x8b4>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0fb      	beq.n	8001d68 <main+0x5f0>
	b = byte - 48;
 8001d70:	4baf      	ldr	r3, [pc, #700]	@ (8002030 <main+0x8b8>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	3b30      	subs	r3, #48	@ 0x30
 8001d76:	f8c7 38b8 	str.w	r3, [r7, #2232]	@ 0x8b8
	time[1] = (10*a + b); // total scaled time in hours
 8001d7a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	@ 0x8bc
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	461a      	mov	r2, r3
 8001d88:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	@ 0x8b8
 8001d8c:	441a      	add	r2, r3
 8001d8e:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001d92:	f6a3 03c4 	subw	r3, r3, #2244	@ 0x8c4
 8001d96:	605a      	str	r2, [r3, #4]

	memset(txd_msg_buffer1, 0, sizeof(txd_msg_buffer1));  // Clear the buffer
 8001d98:	f507 63f7 	add.w	r3, r7, #1976	@ 0x7b8
 8001d9c:	2280      	movs	r2, #128	@ 0x80
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f005 f9b3 	bl	800710c <memset>
	sprintf((char*)txd_msg_buffer1, "\r\nFor Inlet Enter STOP TIME (00-23): ");
 8001da6:	f507 63f7 	add.w	r3, r7, #1976	@ 0x7b8
 8001daa:	49a2      	ldr	r1, [pc, #648]	@ (8002034 <main+0x8bc>)
 8001dac:	4618      	mov	r0, r3
 8001dae:	f005 f98d 	bl	80070cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer1, strlen((char*)txd_msg_buffer1), 1000);
 8001db2:	f507 63f7 	add.w	r3, r7, #1976	@ 0x7b8
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fa12 	bl	80001e0 <strlen>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	f507 61f7 	add.w	r1, r7, #1976	@ 0x7b8
 8001dc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc8:	4897      	ldr	r0, [pc, #604]	@ (8002028 <main+0x8b0>)
 8001dca:	f004 f954 	bl	8006076 <HAL_UART_Transmit>
	rcv_intpt_flag = 00;
 8001dce:	4b97      	ldr	r3, [pc, #604]	@ (800202c <main+0x8b4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart6,&byte,1);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	4996      	ldr	r1, [pc, #600]	@ (8002030 <main+0x8b8>)
 8001dd8:	4893      	ldr	r0, [pc, #588]	@ (8002028 <main+0x8b0>)
 8001dda:	f004 f9de 	bl	800619a <HAL_UART_Receive_IT>
	while(rcv_intpt_flag == (00)) {}  // Take first number
 8001dde:	bf00      	nop
 8001de0:	4b92      	ldr	r3, [pc, #584]	@ (800202c <main+0x8b4>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0fb      	beq.n	8001de0 <main+0x668>
	a = byte - 48;
 8001de8:	4b91      	ldr	r3, [pc, #580]	@ (8002030 <main+0x8b8>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	3b30      	subs	r3, #48	@ 0x30
 8001dee:	f8c7 38bc 	str.w	r3, [r7, #2236]	@ 0x8bc
	rcv_intpt_flag = 00;
 8001df2:	4b8e      	ldr	r3, [pc, #568]	@ (800202c <main+0x8b4>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart6,&byte,1);
 8001df8:	2201      	movs	r2, #1
 8001dfa:	498d      	ldr	r1, [pc, #564]	@ (8002030 <main+0x8b8>)
 8001dfc:	488a      	ldr	r0, [pc, #552]	@ (8002028 <main+0x8b0>)
 8001dfe:	f004 f9cc 	bl	800619a <HAL_UART_Receive_IT>
	while(rcv_intpt_flag == (00)) {}  // Take second number
 8001e02:	bf00      	nop
 8001e04:	4b89      	ldr	r3, [pc, #548]	@ (800202c <main+0x8b4>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0fb      	beq.n	8001e04 <main+0x68c>
	b = byte - 48;
 8001e0c:	4b88      	ldr	r3, [pc, #544]	@ (8002030 <main+0x8b8>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	3b30      	subs	r3, #48	@ 0x30
 8001e12:	f8c7 38b8 	str.w	r3, [r7, #2232]	@ 0x8b8
	time[2] = (10*a + b); // total scaled time in hours
 8001e16:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	@ 0x8bc
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	461a      	mov	r2, r3
 8001e24:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	@ 0x8b8
 8001e28:	441a      	add	r2, r3
 8001e2a:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001e2e:	f6a3 03c4 	subw	r3, r3, #2244	@ 0x8c4
 8001e32:	609a      	str	r2, [r3, #8]


	// ZONE 1

	sprintf((char*)txd_msg_buffer3, "\r\nFor Zone 1 Enter START TIME (00-23): ");
 8001e34:	f507 63d7 	add.w	r3, r7, #1720	@ 0x6b8
 8001e38:	497f      	ldr	r1, [pc, #508]	@ (8002038 <main+0x8c0>)
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f005 f946 	bl	80070cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer3, strlen((char*)txd_msg_buffer3), 1000);
 8001e40:	f507 63d7 	add.w	r3, r7, #1720	@ 0x6b8
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe f9cb 	bl	80001e0 <strlen>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	f507 61d7 	add.w	r1, r7, #1720	@ 0x6b8
 8001e52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e56:	4874      	ldr	r0, [pc, #464]	@ (8002028 <main+0x8b0>)
 8001e58:	f004 f90d 	bl	8006076 <HAL_UART_Transmit>
	rcv_intpt_flag = 00;
 8001e5c:	4b73      	ldr	r3, [pc, #460]	@ (800202c <main+0x8b4>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart6,&byte,1);
 8001e62:	2201      	movs	r2, #1
 8001e64:	4972      	ldr	r1, [pc, #456]	@ (8002030 <main+0x8b8>)
 8001e66:	4870      	ldr	r0, [pc, #448]	@ (8002028 <main+0x8b0>)
 8001e68:	f004 f997 	bl	800619a <HAL_UART_Receive_IT>
	while(rcv_intpt_flag == (00)) {}  // Take first number
 8001e6c:	bf00      	nop
 8001e6e:	4b6f      	ldr	r3, [pc, #444]	@ (800202c <main+0x8b4>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0fb      	beq.n	8001e6e <main+0x6f6>
	a = byte - 48;
 8001e76:	4b6e      	ldr	r3, [pc, #440]	@ (8002030 <main+0x8b8>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	3b30      	subs	r3, #48	@ 0x30
 8001e7c:	f8c7 38bc 	str.w	r3, [r7, #2236]	@ 0x8bc
	rcv_intpt_flag = 00;
 8001e80:	4b6a      	ldr	r3, [pc, #424]	@ (800202c <main+0x8b4>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart6,&byte,1);
 8001e86:	2201      	movs	r2, #1
 8001e88:	4969      	ldr	r1, [pc, #420]	@ (8002030 <main+0x8b8>)
 8001e8a:	4867      	ldr	r0, [pc, #412]	@ (8002028 <main+0x8b0>)
 8001e8c:	f004 f985 	bl	800619a <HAL_UART_Receive_IT>
	while(rcv_intpt_flag == (00)) {}  // Take second number
 8001e90:	bf00      	nop
 8001e92:	4b66      	ldr	r3, [pc, #408]	@ (800202c <main+0x8b4>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0fb      	beq.n	8001e92 <main+0x71a>
	b = byte - 48;
 8001e9a:	4b65      	ldr	r3, [pc, #404]	@ (8002030 <main+0x8b8>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	3b30      	subs	r3, #48	@ 0x30
 8001ea0:	f8c7 38b8 	str.w	r3, [r7, #2232]	@ 0x8b8
	time[3] = (10*a + b); // total scaled time in hours
 8001ea4:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	@ 0x8bc
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	@ 0x8b8
 8001eb6:	441a      	add	r2, r3
 8001eb8:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001ebc:	f6a3 03c4 	subw	r3, r3, #2244	@ 0x8c4
 8001ec0:	60da      	str	r2, [r3, #12]

	memset(txd_msg_buffer3, 0, sizeof(txd_msg_buffer1));  // Clear the buffer
 8001ec2:	f507 63d7 	add.w	r3, r7, #1720	@ 0x6b8
 8001ec6:	2280      	movs	r2, #128	@ 0x80
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f005 f91e 	bl	800710c <memset>

	sprintf((char*)txd_msg_buffer3, "\r\nFor Zone 1 Enter STOP TIME (00-23): ");
 8001ed0:	f507 63d7 	add.w	r3, r7, #1720	@ 0x6b8
 8001ed4:	4959      	ldr	r1, [pc, #356]	@ (800203c <main+0x8c4>)
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f005 f8f8 	bl	80070cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer3, strlen((char*)txd_msg_buffer3), 1000);
 8001edc:	f507 63d7 	add.w	r3, r7, #1720	@ 0x6b8
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe f97d 	bl	80001e0 <strlen>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	f507 61d7 	add.w	r1, r7, #1720	@ 0x6b8
 8001eee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ef2:	484d      	ldr	r0, [pc, #308]	@ (8002028 <main+0x8b0>)
 8001ef4:	f004 f8bf 	bl	8006076 <HAL_UART_Transmit>
	rcv_intpt_flag = 00;
 8001ef8:	4b4c      	ldr	r3, [pc, #304]	@ (800202c <main+0x8b4>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart6,&byte,1);
 8001efe:	2201      	movs	r2, #1
 8001f00:	494b      	ldr	r1, [pc, #300]	@ (8002030 <main+0x8b8>)
 8001f02:	4849      	ldr	r0, [pc, #292]	@ (8002028 <main+0x8b0>)
 8001f04:	f004 f949 	bl	800619a <HAL_UART_Receive_IT>
	while(rcv_intpt_flag == (00)) {}  // Take first number
 8001f08:	bf00      	nop
 8001f0a:	4b48      	ldr	r3, [pc, #288]	@ (800202c <main+0x8b4>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0fb      	beq.n	8001f0a <main+0x792>
	a = byte - 48;
 8001f12:	4b47      	ldr	r3, [pc, #284]	@ (8002030 <main+0x8b8>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	3b30      	subs	r3, #48	@ 0x30
 8001f18:	f8c7 38bc 	str.w	r3, [r7, #2236]	@ 0x8bc
	rcv_intpt_flag = 00;
 8001f1c:	4b43      	ldr	r3, [pc, #268]	@ (800202c <main+0x8b4>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart6,&byte,1);
 8001f22:	2201      	movs	r2, #1
 8001f24:	4942      	ldr	r1, [pc, #264]	@ (8002030 <main+0x8b8>)
 8001f26:	4840      	ldr	r0, [pc, #256]	@ (8002028 <main+0x8b0>)
 8001f28:	f004 f937 	bl	800619a <HAL_UART_Receive_IT>
	while(rcv_intpt_flag == (00)) {}  // Take second number
 8001f2c:	bf00      	nop
 8001f2e:	4b3f      	ldr	r3, [pc, #252]	@ (800202c <main+0x8b4>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0fb      	beq.n	8001f2e <main+0x7b6>
	b = byte - 48;
 8001f36:	4b3e      	ldr	r3, [pc, #248]	@ (8002030 <main+0x8b8>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	3b30      	subs	r3, #48	@ 0x30
 8001f3c:	f8c7 38b8 	str.w	r3, [r7, #2232]	@ 0x8b8
	time[4] = (10*a + b); // total scaled time in hours
 8001f40:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	@ 0x8bc
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	@ 0x8b8
 8001f52:	441a      	add	r2, r3
 8001f54:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001f58:	f6a3 03c4 	subw	r3, r3, #2244	@ 0x8c4
 8001f5c:	611a      	str	r2, [r3, #16]


	// ZONE 2


	sprintf((char*)txd_msg_buffer5, "\r\nFor Zone 2 Enter START TIME (00-23): ");
 8001f5e:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 8001f62:	4937      	ldr	r1, [pc, #220]	@ (8002040 <main+0x8c8>)
 8001f64:	4618      	mov	r0, r3
 8001f66:	f005 f8b1 	bl	80070cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer5, strlen((char*)txd_msg_buffer5), 1000);
 8001f6a:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe f936 	bl	80001e0 <strlen>
 8001f74:	4603      	mov	r3, r0
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 8001f7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f80:	4829      	ldr	r0, [pc, #164]	@ (8002028 <main+0x8b0>)
 8001f82:	f004 f878 	bl	8006076 <HAL_UART_Transmit>
	rcv_intpt_flag = 00;
 8001f86:	4b29      	ldr	r3, [pc, #164]	@ (800202c <main+0x8b4>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart6,&byte,1);
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	4928      	ldr	r1, [pc, #160]	@ (8002030 <main+0x8b8>)
 8001f90:	4825      	ldr	r0, [pc, #148]	@ (8002028 <main+0x8b0>)
 8001f92:	f004 f902 	bl	800619a <HAL_UART_Receive_IT>
	while(rcv_intpt_flag == (00)) {}  // Take first number
 8001f96:	bf00      	nop
 8001f98:	4b24      	ldr	r3, [pc, #144]	@ (800202c <main+0x8b4>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0fb      	beq.n	8001f98 <main+0x820>
	a = byte - 48;
 8001fa0:	4b23      	ldr	r3, [pc, #140]	@ (8002030 <main+0x8b8>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	3b30      	subs	r3, #48	@ 0x30
 8001fa6:	f8c7 38bc 	str.w	r3, [r7, #2236]	@ 0x8bc
	rcv_intpt_flag = 00;
 8001faa:	4b20      	ldr	r3, [pc, #128]	@ (800202c <main+0x8b4>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart6,&byte,1);
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	491f      	ldr	r1, [pc, #124]	@ (8002030 <main+0x8b8>)
 8001fb4:	481c      	ldr	r0, [pc, #112]	@ (8002028 <main+0x8b0>)
 8001fb6:	f004 f8f0 	bl	800619a <HAL_UART_Receive_IT>
	while(rcv_intpt_flag == (00)) {}  // Take second number
 8001fba:	bf00      	nop
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800202c <main+0x8b4>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0fb      	beq.n	8001fbc <main+0x844>
	b = byte - 48;
 8001fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002030 <main+0x8b8>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	3b30      	subs	r3, #48	@ 0x30
 8001fca:	f8c7 38b8 	str.w	r3, [r7, #2232]	@ 0x8b8
	time[5] = (10*a + b); // total scaled time in hours
 8001fce:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	@ 0x8bc
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	@ 0x8b8
 8001fe0:	441a      	add	r2, r3
 8001fe2:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8001fe6:	f6a3 03c4 	subw	r3, r3, #2244	@ 0x8c4
 8001fea:	615a      	str	r2, [r3, #20]

	memset(txd_msg_buffer5, 0, sizeof(txd_msg_buffer1));  // Clear the buffer
 8001fec:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 8001ff0:	2280      	movs	r2, #128	@ 0x80
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f005 f889 	bl	800710c <memset>

	sprintf((char*)txd_msg_buffer5, "\r\nFor Zone 2 Enter STOP TIME (00-23): ");
 8001ffa:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 8001ffe:	4911      	ldr	r1, [pc, #68]	@ (8002044 <main+0x8cc>)
 8002000:	4618      	mov	r0, r3
 8002002:	f005 f863 	bl	80070cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer5, strlen((char*)txd_msg_buffer5), 1000);
 8002006:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe f8e8 	bl	80001e0 <strlen>
 8002010:	4603      	mov	r3, r0
 8002012:	b29a      	uxth	r2, r3
 8002014:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 8002018:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800201c:	4802      	ldr	r0, [pc, #8]	@ (8002028 <main+0x8b0>)
 800201e:	f004 f82a 	bl	8006076 <HAL_UART_Transmit>
 8002022:	e011      	b.n	8002048 <main+0x8d0>
 8002024:	08007bac 	.word	0x08007bac
 8002028:	20000230 	.word	0x20000230
 800202c:	20000274 	.word	0x20000274
 8002030:	20000084 	.word	0x20000084
 8002034:	08007bd4 	.word	0x08007bd4
 8002038:	08007bfc 	.word	0x08007bfc
 800203c:	08007c24 	.word	0x08007c24
 8002040:	08007c4c 	.word	0x08007c4c
 8002044:	08007c74 	.word	0x08007c74
	rcv_intpt_flag = 00;
 8002048:	4bc6      	ldr	r3, [pc, #792]	@ (8002364 <main+0xbec>)
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart6,&byte,1);
 800204e:	2201      	movs	r2, #1
 8002050:	49c5      	ldr	r1, [pc, #788]	@ (8002368 <main+0xbf0>)
 8002052:	48c6      	ldr	r0, [pc, #792]	@ (800236c <main+0xbf4>)
 8002054:	f004 f8a1 	bl	800619a <HAL_UART_Receive_IT>
	while(rcv_intpt_flag == (00)) {}  // Take first number
 8002058:	bf00      	nop
 800205a:	4bc2      	ldr	r3, [pc, #776]	@ (8002364 <main+0xbec>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0fb      	beq.n	800205a <main+0x8e2>
	a = byte - 48;
 8002062:	4bc1      	ldr	r3, [pc, #772]	@ (8002368 <main+0xbf0>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	3b30      	subs	r3, #48	@ 0x30
 8002068:	f8c7 38bc 	str.w	r3, [r7, #2236]	@ 0x8bc
	rcv_intpt_flag = 00;
 800206c:	4bbd      	ldr	r3, [pc, #756]	@ (8002364 <main+0xbec>)
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart6,&byte,1);
 8002072:	2201      	movs	r2, #1
 8002074:	49bc      	ldr	r1, [pc, #752]	@ (8002368 <main+0xbf0>)
 8002076:	48bd      	ldr	r0, [pc, #756]	@ (800236c <main+0xbf4>)
 8002078:	f004 f88f 	bl	800619a <HAL_UART_Receive_IT>
	while(rcv_intpt_flag == (00)) {}  // Take second number
 800207c:	bf00      	nop
 800207e:	4bb9      	ldr	r3, [pc, #740]	@ (8002364 <main+0xbec>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0fb      	beq.n	800207e <main+0x906>
	b = byte - 48;
 8002086:	4bb8      	ldr	r3, [pc, #736]	@ (8002368 <main+0xbf0>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	3b30      	subs	r3, #48	@ 0x30
 800208c:	f8c7 38b8 	str.w	r3, [r7, #2232]	@ 0x8b8
	time[6] = (10*a + b); // total scaled time in hours
 8002090:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	@ 0x8bc
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	461a      	mov	r2, r3
 800209e:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	@ 0x8b8
 80020a2:	441a      	add	r2, r3
 80020a4:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 80020a8:	f6a3 03c4 	subw	r3, r3, #2244	@ 0x8c4
 80020ac:	619a      	str	r2, [r3, #24]


	// ZONE 3


	sprintf((char*)txd_msg_buffer7, "\r\nFor Zone 3 Enter START TIME (00-23): ");
 80020ae:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 80020b2:	49af      	ldr	r1, [pc, #700]	@ (8002370 <main+0xbf8>)
 80020b4:	4618      	mov	r0, r3
 80020b6:	f005 f809 	bl	80070cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer7, strlen((char*)txd_msg_buffer7), 1000);
 80020ba:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe f88e 	bl	80001e0 <strlen>
 80020c4:	4603      	mov	r3, r0
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	f507 6197 	add.w	r1, r7, #1208	@ 0x4b8
 80020cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020d0:	48a6      	ldr	r0, [pc, #664]	@ (800236c <main+0xbf4>)
 80020d2:	f003 ffd0 	bl	8006076 <HAL_UART_Transmit>
	rcv_intpt_flag = 00;
 80020d6:	4ba3      	ldr	r3, [pc, #652]	@ (8002364 <main+0xbec>)
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart6,&byte,1);
 80020dc:	2201      	movs	r2, #1
 80020de:	49a2      	ldr	r1, [pc, #648]	@ (8002368 <main+0xbf0>)
 80020e0:	48a2      	ldr	r0, [pc, #648]	@ (800236c <main+0xbf4>)
 80020e2:	f004 f85a 	bl	800619a <HAL_UART_Receive_IT>
	while(rcv_intpt_flag == (00)) {}  // Take first number
 80020e6:	bf00      	nop
 80020e8:	4b9e      	ldr	r3, [pc, #632]	@ (8002364 <main+0xbec>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0fb      	beq.n	80020e8 <main+0x970>
	a = byte - 48;
 80020f0:	4b9d      	ldr	r3, [pc, #628]	@ (8002368 <main+0xbf0>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	3b30      	subs	r3, #48	@ 0x30
 80020f6:	f8c7 38bc 	str.w	r3, [r7, #2236]	@ 0x8bc
	rcv_intpt_flag = 00;
 80020fa:	4b9a      	ldr	r3, [pc, #616]	@ (8002364 <main+0xbec>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart6,&byte,1);
 8002100:	2201      	movs	r2, #1
 8002102:	4999      	ldr	r1, [pc, #612]	@ (8002368 <main+0xbf0>)
 8002104:	4899      	ldr	r0, [pc, #612]	@ (800236c <main+0xbf4>)
 8002106:	f004 f848 	bl	800619a <HAL_UART_Receive_IT>
	while(rcv_intpt_flag == (00)) {}  // Take second number
 800210a:	bf00      	nop
 800210c:	4b95      	ldr	r3, [pc, #596]	@ (8002364 <main+0xbec>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0fb      	beq.n	800210c <main+0x994>
	b = byte - 48;
 8002114:	4b94      	ldr	r3, [pc, #592]	@ (8002368 <main+0xbf0>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	3b30      	subs	r3, #48	@ 0x30
 800211a:	f8c7 38b8 	str.w	r3, [r7, #2232]	@ 0x8b8
	time[7] = (10*a + b); // total scaled time in hours
 800211e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	@ 0x8bc
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	461a      	mov	r2, r3
 800212c:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	@ 0x8b8
 8002130:	441a      	add	r2, r3
 8002132:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8002136:	f6a3 03c4 	subw	r3, r3, #2244	@ 0x8c4
 800213a:	61da      	str	r2, [r3, #28]

	memset(txd_msg_buffer7, 0, sizeof(txd_msg_buffer1));  // Clear the buffer
 800213c:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8002140:	2280      	movs	r2, #128	@ 0x80
 8002142:	2100      	movs	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f004 ffe1 	bl	800710c <memset>

	sprintf((char*)txd_msg_buffer7, "\r\nFor Zone 3 Enter STOP TIME (00-23): ");
 800214a:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 800214e:	4989      	ldr	r1, [pc, #548]	@ (8002374 <main+0xbfc>)
 8002150:	4618      	mov	r0, r3
 8002152:	f004 ffbb 	bl	80070cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer7, strlen((char*)txd_msg_buffer7), 1000);
 8002156:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe f840 	bl	80001e0 <strlen>
 8002160:	4603      	mov	r3, r0
 8002162:	b29a      	uxth	r2, r3
 8002164:	f507 6197 	add.w	r1, r7, #1208	@ 0x4b8
 8002168:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800216c:	487f      	ldr	r0, [pc, #508]	@ (800236c <main+0xbf4>)
 800216e:	f003 ff82 	bl	8006076 <HAL_UART_Transmit>
	rcv_intpt_flag = 00;
 8002172:	4b7c      	ldr	r3, [pc, #496]	@ (8002364 <main+0xbec>)
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart6,&byte,1);
 8002178:	2201      	movs	r2, #1
 800217a:	497b      	ldr	r1, [pc, #492]	@ (8002368 <main+0xbf0>)
 800217c:	487b      	ldr	r0, [pc, #492]	@ (800236c <main+0xbf4>)
 800217e:	f004 f80c 	bl	800619a <HAL_UART_Receive_IT>
	while(rcv_intpt_flag == (00)) {}  // Take first number
 8002182:	bf00      	nop
 8002184:	4b77      	ldr	r3, [pc, #476]	@ (8002364 <main+0xbec>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0fb      	beq.n	8002184 <main+0xa0c>
	a = byte - 48;
 800218c:	4b76      	ldr	r3, [pc, #472]	@ (8002368 <main+0xbf0>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	3b30      	subs	r3, #48	@ 0x30
 8002192:	f8c7 38bc 	str.w	r3, [r7, #2236]	@ 0x8bc
	rcv_intpt_flag = 00;
 8002196:	4b73      	ldr	r3, [pc, #460]	@ (8002364 <main+0xbec>)
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart6,&byte,1);
 800219c:	2201      	movs	r2, #1
 800219e:	4972      	ldr	r1, [pc, #456]	@ (8002368 <main+0xbf0>)
 80021a0:	4872      	ldr	r0, [pc, #456]	@ (800236c <main+0xbf4>)
 80021a2:	f003 fffa 	bl	800619a <HAL_UART_Receive_IT>
	while(rcv_intpt_flag == (00)) {}  // Take second number
 80021a6:	bf00      	nop
 80021a8:	4b6e      	ldr	r3, [pc, #440]	@ (8002364 <main+0xbec>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0fb      	beq.n	80021a8 <main+0xa30>
	b = byte - 48;
 80021b0:	4b6d      	ldr	r3, [pc, #436]	@ (8002368 <main+0xbf0>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	3b30      	subs	r3, #48	@ 0x30
 80021b6:	f8c7 38b8 	str.w	r3, [r7, #2232]	@ 0x8b8
	time[8] = (10*a + b); // total scaled time in hours
 80021ba:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	@ 0x8bc
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	461a      	mov	r2, r3
 80021c8:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	@ 0x8b8
 80021cc:	441a      	add	r2, r3
 80021ce:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 80021d2:	f6a3 03c4 	subw	r3, r3, #2244	@ 0x8c4
 80021d6:	621a      	str	r2, [r3, #32]

	memset(txd_msg_buffer7, 0, sizeof(txd_msg_buffer1));  // Clear the buffer
 80021d8:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 80021dc:	2280      	movs	r2, #128	@ 0x80
 80021de:	2100      	movs	r1, #0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f004 ff93 	bl	800710c <memset>

	sprintf((char*)txd_msg_buffer7, "\r\nAwaiting User Input \n ");
 80021e6:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 80021ea:	4963      	ldr	r1, [pc, #396]	@ (8002378 <main+0xc00>)
 80021ec:	4618      	mov	r0, r3
 80021ee:	f004 ff6d 	bl	80070cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer7, strlen((char*)txd_msg_buffer7), 1000);
 80021f2:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fd fff2 	bl	80001e0 <strlen>
 80021fc:	4603      	mov	r3, r0
 80021fe:	b29a      	uxth	r2, r3
 8002200:	f507 6197 	add.w	r1, r7, #1208	@ 0x4b8
 8002204:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002208:	4858      	ldr	r0, [pc, #352]	@ (800236c <main+0xbf4>)
 800220a:	f003 ff34 	bl	8006076 <HAL_UART_Transmit>

	while (1) {
		HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET); // Turn on LD2 LED
 800220e:	2201      	movs	r2, #1
 8002210:	2120      	movs	r1, #32
 8002212:	485a      	ldr	r0, [pc, #360]	@ (800237c <main+0xc04>)
 8002214:	f002 f9fa 	bl	800460c <HAL_GPIO_WritePin>
		HAL_Delay(50); // Delay for 50 ms
 8002218:	2032      	movs	r0, #50	@ 0x32
 800221a:	f001 fae5 	bl	80037e8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET); // Turn off LD2 LED
 800221e:	2200      	movs	r2, #0
 8002220:	2120      	movs	r1, #32
 8002222:	4856      	ldr	r0, [pc, #344]	@ (800237c <main+0xc04>)
 8002224:	f002 f9f2 	bl	800460c <HAL_GPIO_WritePin>

		if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 8002228:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800222c:	4854      	ldr	r0, [pc, #336]	@ (8002380 <main+0xc08>)
 800222e:	f002 f9d5 	bl	80045dc <HAL_GPIO_ReadPin>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <main+0xac8>
			// B1 pin is low (assuming active low configuration)
			break;
		}
		// Add a small delay before checking the B1 pin again
		HAL_Delay(50);
 8002238:	2032      	movs	r0, #50	@ 0x32
 800223a:	f001 fad5 	bl	80037e8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET); // Turn on LD2 LED
 800223e:	e7e6      	b.n	800220e <main+0xa96>
			break;
 8002240:	bf00      	nop
	}
	clock_hours = time[0];
 8002242:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8002246:	f6a3 03c4 	subw	r3, r3, #2244	@ 0x8c4
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a4d      	ldr	r2, [pc, #308]	@ (8002384 <main+0xc0c>)
 800224e:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  TIM3->CCR3 = 0;
 8002250:	4b4d      	ldr	r3, [pc, #308]	@ (8002388 <main+0xc10>)
 8002252:	2200      	movs	r2, #0
 8002254:	63da      	str	r2, [r3, #60]	@ 0x3c

	  // Set timer board to 0
	  DIGIT_A_Display(0);
 8002256:	2000      	movs	r0, #0
 8002258:	f7fe fd88 	bl	8000d6c <DIGIT_A_Display>
	  DIGIT_B_Display(0);
 800225c:	2000      	movs	r0, #0
 800225e:	f7fe feab 	bl	8000fb8 <DIGIT_B_Display>

	  // Turn off all led lights
	  HAL_GPIO_WritePin(GPIOA, RFD_Pin, GPIO_PIN_RESET);
 8002262:	2200      	movs	r2, #0
 8002264:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002268:	4844      	ldr	r0, [pc, #272]	@ (800237c <main+0xc04>)
 800226a:	f002 f9cf 	bl	800460c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_RESET);
 800226e:	2200      	movs	r2, #0
 8002270:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002274:	4841      	ldr	r0, [pc, #260]	@ (800237c <main+0xc04>)
 8002276:	f002 f9c9 	bl	800460c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_RESET);
 800227a:	2200      	movs	r2, #0
 800227c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002280:	483e      	ldr	r0, [pc, #248]	@ (800237c <main+0xc04>)
 8002282:	f002 f9c3 	bl	800460c <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 8002286:	2201      	movs	r2, #1
 8002288:	2120      	movs	r1, #32
 800228a:	483c      	ldr	r0, [pc, #240]	@ (800237c <main+0xc04>)
 800228c:	f002 f9be 	bl	800460c <HAL_GPIO_WritePin>


	  // RUN MODE
	  sprintf((char*)txd_msg_buffer8, "\r\n----------------RUN MODE----------------");
 8002290:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002294:	493d      	ldr	r1, [pc, #244]	@ (800238c <main+0xc14>)
 8002296:	4618      	mov	r0, r3
 8002298:	f004 ff18 	bl	80070cc <siprintf>
	  HAL_UART_Transmit(&huart6, txd_msg_buffer8, strlen((char*)txd_msg_buffer8), 1000);
 800229c:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fd ff9d 	bl	80001e0 <strlen>
 80022a6:	4603      	mov	r3, r0
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	f507 6187 	add.w	r1, r7, #1080	@ 0x438
 80022ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022b2:	482e      	ldr	r0, [pc, #184]	@ (800236c <main+0xbf4>)
 80022b4:	f003 fedf 	bl	8006076 <HAL_UART_Transmit>

	  // start timer
	  HAL_TIM_Base_Init(&htim5);
 80022b8:	4835      	ldr	r0, [pc, #212]	@ (8002390 <main+0xc18>)
 80022ba:	f002 fe71 	bl	8004fa0 <HAL_TIM_Base_Init>
	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80022be:	2100      	movs	r1, #0
 80022c0:	4833      	ldr	r0, [pc, #204]	@ (8002390 <main+0xc18>)
 80022c2:	f002 ffd3 	bl	800526c <HAL_TIM_PWM_Start>
	  HAL_TIM_Base_Start_IT(&htim5);
 80022c6:	4832      	ldr	r0, [pc, #200]	@ (8002390 <main+0xc18>)
 80022c8:	f002 ff14 	bl	80050f4 <HAL_TIM_Base_Start_IT>


	  // To deal with first distance being 0

	  if (distance == 0) {
 80022cc:	4b31      	ldr	r3, [pc, #196]	@ (8002394 <main+0xc1c>)
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f040 833d 	bne.w	8002950 <main+0x11d8>
	  distance_sensor();
 80022d6:	f7ff f8d5 	bl	8001484 <distance_sensor>
		memset(txd_msg_buffer10, 0, sizeof(txd_msg_buffer10));  // Clear the buffer
 80022da:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80022de:	2280      	movs	r2, #128	@ 0x80
 80022e0:	2100      	movs	r1, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f004 ff12 	bl	800710c <memset>


	  sprintf((char*)txd_msg_buffer10, "\r\nTIME: %d INLET MODE -- PWM: %d -- RPM: %d DEPTH: %d", clock_hours,  zones[0], (int) rpm, distance);
 80022e8:	4b26      	ldr	r3, [pc, #152]	@ (8002384 <main+0xc0c>)
 80022ea:	681c      	ldr	r4, [r3, #0]
 80022ec:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 80022f0:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 80022f4:	681d      	ldr	r5, [r3, #0]
 80022f6:	4b28      	ldr	r3, [pc, #160]	@ (8002398 <main+0xc20>)
 80022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fc:	4610      	mov	r0, r2
 80022fe:	4619      	mov	r1, r3
 8002300:	f7fe fb94 	bl	8000a2c <__aeabi_d2iz>
 8002304:	4603      	mov	r3, r0
 8002306:	4a23      	ldr	r2, [pc, #140]	@ (8002394 <main+0xc1c>)
 8002308:	8812      	ldrh	r2, [r2, #0]
 800230a:	f507 704e 	add.w	r0, r7, #824	@ 0x338
 800230e:	9201      	str	r2, [sp, #4]
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	462b      	mov	r3, r5
 8002314:	4622      	mov	r2, r4
 8002316:	4921      	ldr	r1, [pc, #132]	@ (800239c <main+0xc24>)
 8002318:	f004 fed8 	bl	80070cc <siprintf>
	  	HAL_UART_Transmit(&huart6, txd_msg_buffer10, strlen((char*)txd_msg_buffer10), 1000);
 800231c:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8002320:	4618      	mov	r0, r3
 8002322:	f7fd ff5d 	bl	80001e0 <strlen>
 8002326:	4603      	mov	r3, r0
 8002328:	b29a      	uxth	r2, r3
 800232a:	f507 714e 	add.w	r1, r7, #824	@ 0x338
 800232e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002332:	480e      	ldr	r0, [pc, #56]	@ (800236c <main+0xbf4>)
 8002334:	f003 fe9f 	bl	8006076 <HAL_UART_Transmit>
	  }


	  // ZONES

	  while (distance <= 650 && distance != 0)
 8002338:	e30a      	b.n	8002950 <main+0x11d8>
	  {
		  isFull = 0;
 800233a:	4b19      	ldr	r3, [pc, #100]	@ (80023a0 <main+0xc28>)
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
		  //sec = 0;
		  // Set color to purple
		  HAL_GPIO_WritePin(GPIOA, RFD_Pin, GPIO_PIN_SET);
 8002340:	2201      	movs	r2, #1
 8002342:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002346:	480d      	ldr	r0, [pc, #52]	@ (800237c <main+0xc04>)
 8002348:	f002 f960 	bl	800460c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_SET);
 800234c:	2201      	movs	r2, #1
 800234e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002352:	480a      	ldr	r0, [pc, #40]	@ (800237c <main+0xc04>)
 8002354:	f002 f95a 	bl	800460c <HAL_GPIO_WritePin>

		  // Servo rotate
		  TIM2->CCR1 = 2000;
 8002358:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800235c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002360:	635a      	str	r2, [r3, #52]	@ 0x34

		  // dc motor runs for user specified time
		  while ((clock_hours >= time[1] && clock_hours <= time[2]) || isFull == 0)
 8002362:	e087      	b.n	8002474 <main+0xcfc>
 8002364:	20000274 	.word	0x20000274
 8002368:	20000084 	.word	0x20000084
 800236c:	20000230 	.word	0x20000230
 8002370:	08007c9c 	.word	0x08007c9c
 8002374:	08007cc4 	.word	0x08007cc4
 8002378:	08007cec 	.word	0x08007cec
 800237c:	40020000 	.word	0x40020000
 8002380:	40020800 	.word	0x40020800
 8002384:	2000028c 	.word	0x2000028c
 8002388:	40000400 	.word	0x40000400
 800238c:	08007d08 	.word	0x08007d08
 8002390:	20000160 	.word	0x20000160
 8002394:	20000000 	.word	0x20000000
 8002398:	20000280 	.word	0x20000280
 800239c:	08007d34 	.word	0x08007d34
 80023a0:	200002bc 	.word	0x200002bc
		  {
			  // Timer
			  TIM3->PSC = 160-1;
 80023a4:	4ba3      	ldr	r3, [pc, #652]	@ (8002634 <main+0xebc>)
 80023a6:	229f      	movs	r2, #159	@ 0x9f
 80023a8:	629a      	str	r2, [r3, #40]	@ 0x28
			  TIM3->ARR = 100-1;
 80023aa:	4ba2      	ldr	r3, [pc, #648]	@ (8002634 <main+0xebc>)
 80023ac:	2263      	movs	r2, #99	@ 0x63
 80023ae:	62da      	str	r2, [r3, #44]	@ 0x2c
			  TIM3->CCR3 = 0;
 80023b0:	4ba0      	ldr	r3, [pc, #640]	@ (8002634 <main+0xebc>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	63da      	str	r2, [r3, #60]	@ 0x3c

			  distance_sensor();
 80023b6:	f7ff f865 	bl	8001484 <distance_sensor>

			  // Terminal Display
			  if(clock_hours != pastHour) {
 80023ba:	4b9f      	ldr	r3, [pc, #636]	@ (8002638 <main+0xec0>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	4b9f      	ldr	r3, [pc, #636]	@ (800263c <main+0xec4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d02b      	beq.n	800241e <main+0xca6>
				  sprintf((char*)txd_msg_buffer10, "\r\nTIME: %d INLET MODE -- PWM: %d -- RPM: %d DEPTH: %d", clock_hours,  zones[0], (int) rpm, distance);
 80023c6:	4b9c      	ldr	r3, [pc, #624]	@ (8002638 <main+0xec0>)
 80023c8:	681c      	ldr	r4, [r3, #0]
 80023ca:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 80023ce:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 80023d2:	681d      	ldr	r5, [r3, #0]
 80023d4:	4b9a      	ldr	r3, [pc, #616]	@ (8002640 <main+0xec8>)
 80023d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	f7fe fb25 	bl	8000a2c <__aeabi_d2iz>
 80023e2:	4603      	mov	r3, r0
 80023e4:	4a97      	ldr	r2, [pc, #604]	@ (8002644 <main+0xecc>)
 80023e6:	8812      	ldrh	r2, [r2, #0]
 80023e8:	f507 704e 	add.w	r0, r7, #824	@ 0x338
 80023ec:	9201      	str	r2, [sp, #4]
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	462b      	mov	r3, r5
 80023f2:	4622      	mov	r2, r4
 80023f4:	4994      	ldr	r1, [pc, #592]	@ (8002648 <main+0xed0>)
 80023f6:	f004 fe69 	bl	80070cc <siprintf>
				  HAL_UART_Transmit(&huart6, txd_msg_buffer10, strlen((char*)txd_msg_buffer10), 1000);
 80023fa:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fd feee 	bl	80001e0 <strlen>
 8002404:	4603      	mov	r3, r0
 8002406:	b29a      	uxth	r2, r3
 8002408:	f507 714e 	add.w	r1, r7, #824	@ 0x338
 800240c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002410:	488e      	ldr	r0, [pc, #568]	@ (800264c <main+0xed4>)
 8002412:	f003 fe30 	bl	8006076 <HAL_UART_Transmit>
				  pastHour = clock_hours;
 8002416:	4b88      	ldr	r3, [pc, #544]	@ (8002638 <main+0xec0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a88      	ldr	r2, [pc, #544]	@ (800263c <main+0xec4>)
 800241c:	6013      	str	r3, [r2, #0]




			  // If distance is less than 50, then resovoir is considered full
			  if (distance >= 50)
 800241e:	4b89      	ldr	r3, [pc, #548]	@ (8002644 <main+0xecc>)
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	2b31      	cmp	r3, #49	@ 0x31
 8002424:	d913      	bls.n	800244e <main+0xcd6>
			  {
				  digits_set();
 8002426:	f7ff f943 	bl	80016b0 <digits_set>
				  // dc motor speed
				  if (zones[0] == 0)
 800242a:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 800242e:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d102      	bne.n	800243e <main+0xcc6>
				  {
					  manual_mode_INLET();
 8002438:	f7ff f8da 	bl	80015f0 <manual_mode_INLET>
 800243c:	e01a      	b.n	8002474 <main+0xcfc>
				  }

				  else
				  {
					  TIM3->CCR1 = zones[0];
 800243e:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8002442:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4b7a      	ldr	r3, [pc, #488]	@ (8002634 <main+0xebc>)
 800244a:	635a      	str	r2, [r3, #52]	@ 0x34
 800244c:	e012      	b.n	8002474 <main+0xcfc>

			  }

			  else {

				  if (distance != 0)
 800244e:	4b7d      	ldr	r3, [pc, #500]	@ (8002644 <main+0xecc>)
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00e      	beq.n	8002474 <main+0xcfc>
				  {
					  isFull = 1;
 8002456:	4b7e      	ldr	r3, [pc, #504]	@ (8002650 <main+0xed8>)
 8002458:	2201      	movs	r2, #1
 800245a:	601a      	str	r2, [r3, #0]
					  TIM3->CCR1 = 0;
 800245c:	4b75      	ldr	r3, [pc, #468]	@ (8002634 <main+0xebc>)
 800245e:	2200      	movs	r2, #0
 8002460:	635a      	str	r2, [r3, #52]	@ 0x34
					  DIGIT_A_Display(9);
 8002462:	2009      	movs	r0, #9
 8002464:	f7fe fc82 	bl	8000d6c <DIGIT_A_Display>
					  DIGIT_B_Display(9);
 8002468:	2009      	movs	r0, #9
 800246a:	f7fe fda5 	bl	8000fb8 <DIGIT_B_Display>
					  rpm_tick_count = 0;
 800246e:	4b79      	ldr	r3, [pc, #484]	@ (8002654 <main+0xedc>)
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
		  while ((clock_hours >= time[1] && clock_hours <= time[2]) || isFull == 0)
 8002474:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8002478:	f6a3 03c4 	subw	r3, r3, #2244	@ 0x8c4
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	4b6e      	ldr	r3, [pc, #440]	@ (8002638 <main+0xec0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	dc08      	bgt.n	8002498 <main+0xd20>
 8002486:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 800248a:	f6a3 03c4 	subw	r3, r3, #2244	@ 0x8c4
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	4b69      	ldr	r3, [pc, #420]	@ (8002638 <main+0xec0>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	da85      	bge.n	80023a4 <main+0xc2c>
 8002498:	4b6d      	ldr	r3, [pc, #436]	@ (8002650 <main+0xed8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d081      	beq.n	80023a4 <main+0xc2c>

			  }

		  }

		  TIM3->CCR1 = 0;
 80024a0:	4b64      	ldr	r3, [pc, #400]	@ (8002634 <main+0xebc>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	635a      	str	r2, [r3, #52]	@ 0x34
		  rcv_intpt_flag = 00;
 80024a6:	4b6c      	ldr	r3, [pc, #432]	@ (8002658 <main+0xee0>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]

		  // ZONE 1
		  temp = 0;
 80024ac:	4b6b      	ldr	r3, [pc, #428]	@ (800265c <main+0xee4>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
		  //sec = 0;
		  // Set color to red
		  HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_RESET);
 80024b2:	2200      	movs	r2, #0
 80024b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024b8:	4869      	ldr	r0, [pc, #420]	@ (8002660 <main+0xee8>)
 80024ba:	f002 f8a7 	bl	800460c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_RESET);
 80024be:	2200      	movs	r2, #0
 80024c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024c4:	4866      	ldr	r0, [pc, #408]	@ (8002660 <main+0xee8>)
 80024c6:	f002 f8a1 	bl	800460c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, RFD_Pin, GPIO_PIN_RESET);
 80024ca:	2200      	movs	r2, #0
 80024cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024d0:	4863      	ldr	r0, [pc, #396]	@ (8002660 <main+0xee8>)
 80024d2:	f002 f89b 	bl	800460c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_SET);
 80024d6:	2201      	movs	r2, #1
 80024d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024dc:	4860      	ldr	r0, [pc, #384]	@ (8002660 <main+0xee8>)
 80024de:	f002 f895 	bl	800460c <HAL_GPIO_WritePin>

		  // Servo rotate
		  TIM2->CCR1 = 1500;
 80024e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80024e6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80024ea:	635a      	str	r2, [r3, #52]	@ 0x34

		  // dc motor runs for user specified time
		  while (time[3] <= clock_hours && clock_hours <= time[4] && temp == 0) {
 80024ec:	e062      	b.n	80025b4 <main+0xe3c>
			  temp = 0;
 80024ee:	4b5b      	ldr	r3, [pc, #364]	@ (800265c <main+0xee4>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
			  // Timer
			  TIM3->PSC = 160-1;
 80024f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002634 <main+0xebc>)
 80024f6:	229f      	movs	r2, #159	@ 0x9f
 80024f8:	629a      	str	r2, [r3, #40]	@ 0x28
			  TIM3->ARR = 100-1;
 80024fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002634 <main+0xebc>)
 80024fc:	2263      	movs	r2, #99	@ 0x63
 80024fe:	62da      	str	r2, [r3, #44]	@ 0x2c
			  TIM3->CCR1 = 0;
 8002500:	4b4c      	ldr	r3, [pc, #304]	@ (8002634 <main+0xebc>)
 8002502:	2200      	movs	r2, #0
 8002504:	635a      	str	r2, [r3, #52]	@ 0x34

			  distance_sensor();
 8002506:	f7fe ffbd 	bl	8001484 <distance_sensor>

			  // Terminal Display
			  if(clock_hours != pastHour){
 800250a:	4b4b      	ldr	r3, [pc, #300]	@ (8002638 <main+0xec0>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	4b4b      	ldr	r3, [pc, #300]	@ (800263c <main+0xec4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d02b      	beq.n	800256e <main+0xdf6>
				  sprintf((char*)txd_msg_buffer12, "\r\nTIME: %d ZONE 1 -- PWM: %d -- RPM: %d DEPTH: %d", clock_hours,  zones[1], (int) rpm, distance);
 8002516:	4b48      	ldr	r3, [pc, #288]	@ (8002638 <main+0xec0>)
 8002518:	681c      	ldr	r4, [r3, #0]
 800251a:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 800251e:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8002522:	685d      	ldr	r5, [r3, #4]
 8002524:	4b46      	ldr	r3, [pc, #280]	@ (8002640 <main+0xec8>)
 8002526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252a:	4610      	mov	r0, r2
 800252c:	4619      	mov	r1, r3
 800252e:	f7fe fa7d 	bl	8000a2c <__aeabi_d2iz>
 8002532:	4603      	mov	r3, r0
 8002534:	4a43      	ldr	r2, [pc, #268]	@ (8002644 <main+0xecc>)
 8002536:	8812      	ldrh	r2, [r2, #0]
 8002538:	f507 700e 	add.w	r0, r7, #568	@ 0x238
 800253c:	9201      	str	r2, [sp, #4]
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	462b      	mov	r3, r5
 8002542:	4622      	mov	r2, r4
 8002544:	4947      	ldr	r1, [pc, #284]	@ (8002664 <main+0xeec>)
 8002546:	f004 fdc1 	bl	80070cc <siprintf>
				  HAL_UART_Transmit(&huart6, txd_msg_buffer12, strlen((char*)txd_msg_buffer12), 1000);
 800254a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800254e:	4618      	mov	r0, r3
 8002550:	f7fd fe46 	bl	80001e0 <strlen>
 8002554:	4603      	mov	r3, r0
 8002556:	b29a      	uxth	r2, r3
 8002558:	f507 710e 	add.w	r1, r7, #568	@ 0x238
 800255c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002560:	483a      	ldr	r0, [pc, #232]	@ (800264c <main+0xed4>)
 8002562:	f003 fd88 	bl	8006076 <HAL_UART_Transmit>
				  pastHour = clock_hours;
 8002566:	4b34      	ldr	r3, [pc, #208]	@ (8002638 <main+0xec0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a34      	ldr	r2, [pc, #208]	@ (800263c <main+0xec4>)
 800256c:	6013      	str	r3, [r2, #0]
			  }

			  // If distance is less than 50, then resovoir is considered full
			  if (distance >= 50)
 800256e:	4b35      	ldr	r3, [pc, #212]	@ (8002644 <main+0xecc>)
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	2b31      	cmp	r3, #49	@ 0x31
 8002574:	d91e      	bls.n	80025b4 <main+0xe3c>
			  {
				  digits_set();
 8002576:	f7ff f89b 	bl	80016b0 <digits_set>

				  if (digits[1] == 0 && digits[0] == 0){
 800257a:	4b3b      	ldr	r3, [pc, #236]	@ (8002668 <main+0xef0>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d107      	bne.n	8002592 <main+0xe1a>
 8002582:	4b39      	ldr	r3, [pc, #228]	@ (8002668 <main+0xef0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d103      	bne.n	8002592 <main+0xe1a>
					  temp = 1;
 800258a:	4b34      	ldr	r3, [pc, #208]	@ (800265c <main+0xee4>)
 800258c:	2201      	movs	r2, #1
 800258e:	601a      	str	r2, [r3, #0]
					  break;
 8002590:	e026      	b.n	80025e0 <main+0xe68>
				  }

				  // dc motor speed
				  if (zones[1] == 0)
 8002592:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8002596:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d102      	bne.n	80025a6 <main+0xe2e>
				  {
					  manual_mode_ZONES();
 80025a0:	f7ff f856 	bl	8001650 <manual_mode_ZONES>
 80025a4:	e006      	b.n	80025b4 <main+0xe3c>
				  }

				  else
				  {
					  TIM3->CCR3 = zones[1];
 80025a6:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 80025aa:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4b20      	ldr	r3, [pc, #128]	@ (8002634 <main+0xebc>)
 80025b2:	63da      	str	r2, [r3, #60]	@ 0x3c
		  while (time[3] <= clock_hours && clock_hours <= time[4] && temp == 0) {
 80025b4:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 80025b8:	f6a3 03c4 	subw	r3, r3, #2244	@ 0x8c4
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	4b1e      	ldr	r3, [pc, #120]	@ (8002638 <main+0xec0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	dc0c      	bgt.n	80025e0 <main+0xe68>
 80025c6:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 80025ca:	f6a3 03c4 	subw	r3, r3, #2244	@ 0x8c4
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	4b19      	ldr	r3, [pc, #100]	@ (8002638 <main+0xec0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	db03      	blt.n	80025e0 <main+0xe68>
 80025d8:	4b20      	ldr	r3, [pc, #128]	@ (800265c <main+0xee4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d086      	beq.n	80024ee <main+0xd76>
//
//			  }

		  }

		  if (temp == 1)
 80025e0:	4b1e      	ldr	r3, [pc, #120]	@ (800265c <main+0xee4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	f000 81c0 	beq.w	800296a <main+0x11f2>
		  {
			  break;
		  }

		  TIM3->CCR3 = 0;
 80025ea:	4b12      	ldr	r3, [pc, #72]	@ (8002634 <main+0xebc>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	63da      	str	r2, [r3, #60]	@ 0x3c
		  rcv_intpt_flag = 00;
 80025f0:	4b19      	ldr	r3, [pc, #100]	@ (8002658 <main+0xee0>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
		  // ZONE 2

		  //sec = 0;

		  // Set color to green
		  HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_RESET);
 80025f6:	2200      	movs	r2, #0
 80025f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80025fc:	4818      	ldr	r0, [pc, #96]	@ (8002660 <main+0xee8>)
 80025fe:	f002 f805 	bl	800460c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_RESET);
 8002602:	2200      	movs	r2, #0
 8002604:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002608:	4815      	ldr	r0, [pc, #84]	@ (8002660 <main+0xee8>)
 800260a:	f001 ffff 	bl	800460c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, RFD_Pin, GPIO_PIN_RESET);
 800260e:	2200      	movs	r2, #0
 8002610:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002614:	4812      	ldr	r0, [pc, #72]	@ (8002660 <main+0xee8>)
 8002616:	f001 fff9 	bl	800460c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_SET);
 800261a:	2201      	movs	r2, #1
 800261c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002620:	480f      	ldr	r0, [pc, #60]	@ (8002660 <main+0xee8>)
 8002622:	f001 fff3 	bl	800460c <HAL_GPIO_WritePin>

		  // Servo rotate
		  TIM2->CCR1 = 1000;
 8002626:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800262a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800262e:	635a      	str	r2, [r3, #52]	@ 0x34

		  // dc motor runs for user specified time
		  while (time[5] <= clock_hours && clock_hours <= time[6] && temp == 0)
 8002630:	e07f      	b.n	8002732 <main+0xfba>
 8002632:	bf00      	nop
 8002634:	40000400 	.word	0x40000400
 8002638:	2000028c 	.word	0x2000028c
 800263c:	20000004 	.word	0x20000004
 8002640:	20000280 	.word	0x20000280
 8002644:	20000000 	.word	0x20000000
 8002648:	08007d34 	.word	0x08007d34
 800264c:	20000230 	.word	0x20000230
 8002650:	200002bc 	.word	0x200002bc
 8002654:	20000278 	.word	0x20000278
 8002658:	20000274 	.word	0x20000274
 800265c:	200002b8 	.word	0x200002b8
 8002660:	40020000 	.word	0x40020000
 8002664:	08007d6c 	.word	0x08007d6c
 8002668:	200002a4 	.word	0x200002a4
		  {
			  temp = 0;
 800266c:	4b7e      	ldr	r3, [pc, #504]	@ (8002868 <main+0x10f0>)
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
			  // Timer
			  TIM3->PSC = 160-1;
 8002672:	4b7e      	ldr	r3, [pc, #504]	@ (800286c <main+0x10f4>)
 8002674:	229f      	movs	r2, #159	@ 0x9f
 8002676:	629a      	str	r2, [r3, #40]	@ 0x28
			  TIM3->ARR = 100-1;
 8002678:	4b7c      	ldr	r3, [pc, #496]	@ (800286c <main+0x10f4>)
 800267a:	2263      	movs	r2, #99	@ 0x63
 800267c:	62da      	str	r2, [r3, #44]	@ 0x2c
			  TIM3->CCR1 = 0;
 800267e:	4b7b      	ldr	r3, [pc, #492]	@ (800286c <main+0x10f4>)
 8002680:	2200      	movs	r2, #0
 8002682:	635a      	str	r2, [r3, #52]	@ 0x34

			  distance_sensor();
 8002684:	f7fe fefe 	bl	8001484 <distance_sensor>

			  // Terminal Display
			  if(clock_hours != pastHour) {
 8002688:	4b79      	ldr	r3, [pc, #484]	@ (8002870 <main+0x10f8>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4b79      	ldr	r3, [pc, #484]	@ (8002874 <main+0x10fc>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d02b      	beq.n	80026ec <main+0xf74>
				  sprintf((char*)txd_msg_buffer13, "\r\nTIME: %d ZONE 2 -- PWM: %d -- RPM: %d DEPTH: %d", clock_hours,  zones[2], (int) rpm, distance);
 8002694:	4b76      	ldr	r3, [pc, #472]	@ (8002870 <main+0x10f8>)
 8002696:	681c      	ldr	r4, [r3, #0]
 8002698:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 800269c:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 80026a0:	689d      	ldr	r5, [r3, #8]
 80026a2:	4b75      	ldr	r3, [pc, #468]	@ (8002878 <main+0x1100>)
 80026a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a8:	4610      	mov	r0, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	f7fe f9be 	bl	8000a2c <__aeabi_d2iz>
 80026b0:	4603      	mov	r3, r0
 80026b2:	4a72      	ldr	r2, [pc, #456]	@ (800287c <main+0x1104>)
 80026b4:	8812      	ldrh	r2, [r2, #0]
 80026b6:	f507 70dc 	add.w	r0, r7, #440	@ 0x1b8
 80026ba:	9201      	str	r2, [sp, #4]
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	462b      	mov	r3, r5
 80026c0:	4622      	mov	r2, r4
 80026c2:	496f      	ldr	r1, [pc, #444]	@ (8002880 <main+0x1108>)
 80026c4:	f004 fd02 	bl	80070cc <siprintf>
				  HAL_UART_Transmit(&huart6, txd_msg_buffer13, strlen((char*)txd_msg_buffer13), 1000);
 80026c8:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fd fd87 	bl	80001e0 <strlen>
 80026d2:	4603      	mov	r3, r0
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 80026da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026de:	4869      	ldr	r0, [pc, #420]	@ (8002884 <main+0x110c>)
 80026e0:	f003 fcc9 	bl	8006076 <HAL_UART_Transmit>
				  pastHour = clock_hours;
 80026e4:	4b62      	ldr	r3, [pc, #392]	@ (8002870 <main+0x10f8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a62      	ldr	r2, [pc, #392]	@ (8002874 <main+0x10fc>)
 80026ea:	6013      	str	r3, [r2, #0]
			  }


			  // If distance is less than 50, then resovoir is considered full
			  if (distance >= 50)
 80026ec:	4b63      	ldr	r3, [pc, #396]	@ (800287c <main+0x1104>)
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	2b31      	cmp	r3, #49	@ 0x31
 80026f2:	d91e      	bls.n	8002732 <main+0xfba>
			  {
				  digits_set();
 80026f4:	f7fe ffdc 	bl	80016b0 <digits_set>

				  if (digits[1] == 0 && digits[0] == 0)
 80026f8:	4b63      	ldr	r3, [pc, #396]	@ (8002888 <main+0x1110>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d107      	bne.n	8002710 <main+0xf98>
 8002700:	4b61      	ldr	r3, [pc, #388]	@ (8002888 <main+0x1110>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d103      	bne.n	8002710 <main+0xf98>
				  {
					  temp = 1;
 8002708:	4b57      	ldr	r3, [pc, #348]	@ (8002868 <main+0x10f0>)
 800270a:	2201      	movs	r2, #1
 800270c:	601a      	str	r2, [r3, #0]
					  break;
 800270e:	e026      	b.n	800275e <main+0xfe6>
				  }

				  // dc motor speed
				  if (zones[2] == 0)
 8002710:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8002714:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d102      	bne.n	8002724 <main+0xfac>
				  {
					  manual_mode_ZONES();
 800271e:	f7fe ff97 	bl	8001650 <manual_mode_ZONES>
 8002722:	e006      	b.n	8002732 <main+0xfba>
				  }

				  else
				  {
					  TIM3->CCR3 = zones[2];
 8002724:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8002728:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	4b4f      	ldr	r3, [pc, #316]	@ (800286c <main+0x10f4>)
 8002730:	63da      	str	r2, [r3, #60]	@ 0x3c
		  while (time[5] <= clock_hours && clock_hours <= time[6] && temp == 0)
 8002732:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8002736:	f6a3 03c4 	subw	r3, r3, #2244	@ 0x8c4
 800273a:	695a      	ldr	r2, [r3, #20]
 800273c:	4b4c      	ldr	r3, [pc, #304]	@ (8002870 <main+0x10f8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	dc0c      	bgt.n	800275e <main+0xfe6>
 8002744:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8002748:	f6a3 03c4 	subw	r3, r3, #2244	@ 0x8c4
 800274c:	699a      	ldr	r2, [r3, #24]
 800274e:	4b48      	ldr	r3, [pc, #288]	@ (8002870 <main+0x10f8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	db03      	blt.n	800275e <main+0xfe6>
 8002756:	4b44      	ldr	r3, [pc, #272]	@ (8002868 <main+0x10f0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d086      	beq.n	800266c <main+0xef4>
//
//			  }

		  }

		  if (temp == 1)
 800275e:	4b42      	ldr	r3, [pc, #264]	@ (8002868 <main+0x10f0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b01      	cmp	r3, #1
 8002764:	f000 8103 	beq.w	800296e <main+0x11f6>
		  {
			  break;
		  }

		  TIM3->CCR3 = 0;
 8002768:	4b40      	ldr	r3, [pc, #256]	@ (800286c <main+0x10f4>)
 800276a:	2200      	movs	r2, #0
 800276c:	63da      	str	r2, [r3, #60]	@ 0x3c
		  rcv_intpt_flag = 00;
 800276e:	4b47      	ldr	r3, [pc, #284]	@ (800288c <main+0x1114>)
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]

		  // ZONE 3

		  //sec = 0;
		  // Set color to blue
		  HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_RESET);
 8002774:	2200      	movs	r2, #0
 8002776:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800277a:	4845      	ldr	r0, [pc, #276]	@ (8002890 <main+0x1118>)
 800277c:	f001 ff46 	bl	800460c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_RESET);
 8002780:	2200      	movs	r2, #0
 8002782:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002786:	4842      	ldr	r0, [pc, #264]	@ (8002890 <main+0x1118>)
 8002788:	f001 ff40 	bl	800460c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, RFD_Pin, GPIO_PIN_RESET);
 800278c:	2200      	movs	r2, #0
 800278e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002792:	483f      	ldr	r0, [pc, #252]	@ (8002890 <main+0x1118>)
 8002794:	f001 ff3a 	bl	800460c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, RFD_Pin, GPIO_PIN_SET);
 8002798:	2201      	movs	r2, #1
 800279a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800279e:	483c      	ldr	r0, [pc, #240]	@ (8002890 <main+0x1118>)
 80027a0:	f001 ff34 	bl	800460c <HAL_GPIO_WritePin>

		  // Servo rotate
		  TIM2->CCR1 = 500;
 80027a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80027a8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80027ac:	635a      	str	r2, [r3, #52]	@ 0x34

		  // dc motor runs for user specified time
		  while (time[7] <= clock_hours && clock_hours <= time[8] && temp == 0)
 80027ae:	e07a      	b.n	80028a6 <main+0x112e>
		  {
			  temp = 0;
 80027b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002868 <main+0x10f0>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
			  // Timer
			  TIM3->PSC = 160-1;
 80027b6:	4b2d      	ldr	r3, [pc, #180]	@ (800286c <main+0x10f4>)
 80027b8:	229f      	movs	r2, #159	@ 0x9f
 80027ba:	629a      	str	r2, [r3, #40]	@ 0x28
			  TIM3->ARR = 100-1;
 80027bc:	4b2b      	ldr	r3, [pc, #172]	@ (800286c <main+0x10f4>)
 80027be:	2263      	movs	r2, #99	@ 0x63
 80027c0:	62da      	str	r2, [r3, #44]	@ 0x2c
			  TIM3->CCR1 = 0;
 80027c2:	4b2a      	ldr	r3, [pc, #168]	@ (800286c <main+0x10f4>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	635a      	str	r2, [r3, #52]	@ 0x34

			  distance_sensor();
 80027c8:	f7fe fe5c 	bl	8001484 <distance_sensor>

			  // Terminal Display
			  if(clock_hours != pastHour){
 80027cc:	4b28      	ldr	r3, [pc, #160]	@ (8002870 <main+0x10f8>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4b28      	ldr	r3, [pc, #160]	@ (8002874 <main+0x10fc>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d02b      	beq.n	8002830 <main+0x10b8>
				  sprintf((char*)txd_msg_buffer14, "\r\nTIME: %d ZONE 3 -- PWM: %d -- RPM: %d DEPTH: %d", clock_hours,  zones[3], (int) rpm, distance);
 80027d8:	4b25      	ldr	r3, [pc, #148]	@ (8002870 <main+0x10f8>)
 80027da:	681c      	ldr	r4, [r3, #0]
 80027dc:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 80027e0:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 80027e4:	68dd      	ldr	r5, [r3, #12]
 80027e6:	4b24      	ldr	r3, [pc, #144]	@ (8002878 <main+0x1100>)
 80027e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ec:	4610      	mov	r0, r2
 80027ee:	4619      	mov	r1, r3
 80027f0:	f7fe f91c 	bl	8000a2c <__aeabi_d2iz>
 80027f4:	4603      	mov	r3, r0
 80027f6:	4a21      	ldr	r2, [pc, #132]	@ (800287c <main+0x1104>)
 80027f8:	8812      	ldrh	r2, [r2, #0]
 80027fa:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80027fe:	9201      	str	r2, [sp, #4]
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	462b      	mov	r3, r5
 8002804:	4622      	mov	r2, r4
 8002806:	4923      	ldr	r1, [pc, #140]	@ (8002894 <main+0x111c>)
 8002808:	f004 fc60 	bl	80070cc <siprintf>
				  HAL_UART_Transmit(&huart6, txd_msg_buffer14, strlen((char*)txd_msg_buffer14), 1000);
 800280c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002810:	4618      	mov	r0, r3
 8002812:	f7fd fce5 	bl	80001e0 <strlen>
 8002816:	4603      	mov	r3, r0
 8002818:	b29a      	uxth	r2, r3
 800281a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800281e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002822:	4818      	ldr	r0, [pc, #96]	@ (8002884 <main+0x110c>)
 8002824:	f003 fc27 	bl	8006076 <HAL_UART_Transmit>
				  pastHour = clock_hours;
 8002828:	4b11      	ldr	r3, [pc, #68]	@ (8002870 <main+0x10f8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a11      	ldr	r2, [pc, #68]	@ (8002874 <main+0x10fc>)
 800282e:	6013      	str	r3, [r2, #0]
			  }


			  // If ditance is less than 50, then resovoir is considered full
			  if (distance >= 50)
 8002830:	4b12      	ldr	r3, [pc, #72]	@ (800287c <main+0x1104>)
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	2b31      	cmp	r3, #49	@ 0x31
 8002836:	d936      	bls.n	80028a6 <main+0x112e>
			  {
				  digits_set();
 8002838:	f7fe ff3a 	bl	80016b0 <digits_set>

				  if (digits[1] == 0 && digits[0] == 0)
 800283c:	4b12      	ldr	r3, [pc, #72]	@ (8002888 <main+0x1110>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d107      	bne.n	8002854 <main+0x10dc>
 8002844:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <main+0x1110>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d103      	bne.n	8002854 <main+0x10dc>
				  {
					  temp = 1;
 800284c:	4b06      	ldr	r3, [pc, #24]	@ (8002868 <main+0x10f0>)
 800284e:	2201      	movs	r2, #1
 8002850:	601a      	str	r2, [r3, #0]
					  break;
 8002852:	e03f      	b.n	80028d4 <main+0x115c>
				  }

				  // dc motor speed
				  if (zones[3] == 0)
 8002854:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 8002858:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d11a      	bne.n	8002898 <main+0x1120>
				  {
					  manual_mode_ZONES();
 8002862:	f7fe fef5 	bl	8001650 <manual_mode_ZONES>
 8002866:	e01e      	b.n	80028a6 <main+0x112e>
 8002868:	200002b8 	.word	0x200002b8
 800286c:	40000400 	.word	0x40000400
 8002870:	2000028c 	.word	0x2000028c
 8002874:	20000004 	.word	0x20000004
 8002878:	20000280 	.word	0x20000280
 800287c:	20000000 	.word	0x20000000
 8002880:	08007da0 	.word	0x08007da0
 8002884:	20000230 	.word	0x20000230
 8002888:	200002a4 	.word	0x200002a4
 800288c:	20000274 	.word	0x20000274
 8002890:	40020000 	.word	0x40020000
 8002894:	08007dd4 	.word	0x08007dd4
				  }

				  else
				  {
					  TIM3->CCR3 = zones[3];
 8002898:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 800289c:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	4b35      	ldr	r3, [pc, #212]	@ (8002978 <main+0x1200>)
 80028a4:	63da      	str	r2, [r3, #60]	@ 0x3c
		  while (time[7] <= clock_hours && clock_hours <= time[8] && temp == 0)
 80028a6:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 80028aa:	f6a3 03c4 	subw	r3, r3, #2244	@ 0x8c4
 80028ae:	69da      	ldr	r2, [r3, #28]
 80028b0:	4b32      	ldr	r3, [pc, #200]	@ (800297c <main+0x1204>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	dc0d      	bgt.n	80028d4 <main+0x115c>
 80028b8:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 80028bc:	f6a3 03c4 	subw	r3, r3, #2244	@ 0x8c4
 80028c0:	6a1a      	ldr	r2, [r3, #32]
 80028c2:	4b2e      	ldr	r3, [pc, #184]	@ (800297c <main+0x1204>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	db04      	blt.n	80028d4 <main+0x115c>
 80028ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002980 <main+0x1208>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f43f af6e 	beq.w	80027b0 <main+0x1038>
//
//			  }

		  }

		  if (temp == 1)
 80028d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002980 <main+0x1208>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d04a      	beq.n	8002972 <main+0x11fa>
		  {
			  break;
		  }
		  if(clock_hours != pastHour){
 80028dc:	4b27      	ldr	r3, [pc, #156]	@ (800297c <main+0x1204>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4b28      	ldr	r3, [pc, #160]	@ (8002984 <main+0x120c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d02b      	beq.n	8002940 <main+0x11c8>
			  sprintf((char*)txd_msg_buffer14, "\r\nTIME: %d IDLE -- PWM: %d -- RPM: %d DEPTH: %d", clock_hours,  zones[3], (int) rpm, distance);
 80028e8:	4b24      	ldr	r3, [pc, #144]	@ (800297c <main+0x1204>)
 80028ea:	681c      	ldr	r4, [r3, #0]
 80028ec:	f607 03c8 	addw	r3, r7, #2248	@ 0x8c8
 80028f0:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 80028f4:	68dd      	ldr	r5, [r3, #12]
 80028f6:	4b24      	ldr	r3, [pc, #144]	@ (8002988 <main+0x1210>)
 80028f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fc:	4610      	mov	r0, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	f7fe f894 	bl	8000a2c <__aeabi_d2iz>
 8002904:	4603      	mov	r3, r0
 8002906:	4a21      	ldr	r2, [pc, #132]	@ (800298c <main+0x1214>)
 8002908:	8812      	ldrh	r2, [r2, #0]
 800290a:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800290e:	9201      	str	r2, [sp, #4]
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	462b      	mov	r3, r5
 8002914:	4622      	mov	r2, r4
 8002916:	491e      	ldr	r1, [pc, #120]	@ (8002990 <main+0x1218>)
 8002918:	f004 fbd8 	bl	80070cc <siprintf>
			  HAL_UART_Transmit(&huart6, txd_msg_buffer14, strlen((char*)txd_msg_buffer14), 1000);
 800291c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002920:	4618      	mov	r0, r3
 8002922:	f7fd fc5d 	bl	80001e0 <strlen>
 8002926:	4603      	mov	r3, r0
 8002928:	b29a      	uxth	r2, r3
 800292a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800292e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002932:	4818      	ldr	r0, [pc, #96]	@ (8002994 <main+0x121c>)
 8002934:	f003 fb9f 	bl	8006076 <HAL_UART_Transmit>
			  pastHour = clock_hours;
 8002938:	4b10      	ldr	r3, [pc, #64]	@ (800297c <main+0x1204>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a11      	ldr	r2, [pc, #68]	@ (8002984 <main+0x120c>)
 800293e:	6013      	str	r3, [r2, #0]
		  }
		  distance_sensor();
 8002940:	f7fe fda0 	bl	8001484 <distance_sensor>

		  TIM3->CCR3 = 0;
 8002944:	4b0c      	ldr	r3, [pc, #48]	@ (8002978 <main+0x1200>)
 8002946:	2200      	movs	r2, #0
 8002948:	63da      	str	r2, [r3, #60]	@ 0x3c
		  rcv_intpt_flag = 00;
 800294a:	4b13      	ldr	r3, [pc, #76]	@ (8002998 <main+0x1220>)
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
	  while (distance <= 650 && distance != 0)
 8002950:	4b0e      	ldr	r3, [pc, #56]	@ (800298c <main+0x1214>)
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	f240 228a 	movw	r2, #650	@ 0x28a
 8002958:	4293      	cmp	r3, r2
 800295a:	f63f ac79 	bhi.w	8002250 <main+0xad8>
 800295e:	4b0b      	ldr	r3, [pc, #44]	@ (800298c <main+0x1214>)
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f47f ace9 	bne.w	800233a <main+0xbc2>
 8002968:	e472      	b.n	8002250 <main+0xad8>
			  break;
 800296a:	bf00      	nop
 800296c:	e470      	b.n	8002250 <main+0xad8>
			  break;
 800296e:	bf00      	nop
 8002970:	e46e      	b.n	8002250 <main+0xad8>
			  break;
 8002972:	bf00      	nop
	  TIM3->CCR3 = 0;
 8002974:	e46c      	b.n	8002250 <main+0xad8>
 8002976:	bf00      	nop
 8002978:	40000400 	.word	0x40000400
 800297c:	2000028c 	.word	0x2000028c
 8002980:	200002b8 	.word	0x200002b8
 8002984:	20000004 	.word	0x20000004
 8002988:	20000280 	.word	0x20000280
 800298c:	20000000 	.word	0x20000000
 8002990:	08007e08 	.word	0x08007e08
 8002994:	20000230 	.word	0x20000230
 8002998:	20000274 	.word	0x20000274

0800299c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b094      	sub	sp, #80	@ 0x50
 80029a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029a2:	f107 0320 	add.w	r3, r7, #32
 80029a6:	2230      	movs	r2, #48	@ 0x30
 80029a8:	2100      	movs	r1, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f004 fbae 	bl	800710c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029b0:	f107 030c 	add.w	r3, r7, #12
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029c0:	2300      	movs	r3, #0
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	4b23      	ldr	r3, [pc, #140]	@ (8002a54 <SystemClock_Config+0xb8>)
 80029c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c8:	4a22      	ldr	r2, [pc, #136]	@ (8002a54 <SystemClock_Config+0xb8>)
 80029ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80029d0:	4b20      	ldr	r3, [pc, #128]	@ (8002a54 <SystemClock_Config+0xb8>)
 80029d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80029dc:	2300      	movs	r3, #0
 80029de:	607b      	str	r3, [r7, #4]
 80029e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a58 <SystemClock_Config+0xbc>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80029e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002a58 <SystemClock_Config+0xbc>)
 80029ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	4b19      	ldr	r3, [pc, #100]	@ (8002a58 <SystemClock_Config+0xbc>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80029f8:	607b      	str	r3, [r7, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029fc:	2302      	movs	r3, #2
 80029fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a00:	2301      	movs	r3, #1
 8002a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a04:	2310      	movs	r3, #16
 8002a06:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a0c:	f107 0320 	add.w	r3, r7, #32
 8002a10:	4618      	mov	r0, r3
 8002a12:	f001 fe2d 	bl	8004670 <HAL_RCC_OscConfig>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002a1c:	f000 fba6 	bl	800316c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a20:	230f      	movs	r3, #15
 8002a22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a24:	2300      	movs	r3, #0
 8002a26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a34:	f107 030c 	add.w	r3, r7, #12
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f002 f890 	bl	8004b60 <HAL_RCC_ClockConfig>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002a46:	f000 fb91 	bl	800316c <Error_Handler>
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	3750      	adds	r7, #80	@ 0x50
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40007000 	.word	0x40007000

08002a5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a62:	463b      	mov	r3, r7
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002a6e:	4b21      	ldr	r3, [pc, #132]	@ (8002af4 <MX_ADC1_Init+0x98>)
 8002a70:	4a21      	ldr	r2, [pc, #132]	@ (8002af8 <MX_ADC1_Init+0x9c>)
 8002a72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002a74:	4b1f      	ldr	r3, [pc, #124]	@ (8002af4 <MX_ADC1_Init+0x98>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8002a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002af4 <MX_ADC1_Init+0x98>)
 8002a7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002a82:	4b1c      	ldr	r3, [pc, #112]	@ (8002af4 <MX_ADC1_Init+0x98>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002a88:	4b1a      	ldr	r3, [pc, #104]	@ (8002af4 <MX_ADC1_Init+0x98>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a8e:	4b19      	ldr	r3, [pc, #100]	@ (8002af4 <MX_ADC1_Init+0x98>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a96:	4b17      	ldr	r3, [pc, #92]	@ (8002af4 <MX_ADC1_Init+0x98>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a9c:	4b15      	ldr	r3, [pc, #84]	@ (8002af4 <MX_ADC1_Init+0x98>)
 8002a9e:	4a17      	ldr	r2, [pc, #92]	@ (8002afc <MX_ADC1_Init+0xa0>)
 8002aa0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002aa2:	4b14      	ldr	r3, [pc, #80]	@ (8002af4 <MX_ADC1_Init+0x98>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002aa8:	4b12      	ldr	r3, [pc, #72]	@ (8002af4 <MX_ADC1_Init+0x98>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002aae:	4b11      	ldr	r3, [pc, #68]	@ (8002af4 <MX_ADC1_Init+0x98>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8002af4 <MX_ADC1_Init+0x98>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002abc:	480d      	ldr	r0, [pc, #52]	@ (8002af4 <MX_ADC1_Init+0x98>)
 8002abe:	f000 feb7 	bl	8003830 <HAL_ADC_Init>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002ac8:	f000 fb50 	bl	800316c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002acc:	2309      	movs	r3, #9
 8002ace:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ad8:	463b      	mov	r3, r7
 8002ada:	4619      	mov	r1, r3
 8002adc:	4805      	ldr	r0, [pc, #20]	@ (8002af4 <MX_ADC1_Init+0x98>)
 8002ade:	f001 f837 	bl	8003b50 <HAL_ADC_ConfigChannel>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002ae8:	f000 fb40 	bl	800316c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002aec:	bf00      	nop
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	20000088 	.word	0x20000088
 8002af8:	40012000 	.word	0x40012000
 8002afc:	0f000001 	.word	0x0f000001

08002b00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08e      	sub	sp, #56	@ 0x38
 8002b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	605a      	str	r2, [r3, #4]
 8002b10:	609a      	str	r2, [r3, #8]
 8002b12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b14:	f107 0320 	add.w	r3, r7, #32
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	60da      	str	r2, [r3, #12]
 8002b2a:	611a      	str	r2, [r3, #16]
 8002b2c:	615a      	str	r2, [r3, #20]
 8002b2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b30:	4b2d      	ldr	r3, [pc, #180]	@ (8002be8 <MX_TIM2_Init+0xe8>)
 8002b32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002b36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8002b38:	4b2b      	ldr	r3, [pc, #172]	@ (8002be8 <MX_TIM2_Init+0xe8>)
 8002b3a:	220f      	movs	r2, #15
 8002b3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b3e:	4b2a      	ldr	r3, [pc, #168]	@ (8002be8 <MX_TIM2_Init+0xe8>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8002b44:	4b28      	ldr	r3, [pc, #160]	@ (8002be8 <MX_TIM2_Init+0xe8>)
 8002b46:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002b4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b4c:	4b26      	ldr	r3, [pc, #152]	@ (8002be8 <MX_TIM2_Init+0xe8>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b52:	4b25      	ldr	r3, [pc, #148]	@ (8002be8 <MX_TIM2_Init+0xe8>)
 8002b54:	2280      	movs	r2, #128	@ 0x80
 8002b56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b58:	4823      	ldr	r0, [pc, #140]	@ (8002be8 <MX_TIM2_Init+0xe8>)
 8002b5a:	f002 fa21 	bl	8004fa0 <HAL_TIM_Base_Init>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002b64:	f000 fb02 	bl	800316c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b72:	4619      	mov	r1, r3
 8002b74:	481c      	ldr	r0, [pc, #112]	@ (8002be8 <MX_TIM2_Init+0xe8>)
 8002b76:	f002 fdf3 	bl	8005760 <HAL_TIM_ConfigClockSource>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002b80:	f000 faf4 	bl	800316c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002b84:	4818      	ldr	r0, [pc, #96]	@ (8002be8 <MX_TIM2_Init+0xe8>)
 8002b86:	f002 fb17 	bl	80051b8 <HAL_TIM_PWM_Init>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002b90:	f000 faec 	bl	800316c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b94:	2300      	movs	r3, #0
 8002b96:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b9c:	f107 0320 	add.w	r3, r7, #32
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4811      	ldr	r0, [pc, #68]	@ (8002be8 <MX_TIM2_Init+0xe8>)
 8002ba4:	f003 f998 	bl	8005ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002bae:	f000 fadd 	bl	800316c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bb2:	2360      	movs	r3, #96	@ 0x60
 8002bb4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8002bb6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002bba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bc4:	1d3b      	adds	r3, r7, #4
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4807      	ldr	r0, [pc, #28]	@ (8002be8 <MX_TIM2_Init+0xe8>)
 8002bcc:	f002 fd06 	bl	80055dc <HAL_TIM_PWM_ConfigChannel>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002bd6:	f000 fac9 	bl	800316c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002bda:	4803      	ldr	r0, [pc, #12]	@ (8002be8 <MX_TIM2_Init+0xe8>)
 8002bdc:	f000 fb8a 	bl	80032f4 <HAL_TIM_MspPostInit>

}
 8002be0:	bf00      	nop
 8002be2:	3738      	adds	r7, #56	@ 0x38
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	200000d0 	.word	0x200000d0

08002bec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08e      	sub	sp, #56	@ 0x38
 8002bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bf2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	605a      	str	r2, [r3, #4]
 8002bfc:	609a      	str	r2, [r3, #8]
 8002bfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c00:	f107 0320 	add.w	r3, r7, #32
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c0a:	1d3b      	adds	r3, r7, #4
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	611a      	str	r2, [r3, #16]
 8002c18:	615a      	str	r2, [r3, #20]
 8002c1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c1c:	4b32      	ldr	r3, [pc, #200]	@ (8002ce8 <MX_TIM3_Init+0xfc>)
 8002c1e:	4a33      	ldr	r2, [pc, #204]	@ (8002cec <MX_TIM3_Init+0x100>)
 8002c20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160-1;
 8002c22:	4b31      	ldr	r3, [pc, #196]	@ (8002ce8 <MX_TIM3_Init+0xfc>)
 8002c24:	229f      	movs	r2, #159	@ 0x9f
 8002c26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c28:	4b2f      	ldr	r3, [pc, #188]	@ (8002ce8 <MX_TIM3_Init+0xfc>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002c2e:	4b2e      	ldr	r3, [pc, #184]	@ (8002ce8 <MX_TIM3_Init+0xfc>)
 8002c30:	2263      	movs	r2, #99	@ 0x63
 8002c32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c34:	4b2c      	ldr	r3, [pc, #176]	@ (8002ce8 <MX_TIM3_Init+0xfc>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c3a:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce8 <MX_TIM3_Init+0xfc>)
 8002c3c:	2280      	movs	r2, #128	@ 0x80
 8002c3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c40:	4829      	ldr	r0, [pc, #164]	@ (8002ce8 <MX_TIM3_Init+0xfc>)
 8002c42:	f002 f9ad 	bl	8004fa0 <HAL_TIM_Base_Init>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8002c4c:	f000 fa8e 	bl	800316c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c54:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4822      	ldr	r0, [pc, #136]	@ (8002ce8 <MX_TIM3_Init+0xfc>)
 8002c5e:	f002 fd7f 	bl	8005760 <HAL_TIM_ConfigClockSource>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8002c68:	f000 fa80 	bl	800316c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c6c:	481e      	ldr	r0, [pc, #120]	@ (8002ce8 <MX_TIM3_Init+0xfc>)
 8002c6e:	f002 faa3 	bl	80051b8 <HAL_TIM_PWM_Init>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002c78:	f000 fa78 	bl	800316c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c80:	2300      	movs	r3, #0
 8002c82:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c84:	f107 0320 	add.w	r3, r7, #32
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4817      	ldr	r0, [pc, #92]	@ (8002ce8 <MX_TIM3_Init+0xfc>)
 8002c8c:	f003 f924 	bl	8005ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8002c96:	f000 fa69 	bl	800316c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c9a:	2360      	movs	r3, #96	@ 0x60
 8002c9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10-1;
 8002c9e:	2309      	movs	r3, #9
 8002ca0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002caa:	1d3b      	adds	r3, r7, #4
 8002cac:	2200      	movs	r2, #0
 8002cae:	4619      	mov	r1, r3
 8002cb0:	480d      	ldr	r0, [pc, #52]	@ (8002ce8 <MX_TIM3_Init+0xfc>)
 8002cb2:	f002 fc93 	bl	80055dc <HAL_TIM_PWM_ConfigChannel>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002cbc:	f000 fa56 	bl	800316c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002cc4:	1d3b      	adds	r3, r7, #4
 8002cc6:	2208      	movs	r2, #8
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4807      	ldr	r0, [pc, #28]	@ (8002ce8 <MX_TIM3_Init+0xfc>)
 8002ccc:	f002 fc86 	bl	80055dc <HAL_TIM_PWM_ConfigChannel>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002cd6:	f000 fa49 	bl	800316c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002cda:	4803      	ldr	r0, [pc, #12]	@ (8002ce8 <MX_TIM3_Init+0xfc>)
 8002cdc:	f000 fb0a 	bl	80032f4 <HAL_TIM_MspPostInit>

}
 8002ce0:	bf00      	nop
 8002ce2:	3738      	adds	r7, #56	@ 0x38
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000118 	.word	0x20000118
 8002cec:	40000400 	.word	0x40000400

08002cf0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cf6:	f107 0308 	add.w	r3, r7, #8
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d04:	463b      	mov	r3, r7
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002d84 <MX_TIM5_Init+0x94>)
 8002d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8002d88 <MX_TIM5_Init+0x98>)
 8002d10:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16000-1;
 8002d12:	4b1c      	ldr	r3, [pc, #112]	@ (8002d84 <MX_TIM5_Init+0x94>)
 8002d14:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8002d18:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002d84 <MX_TIM5_Init+0x94>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8002d20:	4b18      	ldr	r3, [pc, #96]	@ (8002d84 <MX_TIM5_Init+0x94>)
 8002d22:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002d26:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d28:	4b16      	ldr	r3, [pc, #88]	@ (8002d84 <MX_TIM5_Init+0x94>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d2e:	4b15      	ldr	r3, [pc, #84]	@ (8002d84 <MX_TIM5_Init+0x94>)
 8002d30:	2280      	movs	r2, #128	@ 0x80
 8002d32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002d34:	4813      	ldr	r0, [pc, #76]	@ (8002d84 <MX_TIM5_Init+0x94>)
 8002d36:	f002 f933 	bl	8004fa0 <HAL_TIM_Base_Init>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002d40:	f000 fa14 	bl	800316c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002d4a:	f107 0308 	add.w	r3, r7, #8
 8002d4e:	4619      	mov	r1, r3
 8002d50:	480c      	ldr	r0, [pc, #48]	@ (8002d84 <MX_TIM5_Init+0x94>)
 8002d52:	f002 fd05 	bl	8005760 <HAL_TIM_ConfigClockSource>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002d5c:	f000 fa06 	bl	800316c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d60:	2300      	movs	r3, #0
 8002d62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d64:	2300      	movs	r3, #0
 8002d66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002d68:	463b      	mov	r3, r7
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4805      	ldr	r0, [pc, #20]	@ (8002d84 <MX_TIM5_Init+0x94>)
 8002d6e:	f003 f8b3 	bl	8005ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002d78:	f000 f9f8 	bl	800316c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002d7c:	bf00      	nop
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20000160 	.word	0x20000160
 8002d88:	40000c00 	.word	0x40000c00

08002d8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d90:	4b11      	ldr	r3, [pc, #68]	@ (8002dd8 <MX_USART1_UART_Init+0x4c>)
 8002d92:	4a12      	ldr	r2, [pc, #72]	@ (8002ddc <MX_USART1_UART_Init+0x50>)
 8002d94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002d96:	4b10      	ldr	r3, [pc, #64]	@ (8002dd8 <MX_USART1_UART_Init+0x4c>)
 8002d98:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002d9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd8 <MX_USART1_UART_Init+0x4c>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002da4:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd8 <MX_USART1_UART_Init+0x4c>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002daa:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd8 <MX_USART1_UART_Init+0x4c>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002db0:	4b09      	ldr	r3, [pc, #36]	@ (8002dd8 <MX_USART1_UART_Init+0x4c>)
 8002db2:	220c      	movs	r2, #12
 8002db4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002db6:	4b08      	ldr	r3, [pc, #32]	@ (8002dd8 <MX_USART1_UART_Init+0x4c>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dbc:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <MX_USART1_UART_Init+0x4c>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002dc2:	4805      	ldr	r0, [pc, #20]	@ (8002dd8 <MX_USART1_UART_Init+0x4c>)
 8002dc4:	f003 f90a 	bl	8005fdc <HAL_UART_Init>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002dce:	f000 f9cd 	bl	800316c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	200001a8 	.word	0x200001a8
 8002ddc:	40011000 	.word	0x40011000

08002de0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002de4:	4b11      	ldr	r3, [pc, #68]	@ (8002e2c <MX_USART2_UART_Init+0x4c>)
 8002de6:	4a12      	ldr	r2, [pc, #72]	@ (8002e30 <MX_USART2_UART_Init+0x50>)
 8002de8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002dea:	4b10      	ldr	r3, [pc, #64]	@ (8002e2c <MX_USART2_UART_Init+0x4c>)
 8002dec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002df0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002df2:	4b0e      	ldr	r3, [pc, #56]	@ (8002e2c <MX_USART2_UART_Init+0x4c>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002df8:	4b0c      	ldr	r3, [pc, #48]	@ (8002e2c <MX_USART2_UART_Init+0x4c>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8002e2c <MX_USART2_UART_Init+0x4c>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e04:	4b09      	ldr	r3, [pc, #36]	@ (8002e2c <MX_USART2_UART_Init+0x4c>)
 8002e06:	220c      	movs	r2, #12
 8002e08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e0a:	4b08      	ldr	r3, [pc, #32]	@ (8002e2c <MX_USART2_UART_Init+0x4c>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e10:	4b06      	ldr	r3, [pc, #24]	@ (8002e2c <MX_USART2_UART_Init+0x4c>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e16:	4805      	ldr	r0, [pc, #20]	@ (8002e2c <MX_USART2_UART_Init+0x4c>)
 8002e18:	f003 f8e0 	bl	8005fdc <HAL_UART_Init>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e22:	f000 f9a3 	bl	800316c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e26:	bf00      	nop
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	200001ec 	.word	0x200001ec
 8002e30:	40004400 	.word	0x40004400

08002e34 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002e38:	4b11      	ldr	r3, [pc, #68]	@ (8002e80 <MX_USART6_UART_Init+0x4c>)
 8002e3a:	4a12      	ldr	r2, [pc, #72]	@ (8002e84 <MX_USART6_UART_Init+0x50>)
 8002e3c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002e3e:	4b10      	ldr	r3, [pc, #64]	@ (8002e80 <MX_USART6_UART_Init+0x4c>)
 8002e40:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002e44:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002e46:	4b0e      	ldr	r3, [pc, #56]	@ (8002e80 <MX_USART6_UART_Init+0x4c>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e80 <MX_USART6_UART_Init+0x4c>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002e52:	4b0b      	ldr	r3, [pc, #44]	@ (8002e80 <MX_USART6_UART_Init+0x4c>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002e58:	4b09      	ldr	r3, [pc, #36]	@ (8002e80 <MX_USART6_UART_Init+0x4c>)
 8002e5a:	220c      	movs	r2, #12
 8002e5c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e5e:	4b08      	ldr	r3, [pc, #32]	@ (8002e80 <MX_USART6_UART_Init+0x4c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e64:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <MX_USART6_UART_Init+0x4c>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002e6a:	4805      	ldr	r0, [pc, #20]	@ (8002e80 <MX_USART6_UART_Init+0x4c>)
 8002e6c:	f003 f8b6 	bl	8005fdc <HAL_UART_Init>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002e76:	f000 f979 	bl	800316c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000230 	.word	0x20000230
 8002e84:	40011400 	.word	0x40011400

08002e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	@ 0x28
 8002e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8e:	f107 0314 	add.w	r3, r7, #20
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	605a      	str	r2, [r3, #4]
 8002e98:	609a      	str	r2, [r3, #8]
 8002e9a:	60da      	str	r2, [r3, #12]
 8002e9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	4b4e      	ldr	r3, [pc, #312]	@ (8002fdc <MX_GPIO_Init+0x154>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea6:	4a4d      	ldr	r2, [pc, #308]	@ (8002fdc <MX_GPIO_Init+0x154>)
 8002ea8:	f043 0304 	orr.w	r3, r3, #4
 8002eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eae:	4b4b      	ldr	r3, [pc, #300]	@ (8002fdc <MX_GPIO_Init+0x154>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	4b47      	ldr	r3, [pc, #284]	@ (8002fdc <MX_GPIO_Init+0x154>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	4a46      	ldr	r2, [pc, #280]	@ (8002fdc <MX_GPIO_Init+0x154>)
 8002ec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eca:	4b44      	ldr	r3, [pc, #272]	@ (8002fdc <MX_GPIO_Init+0x154>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	4b40      	ldr	r3, [pc, #256]	@ (8002fdc <MX_GPIO_Init+0x154>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	4a3f      	ldr	r2, [pc, #252]	@ (8002fdc <MX_GPIO_Init+0x154>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ee6:	4b3d      	ldr	r3, [pc, #244]	@ (8002fdc <MX_GPIO_Init+0x154>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	607b      	str	r3, [r7, #4]
 8002ef6:	4b39      	ldr	r3, [pc, #228]	@ (8002fdc <MX_GPIO_Init+0x154>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	4a38      	ldr	r2, [pc, #224]	@ (8002fdc <MX_GPIO_Init+0x154>)
 8002efc:	f043 0302 	orr.w	r3, r3, #2
 8002f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f02:	4b36      	ldr	r3, [pc, #216]	@ (8002fdc <MX_GPIO_Init+0x154>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	607b      	str	r3, [r7, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|BLU_Pin|GRN_Pin|RFD_Pin
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f649 1120 	movw	r1, #39200	@ 0x9920
 8002f14:	4832      	ldr	r0, [pc, #200]	@ (8002fe0 <MX_GPIO_Init+0x158>)
 8002f16:	f001 fb79 	bl	800460c <HAL_GPIO_WritePin>
                          |DIGIT_A3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIGIT_B0_Pin|DIGIT_B3_Pin|DIGIT_B2_Pin|DIGIT_B1_Pin, GPIO_PIN_RESET);
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f44f 5187 	mov.w	r1, #4320	@ 0x10e0
 8002f20:	4830      	ldr	r0, [pc, #192]	@ (8002fe4 <MX_GPIO_Init+0x15c>)
 8002f22:	f001 fb73 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIGIT_A2_Pin|DIGIT_A1_Pin|DIGIT_A0_Pin, GPIO_PIN_RESET);
 8002f26:	2200      	movs	r2, #0
 8002f28:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8002f2c:	482e      	ldr	r0, [pc, #184]	@ (8002fe8 <MX_GPIO_Init+0x160>)
 8002f2e:	f001 fb6d 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002f32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f38:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f42:	f107 0314 	add.w	r3, r7, #20
 8002f46:	4619      	mov	r1, r3
 8002f48:	4827      	ldr	r0, [pc, #156]	@ (8002fe8 <MX_GPIO_Init+0x160>)
 8002f4a:	f001 f9c3 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin BLU_Pin GRN_Pin RFD_Pin
                           DIGIT_A3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|BLU_Pin|GRN_Pin|RFD_Pin
 8002f4e:	f649 1320 	movw	r3, #39200	@ 0x9920
 8002f52:	617b      	str	r3, [r7, #20]
                          |DIGIT_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f54:	2301      	movs	r3, #1
 8002f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f60:	f107 0314 	add.w	r3, r7, #20
 8002f64:	4619      	mov	r1, r3
 8002f66:	481e      	ldr	r0, [pc, #120]	@ (8002fe0 <MX_GPIO_Init+0x158>)
 8002f68:	f001 f9b4 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGIT_B0_Pin DIGIT_B3_Pin DIGIT_B2_Pin DIGIT_B1_Pin */
  GPIO_InitStruct.Pin = DIGIT_B0_Pin|DIGIT_B3_Pin|DIGIT_B2_Pin|DIGIT_B1_Pin;
 8002f6c:	f44f 5387 	mov.w	r3, #4320	@ 0x10e0
 8002f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f72:	2301      	movs	r3, #1
 8002f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7e:	f107 0314 	add.w	r3, r7, #20
 8002f82:	4619      	mov	r1, r3
 8002f84:	4817      	ldr	r0, [pc, #92]	@ (8002fe4 <MX_GPIO_Init+0x15c>)
 8002f86:	f001 f9a5 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGIT_A2_Pin DIGIT_A1_Pin DIGIT_A0_Pin */
  GPIO_InitStruct.Pin = DIGIT_A2_Pin|DIGIT_A1_Pin|DIGIT_A0_Pin;
 8002f8a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f90:	2301      	movs	r3, #1
 8002f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f9c:	f107 0314 	add.w	r3, r7, #20
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4811      	ldr	r0, [pc, #68]	@ (8002fe8 <MX_GPIO_Init+0x160>)
 8002fa4:	f001 f996 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RPM_Tick_Pin */
  GPIO_InitStruct.Pin = RPM_Tick_Pin;
 8002fa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPM_Tick_GPIO_Port, &GPIO_InitStruct);
 8002fb8:	f107 0314 	add.w	r3, r7, #20
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4809      	ldr	r0, [pc, #36]	@ (8002fe4 <MX_GPIO_Init+0x15c>)
 8002fc0:	f001 f988 	bl	80042d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	2017      	movs	r0, #23
 8002fca:	f001 f8ba 	bl	8004142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002fce:	2017      	movs	r0, #23
 8002fd0:	f001 f8d3 	bl	800417a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002fd4:	bf00      	nop
 8002fd6:	3728      	adds	r7, #40	@ 0x28
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	40020000 	.word	0x40020000
 8002fe4:	40020400 	.word	0x40020400
 8002fe8:	40020800 	.word	0x40020800

08002fec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	80fb      	strh	r3, [r7, #6]


	if(GPIO_Pin == RPM_Tick_Pin)
 8002ff6:	88fb      	ldrh	r3, [r7, #6]
 8002ff8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ffc:	d104      	bne.n	8003008 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		rpm_tick_count += 1;
 8002ffe:	4b05      	ldr	r3, [pc, #20]	@ (8003014 <HAL_GPIO_EXTI_Callback+0x28>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3301      	adds	r3, #1
 8003004:	4a03      	ldr	r2, [pc, #12]	@ (8003014 <HAL_GPIO_EXTI_Callback+0x28>)
 8003006:	6013      	str	r3, [r2, #0]
	}


}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	20000278 	.word	0x20000278

08003018 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART6)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a0b      	ldr	r2, [pc, #44]	@ (8003054 <HAL_UART_RxCpltCallback+0x3c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d108      	bne.n	800303c <HAL_UART_RxCpltCallback+0x24>
	{
		HAL_UART_Transmit(&huart6, &byte, 1, 100);
 800302a:	2364      	movs	r3, #100	@ 0x64
 800302c:	2201      	movs	r2, #1
 800302e:	490a      	ldr	r1, [pc, #40]	@ (8003058 <HAL_UART_RxCpltCallback+0x40>)
 8003030:	480a      	ldr	r0, [pc, #40]	@ (800305c <HAL_UART_RxCpltCallback+0x44>)
 8003032:	f003 f820 	bl	8006076 <HAL_UART_Transmit>
		rcv_intpt_flag = 1;
 8003036:	4b0a      	ldr	r3, [pc, #40]	@ (8003060 <HAL_UART_RxCpltCallback+0x48>)
 8003038:	2201      	movs	r2, #1
 800303a:	701a      	strb	r2, [r3, #0]
	}

	if (huart->Instance == USART1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a08      	ldr	r2, [pc, #32]	@ (8003064 <HAL_UART_RxCpltCallback+0x4c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d102      	bne.n	800304c <HAL_UART_RxCpltCallback+0x34>
	{
//		if (distance != 0){
			us100_Rx_flag = 01;
 8003046:	4b08      	ldr	r3, [pc, #32]	@ (8003068 <HAL_UART_RxCpltCallback+0x50>)
 8003048:	2201      	movs	r2, #1
 800304a:	701a      	strb	r2, [r3, #0]
//		}
	}
}
 800304c:	bf00      	nop
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40011400 	.word	0x40011400
 8003058:	20000084 	.word	0x20000084
 800305c:	20000230 	.word	0x20000230
 8003060:	20000274 	.word	0x20000274
 8003064:	40011000 	.word	0x40011000
 8003068:	20000275 	.word	0x20000275

0800306c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800306c:	b5b0      	push	{r4, r5, r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM5)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a32      	ldr	r2, [pc, #200]	@ (8003144 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d15e      	bne.n	800313c <HAL_TIM_PeriodElapsedCallback+0xd0>
	{
		seconds += 1;
 800307e:	4b32      	ldr	r3, [pc, #200]	@ (8003148 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	3301      	adds	r3, #1
 8003084:	4a30      	ldr	r2, [pc, #192]	@ (8003148 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003086:	6013      	str	r3, [r2, #0]
		sec += 1;
 8003088:	4b30      	ldr	r3, [pc, #192]	@ (800314c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3301      	adds	r3, #1
 800308e:	4a2f      	ldr	r2, [pc, #188]	@ (800314c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003090:	6013      	str	r3, [r2, #0]
		clock_seccs += 1; // for RPM
 8003092:	4b2f      	ldr	r3, [pc, #188]	@ (8003150 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	3301      	adds	r3, #1
 8003098:	4a2d      	ldr	r2, [pc, #180]	@ (8003150 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800309a:	6013      	str	r3, [r2, #0]
		clock_secs += 1; // this could be a variable for seconds etc.
 800309c:	4b2d      	ldr	r3, [pc, #180]	@ (8003154 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003154 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80030a4:	6013      	str	r3, [r2, #0]

		if(sec % 2 == 0) {
 80030a6:	4b29      	ldr	r3, [pc, #164]	@ (800314c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d104      	bne.n	80030bc <HAL_TIM_PeriodElapsedCallback+0x50>
			clock_hours++;
 80030b2:	4b29      	ldr	r3, [pc, #164]	@ (8003158 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	3301      	adds	r3, #1
 80030b8:	4a27      	ldr	r2, [pc, #156]	@ (8003158 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80030ba:	6013      	str	r3, [r2, #0]
		}

		if(clock_hours >= 24) {
 80030bc:	4b26      	ldr	r3, [pc, #152]	@ (8003158 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b17      	cmp	r3, #23
 80030c2:	dd05      	ble.n	80030d0 <HAL_TIM_PeriodElapsedCallback+0x64>
			clock_hours = 0;
 80030c4:	4b24      	ldr	r3, [pc, #144]	@ (8003158 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
			sec = 0;
 80030ca:	4b20      	ldr	r3, [pc, #128]	@ (800314c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
		}

		// RPM Calculation
		if (clock_seccs == 2)
 80030d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003150 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d131      	bne.n	800313c <HAL_TIM_PeriodElapsedCallback+0xd0>
		{
			rpm = rpm_tick_count / 20;
 80030d8:	4b20      	ldr	r3, [pc, #128]	@ (800315c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a20      	ldr	r2, [pc, #128]	@ (8003160 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80030de:	fb82 1203 	smull	r1, r2, r2, r3
 80030e2:	10d2      	asrs	r2, r2, #3
 80030e4:	17db      	asrs	r3, r3, #31
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fd fa23 	bl	8000534 <__aeabi_i2d>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	491c      	ldr	r1, [pc, #112]	@ (8003164 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80030f4:	e9c1 2300 	strd	r2, r3, [r1]
			rpm = (rpm/clock_seccs)*60;
 80030f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003164 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80030fa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80030fe:	4b14      	ldr	r3, [pc, #80]	@ (8003150 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7fd fa16 	bl	8000534 <__aeabi_i2d>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4620      	mov	r0, r4
 800310e:	4629      	mov	r1, r5
 8003110:	f7fd fba4 	bl	800085c <__aeabi_ddiv>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	4b11      	ldr	r3, [pc, #68]	@ (8003168 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003122:	f7fd fa71 	bl	8000608 <__aeabi_dmul>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	490e      	ldr	r1, [pc, #56]	@ (8003164 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800312c:	e9c1 2300 	strd	r2, r3, [r1]
			clock_seccs = 0;
 8003130:	4b07      	ldr	r3, [pc, #28]	@ (8003150 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
			rpm_tick_count = 0;
 8003136:	4b09      	ldr	r3, [pc, #36]	@ (800315c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800313c:	bf00      	nop
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bdb0      	pop	{r4, r5, r7, pc}
 8003144:	40000c00 	.word	0x40000c00
 8003148:	20000290 	.word	0x20000290
 800314c:	20000294 	.word	0x20000294
 8003150:	20000298 	.word	0x20000298
 8003154:	20000288 	.word	0x20000288
 8003158:	2000028c 	.word	0x2000028c
 800315c:	20000278 	.word	0x20000278
 8003160:	66666667 	.word	0x66666667
 8003164:	20000280 	.word	0x20000280
 8003168:	404e0000 	.word	0x404e0000

0800316c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003170:	b672      	cpsid	i
}
 8003172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003174:	bf00      	nop
 8003176:	e7fd      	b.n	8003174 <Error_Handler+0x8>

08003178 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	607b      	str	r3, [r7, #4]
 8003182:	4b10      	ldr	r3, [pc, #64]	@ (80031c4 <HAL_MspInit+0x4c>)
 8003184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003186:	4a0f      	ldr	r2, [pc, #60]	@ (80031c4 <HAL_MspInit+0x4c>)
 8003188:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800318c:	6453      	str	r3, [r2, #68]	@ 0x44
 800318e:	4b0d      	ldr	r3, [pc, #52]	@ (80031c4 <HAL_MspInit+0x4c>)
 8003190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003192:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003196:	607b      	str	r3, [r7, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	603b      	str	r3, [r7, #0]
 800319e:	4b09      	ldr	r3, [pc, #36]	@ (80031c4 <HAL_MspInit+0x4c>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a2:	4a08      	ldr	r2, [pc, #32]	@ (80031c4 <HAL_MspInit+0x4c>)
 80031a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80031aa:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <HAL_MspInit+0x4c>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80031b6:	2007      	movs	r0, #7
 80031b8:	f000 ffb8 	bl	800412c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031bc:	bf00      	nop
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40023800 	.word	0x40023800

080031c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08a      	sub	sp, #40	@ 0x28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d0:	f107 0314 	add.w	r3, r7, #20
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a17      	ldr	r2, [pc, #92]	@ (8003244 <HAL_ADC_MspInit+0x7c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d127      	bne.n	800323a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	4b16      	ldr	r3, [pc, #88]	@ (8003248 <HAL_ADC_MspInit+0x80>)
 80031f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f2:	4a15      	ldr	r2, [pc, #84]	@ (8003248 <HAL_ADC_MspInit+0x80>)
 80031f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80031fa:	4b13      	ldr	r3, [pc, #76]	@ (8003248 <HAL_ADC_MspInit+0x80>)
 80031fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	4b0f      	ldr	r3, [pc, #60]	@ (8003248 <HAL_ADC_MspInit+0x80>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320e:	4a0e      	ldr	r2, [pc, #56]	@ (8003248 <HAL_ADC_MspInit+0x80>)
 8003210:	f043 0302 	orr.w	r3, r3, #2
 8003214:	6313      	str	r3, [r2, #48]	@ 0x30
 8003216:	4b0c      	ldr	r3, [pc, #48]	@ (8003248 <HAL_ADC_MspInit+0x80>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003222:	2302      	movs	r3, #2
 8003224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003226:	2303      	movs	r3, #3
 8003228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322a:	2300      	movs	r3, #0
 800322c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322e:	f107 0314 	add.w	r3, r7, #20
 8003232:	4619      	mov	r1, r3
 8003234:	4805      	ldr	r0, [pc, #20]	@ (800324c <HAL_ADC_MspInit+0x84>)
 8003236:	f001 f84d 	bl	80042d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800323a:	bf00      	nop
 800323c:	3728      	adds	r7, #40	@ 0x28
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40012000 	.word	0x40012000
 8003248:	40023800 	.word	0x40023800
 800324c:	40020400 	.word	0x40020400

08003250 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003260:	d10e      	bne.n	8003280 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
 8003266:	4b20      	ldr	r3, [pc, #128]	@ (80032e8 <HAL_TIM_Base_MspInit+0x98>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326a:	4a1f      	ldr	r2, [pc, #124]	@ (80032e8 <HAL_TIM_Base_MspInit+0x98>)
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	6413      	str	r3, [r2, #64]	@ 0x40
 8003272:	4b1d      	ldr	r3, [pc, #116]	@ (80032e8 <HAL_TIM_Base_MspInit+0x98>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800327e:	e02e      	b.n	80032de <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a19      	ldr	r2, [pc, #100]	@ (80032ec <HAL_TIM_Base_MspInit+0x9c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d10e      	bne.n	80032a8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	4b16      	ldr	r3, [pc, #88]	@ (80032e8 <HAL_TIM_Base_MspInit+0x98>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003292:	4a15      	ldr	r2, [pc, #84]	@ (80032e8 <HAL_TIM_Base_MspInit+0x98>)
 8003294:	f043 0302 	orr.w	r3, r3, #2
 8003298:	6413      	str	r3, [r2, #64]	@ 0x40
 800329a:	4b13      	ldr	r3, [pc, #76]	@ (80032e8 <HAL_TIM_Base_MspInit+0x98>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	693b      	ldr	r3, [r7, #16]
}
 80032a6:	e01a      	b.n	80032de <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM5)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a10      	ldr	r2, [pc, #64]	@ (80032f0 <HAL_TIM_Base_MspInit+0xa0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d115      	bne.n	80032de <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	4b0c      	ldr	r3, [pc, #48]	@ (80032e8 <HAL_TIM_Base_MspInit+0x98>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ba:	4a0b      	ldr	r2, [pc, #44]	@ (80032e8 <HAL_TIM_Base_MspInit+0x98>)
 80032bc:	f043 0308 	orr.w	r3, r3, #8
 80032c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80032c2:	4b09      	ldr	r3, [pc, #36]	@ (80032e8 <HAL_TIM_Base_MspInit+0x98>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80032ce:	2200      	movs	r2, #0
 80032d0:	2100      	movs	r1, #0
 80032d2:	2032      	movs	r0, #50	@ 0x32
 80032d4:	f000 ff35 	bl	8004142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80032d8:	2032      	movs	r0, #50	@ 0x32
 80032da:	f000 ff4e 	bl	800417a <HAL_NVIC_EnableIRQ>
}
 80032de:	bf00      	nop
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40000400 	.word	0x40000400
 80032f0:	40000c00 	.word	0x40000c00

080032f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08a      	sub	sp, #40	@ 0x28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032fc:	f107 0314 	add.w	r3, r7, #20
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	60da      	str	r2, [r3, #12]
 800330a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003314:	d11e      	bne.n	8003354 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003316:	2300      	movs	r3, #0
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	4b31      	ldr	r3, [pc, #196]	@ (80033e0 <HAL_TIM_MspPostInit+0xec>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331e:	4a30      	ldr	r2, [pc, #192]	@ (80033e0 <HAL_TIM_MspPostInit+0xec>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	6313      	str	r3, [r2, #48]	@ 0x30
 8003326:	4b2e      	ldr	r3, [pc, #184]	@ (80033e0 <HAL_TIM_MspPostInit+0xec>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003332:	2301      	movs	r3, #1
 8003334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003336:	2302      	movs	r3, #2
 8003338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333a:	2300      	movs	r3, #0
 800333c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333e:	2300      	movs	r3, #0
 8003340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003342:	2301      	movs	r3, #1
 8003344:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003346:	f107 0314 	add.w	r3, r7, #20
 800334a:	4619      	mov	r1, r3
 800334c:	4825      	ldr	r0, [pc, #148]	@ (80033e4 <HAL_TIM_MspPostInit+0xf0>)
 800334e:	f000 ffc1 	bl	80042d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003352:	e040      	b.n	80033d6 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a23      	ldr	r2, [pc, #140]	@ (80033e8 <HAL_TIM_MspPostInit+0xf4>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d13b      	bne.n	80033d6 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	4b1f      	ldr	r3, [pc, #124]	@ (80033e0 <HAL_TIM_MspPostInit+0xec>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003366:	4a1e      	ldr	r2, [pc, #120]	@ (80033e0 <HAL_TIM_MspPostInit+0xec>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	6313      	str	r3, [r2, #48]	@ 0x30
 800336e:	4b1c      	ldr	r3, [pc, #112]	@ (80033e0 <HAL_TIM_MspPostInit+0xec>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	4b18      	ldr	r3, [pc, #96]	@ (80033e0 <HAL_TIM_MspPostInit+0xec>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	4a17      	ldr	r2, [pc, #92]	@ (80033e0 <HAL_TIM_MspPostInit+0xec>)
 8003384:	f043 0302 	orr.w	r3, r3, #2
 8003388:	6313      	str	r3, [r2, #48]	@ 0x30
 800338a:	4b15      	ldr	r3, [pc, #84]	@ (80033e0 <HAL_TIM_MspPostInit+0xec>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	60bb      	str	r3, [r7, #8]
 8003394:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003396:	2340      	movs	r3, #64	@ 0x40
 8003398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339a:	2302      	movs	r3, #2
 800339c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a2:	2300      	movs	r3, #0
 80033a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033a6:	2302      	movs	r3, #2
 80033a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033aa:	f107 0314 	add.w	r3, r7, #20
 80033ae:	4619      	mov	r1, r3
 80033b0:	480c      	ldr	r0, [pc, #48]	@ (80033e4 <HAL_TIM_MspPostInit+0xf0>)
 80033b2:	f000 ff8f 	bl	80042d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80033b6:	2301      	movs	r3, #1
 80033b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ba:	2302      	movs	r3, #2
 80033bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c2:	2300      	movs	r3, #0
 80033c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033c6:	2302      	movs	r3, #2
 80033c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ca:	f107 0314 	add.w	r3, r7, #20
 80033ce:	4619      	mov	r1, r3
 80033d0:	4806      	ldr	r0, [pc, #24]	@ (80033ec <HAL_TIM_MspPostInit+0xf8>)
 80033d2:	f000 ff7f 	bl	80042d4 <HAL_GPIO_Init>
}
 80033d6:	bf00      	nop
 80033d8:	3728      	adds	r7, #40	@ 0x28
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40023800 	.word	0x40023800
 80033e4:	40020000 	.word	0x40020000
 80033e8:	40000400 	.word	0x40000400
 80033ec:	40020400 	.word	0x40020400

080033f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08e      	sub	sp, #56	@ 0x38
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	60da      	str	r2, [r3, #12]
 8003406:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a53      	ldr	r2, [pc, #332]	@ (800355c <HAL_UART_MspInit+0x16c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d135      	bne.n	800347e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	623b      	str	r3, [r7, #32]
 8003416:	4b52      	ldr	r3, [pc, #328]	@ (8003560 <HAL_UART_MspInit+0x170>)
 8003418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341a:	4a51      	ldr	r2, [pc, #324]	@ (8003560 <HAL_UART_MspInit+0x170>)
 800341c:	f043 0310 	orr.w	r3, r3, #16
 8003420:	6453      	str	r3, [r2, #68]	@ 0x44
 8003422:	4b4f      	ldr	r3, [pc, #316]	@ (8003560 <HAL_UART_MspInit+0x170>)
 8003424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	623b      	str	r3, [r7, #32]
 800342c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	61fb      	str	r3, [r7, #28]
 8003432:	4b4b      	ldr	r3, [pc, #300]	@ (8003560 <HAL_UART_MspInit+0x170>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003436:	4a4a      	ldr	r2, [pc, #296]	@ (8003560 <HAL_UART_MspInit+0x170>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	6313      	str	r3, [r2, #48]	@ 0x30
 800343e:	4b48      	ldr	r3, [pc, #288]	@ (8003560 <HAL_UART_MspInit+0x170>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	61fb      	str	r3, [r7, #28]
 8003448:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800344a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800344e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003450:	2302      	movs	r3, #2
 8003452:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003454:	2300      	movs	r3, #0
 8003456:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003458:	2303      	movs	r3, #3
 800345a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800345c:	2307      	movs	r3, #7
 800345e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003460:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003464:	4619      	mov	r1, r3
 8003466:	483f      	ldr	r0, [pc, #252]	@ (8003564 <HAL_UART_MspInit+0x174>)
 8003468:	f000 ff34 	bl	80042d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800346c:	2200      	movs	r2, #0
 800346e:	2100      	movs	r1, #0
 8003470:	2025      	movs	r0, #37	@ 0x25
 8003472:	f000 fe66 	bl	8004142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003476:	2025      	movs	r0, #37	@ 0x25
 8003478:	f000 fe7f 	bl	800417a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800347c:	e06a      	b.n	8003554 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART2)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a39      	ldr	r2, [pc, #228]	@ (8003568 <HAL_UART_MspInit+0x178>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d12c      	bne.n	80034e2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003488:	2300      	movs	r3, #0
 800348a:	61bb      	str	r3, [r7, #24]
 800348c:	4b34      	ldr	r3, [pc, #208]	@ (8003560 <HAL_UART_MspInit+0x170>)
 800348e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003490:	4a33      	ldr	r2, [pc, #204]	@ (8003560 <HAL_UART_MspInit+0x170>)
 8003492:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003496:	6413      	str	r3, [r2, #64]	@ 0x40
 8003498:	4b31      	ldr	r3, [pc, #196]	@ (8003560 <HAL_UART_MspInit+0x170>)
 800349a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a0:	61bb      	str	r3, [r7, #24]
 80034a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003560 <HAL_UART_MspInit+0x170>)
 80034aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003560 <HAL_UART_MspInit+0x170>)
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80034b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003560 <HAL_UART_MspInit+0x170>)
 80034b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80034c0:	230c      	movs	r3, #12
 80034c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c4:	2302      	movs	r3, #2
 80034c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c8:	2300      	movs	r3, #0
 80034ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034cc:	2300      	movs	r3, #0
 80034ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034d0:	2307      	movs	r3, #7
 80034d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034d8:	4619      	mov	r1, r3
 80034da:	4822      	ldr	r0, [pc, #136]	@ (8003564 <HAL_UART_MspInit+0x174>)
 80034dc:	f000 fefa 	bl	80042d4 <HAL_GPIO_Init>
}
 80034e0:	e038      	b.n	8003554 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART6)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a21      	ldr	r2, [pc, #132]	@ (800356c <HAL_UART_MspInit+0x17c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d133      	bne.n	8003554 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 80034ec:	2300      	movs	r3, #0
 80034ee:	613b      	str	r3, [r7, #16]
 80034f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003560 <HAL_UART_MspInit+0x170>)
 80034f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f4:	4a1a      	ldr	r2, [pc, #104]	@ (8003560 <HAL_UART_MspInit+0x170>)
 80034f6:	f043 0320 	orr.w	r3, r3, #32
 80034fa:	6453      	str	r3, [r2, #68]	@ 0x44
 80034fc:	4b18      	ldr	r3, [pc, #96]	@ (8003560 <HAL_UART_MspInit+0x170>)
 80034fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003508:	2300      	movs	r3, #0
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	4b14      	ldr	r3, [pc, #80]	@ (8003560 <HAL_UART_MspInit+0x170>)
 800350e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003510:	4a13      	ldr	r2, [pc, #76]	@ (8003560 <HAL_UART_MspInit+0x170>)
 8003512:	f043 0304 	orr.w	r3, r3, #4
 8003516:	6313      	str	r3, [r2, #48]	@ 0x30
 8003518:	4b11      	ldr	r3, [pc, #68]	@ (8003560 <HAL_UART_MspInit+0x170>)
 800351a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003524:	23c0      	movs	r3, #192	@ 0xc0
 8003526:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003528:	2302      	movs	r3, #2
 800352a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352c:	2300      	movs	r3, #0
 800352e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003530:	2303      	movs	r3, #3
 8003532:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003534:	2308      	movs	r3, #8
 8003536:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003538:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800353c:	4619      	mov	r1, r3
 800353e:	480c      	ldr	r0, [pc, #48]	@ (8003570 <HAL_UART_MspInit+0x180>)
 8003540:	f000 fec8 	bl	80042d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003544:	2200      	movs	r2, #0
 8003546:	2100      	movs	r1, #0
 8003548:	2047      	movs	r0, #71	@ 0x47
 800354a:	f000 fdfa 	bl	8004142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800354e:	2047      	movs	r0, #71	@ 0x47
 8003550:	f000 fe13 	bl	800417a <HAL_NVIC_EnableIRQ>
}
 8003554:	bf00      	nop
 8003556:	3738      	adds	r7, #56	@ 0x38
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40011000 	.word	0x40011000
 8003560:	40023800 	.word	0x40023800
 8003564:	40020000 	.word	0x40020000
 8003568:	40004400 	.word	0x40004400
 800356c:	40011400 	.word	0x40011400
 8003570:	40020800 	.word	0x40020800

08003574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003578:	bf00      	nop
 800357a:	e7fd      	b.n	8003578 <NMI_Handler+0x4>

0800357c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003580:	bf00      	nop
 8003582:	e7fd      	b.n	8003580 <HardFault_Handler+0x4>

08003584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003588:	bf00      	nop
 800358a:	e7fd      	b.n	8003588 <MemManage_Handler+0x4>

0800358c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003590:	bf00      	nop
 8003592:	e7fd      	b.n	8003590 <BusFault_Handler+0x4>

08003594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003598:	bf00      	nop
 800359a:	e7fd      	b.n	8003598 <UsageFault_Handler+0x4>

0800359c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035a0:	bf00      	nop
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035aa:	b480      	push	{r7}
 80035ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035ae:	bf00      	nop
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035bc:	bf00      	nop
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035ca:	f000 f8ed 	bl	80037a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RPM_Tick_Pin);
 80035d6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80035da:	f001 f831 	bl	8004640 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80035de:	bf00      	nop
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035e8:	4802      	ldr	r0, [pc, #8]	@ (80035f4 <USART1_IRQHandler+0x10>)
 80035ea:	f002 fe07 	bl	80061fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80035ee:	bf00      	nop
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	200001a8 	.word	0x200001a8

080035f8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80035fc:	4802      	ldr	r0, [pc, #8]	@ (8003608 <TIM5_IRQHandler+0x10>)
 80035fe:	f001 fee5 	bl	80053cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20000160 	.word	0x20000160

0800360c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003610:	4802      	ldr	r0, [pc, #8]	@ (800361c <USART6_IRQHandler+0x10>)
 8003612:	f002 fdf3 	bl	80061fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003616:	bf00      	nop
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	20000230 	.word	0x20000230

08003620 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003628:	4a14      	ldr	r2, [pc, #80]	@ (800367c <_sbrk+0x5c>)
 800362a:	4b15      	ldr	r3, [pc, #84]	@ (8003680 <_sbrk+0x60>)
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003634:	4b13      	ldr	r3, [pc, #76]	@ (8003684 <_sbrk+0x64>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d102      	bne.n	8003642 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800363c:	4b11      	ldr	r3, [pc, #68]	@ (8003684 <_sbrk+0x64>)
 800363e:	4a12      	ldr	r2, [pc, #72]	@ (8003688 <_sbrk+0x68>)
 8003640:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003642:	4b10      	ldr	r3, [pc, #64]	@ (8003684 <_sbrk+0x64>)
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4413      	add	r3, r2
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	429a      	cmp	r2, r3
 800364e:	d207      	bcs.n	8003660 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003650:	f003 fd64 	bl	800711c <__errno>
 8003654:	4603      	mov	r3, r0
 8003656:	220c      	movs	r2, #12
 8003658:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800365a:	f04f 33ff 	mov.w	r3, #4294967295
 800365e:	e009      	b.n	8003674 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003660:	4b08      	ldr	r3, [pc, #32]	@ (8003684 <_sbrk+0x64>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003666:	4b07      	ldr	r3, [pc, #28]	@ (8003684 <_sbrk+0x64>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4413      	add	r3, r2
 800366e:	4a05      	ldr	r2, [pc, #20]	@ (8003684 <_sbrk+0x64>)
 8003670:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003672:	68fb      	ldr	r3, [r7, #12]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	20018000 	.word	0x20018000
 8003680:	00000400 	.word	0x00000400
 8003684:	200002c0 	.word	0x200002c0
 8003688:	20000410 	.word	0x20000410

0800368c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003690:	4b06      	ldr	r3, [pc, #24]	@ (80036ac <SystemInit+0x20>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003696:	4a05      	ldr	r2, [pc, #20]	@ (80036ac <SystemInit+0x20>)
 8003698:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800369c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036a0:	bf00      	nop
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	e000ed00 	.word	0xe000ed00

080036b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80036b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036b4:	480d      	ldr	r0, [pc, #52]	@ (80036ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80036b6:	490e      	ldr	r1, [pc, #56]	@ (80036f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80036b8:	4a0e      	ldr	r2, [pc, #56]	@ (80036f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036bc:	e002      	b.n	80036c4 <LoopCopyDataInit>

080036be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036c2:	3304      	adds	r3, #4

080036c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036c8:	d3f9      	bcc.n	80036be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036ca:	4a0b      	ldr	r2, [pc, #44]	@ (80036f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80036cc:	4c0b      	ldr	r4, [pc, #44]	@ (80036fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80036ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036d0:	e001      	b.n	80036d6 <LoopFillZerobss>

080036d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036d4:	3204      	adds	r2, #4

080036d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036d8:	d3fb      	bcc.n	80036d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036da:	f7ff ffd7 	bl	800368c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036de:	f003 fd23 	bl	8007128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036e2:	f7fe f849 	bl	8001778 <main>
  bx  lr    
 80036e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80036e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80036ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036f0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80036f4:	08007e94 	.word	0x08007e94
  ldr r2, =_sbss
 80036f8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80036fc:	20000410 	.word	0x20000410

08003700 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003700:	e7fe      	b.n	8003700 <ADC_IRQHandler>
	...

08003704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003708:	4b0e      	ldr	r3, [pc, #56]	@ (8003744 <HAL_Init+0x40>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a0d      	ldr	r2, [pc, #52]	@ (8003744 <HAL_Init+0x40>)
 800370e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003712:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003714:	4b0b      	ldr	r3, [pc, #44]	@ (8003744 <HAL_Init+0x40>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a0a      	ldr	r2, [pc, #40]	@ (8003744 <HAL_Init+0x40>)
 800371a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800371e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003720:	4b08      	ldr	r3, [pc, #32]	@ (8003744 <HAL_Init+0x40>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a07      	ldr	r2, [pc, #28]	@ (8003744 <HAL_Init+0x40>)
 8003726:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800372a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800372c:	2003      	movs	r0, #3
 800372e:	f000 fcfd 	bl	800412c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003732:	2000      	movs	r0, #0
 8003734:	f000 f808 	bl	8003748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003738:	f7ff fd1e 	bl	8003178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40023c00 	.word	0x40023c00

08003748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003750:	4b12      	ldr	r3, [pc, #72]	@ (800379c <HAL_InitTick+0x54>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	4b12      	ldr	r3, [pc, #72]	@ (80037a0 <HAL_InitTick+0x58>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	4619      	mov	r1, r3
 800375a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800375e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003762:	fbb2 f3f3 	udiv	r3, r2, r3
 8003766:	4618      	mov	r0, r3
 8003768:	f000 fd15 	bl	8004196 <HAL_SYSTICK_Config>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e00e      	b.n	8003794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b0f      	cmp	r3, #15
 800377a:	d80a      	bhi.n	8003792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800377c:	2200      	movs	r2, #0
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	f04f 30ff 	mov.w	r0, #4294967295
 8003784:	f000 fcdd 	bl	8004142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003788:	4a06      	ldr	r2, [pc, #24]	@ (80037a4 <HAL_InitTick+0x5c>)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	e000      	b.n	8003794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
}
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	20000008 	.word	0x20000008
 80037a0:	20000010 	.word	0x20000010
 80037a4:	2000000c 	.word	0x2000000c

080037a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037ac:	4b06      	ldr	r3, [pc, #24]	@ (80037c8 <HAL_IncTick+0x20>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	461a      	mov	r2, r3
 80037b2:	4b06      	ldr	r3, [pc, #24]	@ (80037cc <HAL_IncTick+0x24>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4413      	add	r3, r2
 80037b8:	4a04      	ldr	r2, [pc, #16]	@ (80037cc <HAL_IncTick+0x24>)
 80037ba:	6013      	str	r3, [r2, #0]
}
 80037bc:	bf00      	nop
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	20000010 	.word	0x20000010
 80037cc:	200002c4 	.word	0x200002c4

080037d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  return uwTick;
 80037d4:	4b03      	ldr	r3, [pc, #12]	@ (80037e4 <HAL_GetTick+0x14>)
 80037d6:	681b      	ldr	r3, [r3, #0]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	200002c4 	.word	0x200002c4

080037e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037f0:	f7ff ffee 	bl	80037d0 <HAL_GetTick>
 80037f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003800:	d005      	beq.n	800380e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003802:	4b0a      	ldr	r3, [pc, #40]	@ (800382c <HAL_Delay+0x44>)
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4413      	add	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800380e:	bf00      	nop
 8003810:	f7ff ffde 	bl	80037d0 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	429a      	cmp	r2, r3
 800381e:	d8f7      	bhi.n	8003810 <HAL_Delay+0x28>
  {
  }
}
 8003820:	bf00      	nop
 8003822:	bf00      	nop
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	20000010 	.word	0x20000010

08003830 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e033      	b.n	80038ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384a:	2b00      	cmp	r3, #0
 800384c:	d109      	bne.n	8003862 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff fcba 	bl	80031c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b00      	cmp	r3, #0
 800386c:	d118      	bne.n	80038a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003872:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003876:	f023 0302 	bic.w	r3, r3, #2
 800387a:	f043 0202 	orr.w	r2, r3, #2
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fa86 	bl	8003d94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003892:	f023 0303 	bic.w	r3, r3, #3
 8003896:	f043 0201 	orr.w	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	641a      	str	r2, [r3, #64]	@ 0x40
 800389e:	e001      	b.n	80038a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
	...

080038b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_ADC_Start+0x1a>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e097      	b.n	8003a02 <HAL_ADC_Start+0x14a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d018      	beq.n	800391a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038f8:	4b45      	ldr	r3, [pc, #276]	@ (8003a10 <HAL_ADC_Start+0x158>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a45      	ldr	r2, [pc, #276]	@ (8003a14 <HAL_ADC_Start+0x15c>)
 80038fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003902:	0c9a      	lsrs	r2, r3, #18
 8003904:	4613      	mov	r3, r2
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	4413      	add	r3, r2
 800390a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800390c:	e002      	b.n	8003914 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	3b01      	subs	r3, #1
 8003912:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f9      	bne.n	800390e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b01      	cmp	r3, #1
 8003926:	d15f      	bne.n	80039e8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003946:	2b00      	cmp	r3, #0
 8003948:	d007      	beq.n	800395a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003952:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003966:	d106      	bne.n	8003976 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396c:	f023 0206 	bic.w	r2, r3, #6
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	645a      	str	r2, [r3, #68]	@ 0x44
 8003974:	e002      	b.n	800397c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003984:	4b24      	ldr	r3, [pc, #144]	@ (8003a18 <HAL_ADC_Start+0x160>)
 8003986:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003990:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f003 031f 	and.w	r3, r3, #31
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10f      	bne.n	80039be <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d129      	bne.n	8003a00 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689a      	ldr	r2, [r3, #8]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80039ba:	609a      	str	r2, [r3, #8]
 80039bc:	e020      	b.n	8003a00 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a16      	ldr	r2, [pc, #88]	@ (8003a1c <HAL_ADC_Start+0x164>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d11b      	bne.n	8003a00 <HAL_ADC_Start+0x148>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d114      	bne.n	8003a00 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80039e4:	609a      	str	r2, [r3, #8]
 80039e6:	e00b      	b.n	8003a00 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ec:	f043 0210 	orr.w	r2, r3, #16
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f8:	f043 0201 	orr.w	r2, r3, #1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	20000008 	.word	0x20000008
 8003a14:	431bde83 	.word	0x431bde83
 8003a18:	40012300 	.word	0x40012300
 8003a1c:	40012000 	.word	0x40012000

08003a20 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a3c:	d113      	bne.n	8003a66 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003a48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a4c:	d10b      	bne.n	8003a66 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a52:	f043 0220 	orr.w	r2, r3, #32
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e063      	b.n	8003b2e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003a66:	f7ff feb3 	bl	80037d0 <HAL_GetTick>
 8003a6a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a6c:	e021      	b.n	8003ab2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a74:	d01d      	beq.n	8003ab2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d007      	beq.n	8003a8c <HAL_ADC_PollForConversion+0x6c>
 8003a7c:	f7ff fea8 	bl	80037d0 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d212      	bcs.n	8003ab2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d00b      	beq.n	8003ab2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	f043 0204 	orr.w	r2, r3, #4
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e03d      	b.n	8003b2e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d1d6      	bne.n	8003a6e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f06f 0212 	mvn.w	r2, #18
 8003ac8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ace:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d123      	bne.n	8003b2c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d11f      	bne.n	8003b2c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d006      	beq.n	8003b08 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d111      	bne.n	8003b2c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d105      	bne.n	8003b2c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b24:	f043 0201 	orr.w	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_ADC_ConfigChannel+0x1c>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e105      	b.n	8003d78 <HAL_ADC_ConfigChannel+0x228>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b09      	cmp	r3, #9
 8003b7a:	d925      	bls.n	8003bc8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68d9      	ldr	r1, [r3, #12]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	461a      	mov	r2, r3
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	4413      	add	r3, r2
 8003b90:	3b1e      	subs	r3, #30
 8003b92:	2207      	movs	r2, #7
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43da      	mvns	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	400a      	ands	r2, r1
 8003ba0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68d9      	ldr	r1, [r3, #12]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	4403      	add	r3, r0
 8003bba:	3b1e      	subs	r3, #30
 8003bbc:	409a      	lsls	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	60da      	str	r2, [r3, #12]
 8003bc6:	e022      	b.n	8003c0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6919      	ldr	r1, [r3, #16]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	4413      	add	r3, r2
 8003bdc:	2207      	movs	r2, #7
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	43da      	mvns	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	400a      	ands	r2, r1
 8003bea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6919      	ldr	r1, [r3, #16]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	4603      	mov	r3, r0
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	4403      	add	r3, r0
 8003c04:	409a      	lsls	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b06      	cmp	r3, #6
 8003c14:	d824      	bhi.n	8003c60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	3b05      	subs	r3, #5
 8003c28:	221f      	movs	r2, #31
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43da      	mvns	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	400a      	ands	r2, r1
 8003c36:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	4618      	mov	r0, r3
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	3b05      	subs	r3, #5
 8003c52:	fa00 f203 	lsl.w	r2, r0, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c5e:	e04c      	b.n	8003cfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b0c      	cmp	r3, #12
 8003c66:	d824      	bhi.n	8003cb2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	3b23      	subs	r3, #35	@ 0x23
 8003c7a:	221f      	movs	r2, #31
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	43da      	mvns	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	400a      	ands	r2, r1
 8003c88:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	4618      	mov	r0, r3
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	3b23      	subs	r3, #35	@ 0x23
 8003ca4:	fa00 f203 	lsl.w	r2, r0, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	631a      	str	r2, [r3, #48]	@ 0x30
 8003cb0:	e023      	b.n	8003cfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	3b41      	subs	r3, #65	@ 0x41
 8003cc4:	221f      	movs	r2, #31
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	43da      	mvns	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	400a      	ands	r2, r1
 8003cd2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	3b41      	subs	r3, #65	@ 0x41
 8003cee:	fa00 f203 	lsl.w	r2, r0, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cfa:	4b22      	ldr	r3, [pc, #136]	@ (8003d84 <HAL_ADC_ConfigChannel+0x234>)
 8003cfc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a21      	ldr	r2, [pc, #132]	@ (8003d88 <HAL_ADC_ConfigChannel+0x238>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d109      	bne.n	8003d1c <HAL_ADC_ConfigChannel+0x1cc>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b12      	cmp	r3, #18
 8003d0e:	d105      	bne.n	8003d1c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a19      	ldr	r2, [pc, #100]	@ (8003d88 <HAL_ADC_ConfigChannel+0x238>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d123      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0x21e>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b10      	cmp	r3, #16
 8003d2c:	d003      	beq.n	8003d36 <HAL_ADC_ConfigChannel+0x1e6>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b11      	cmp	r3, #17
 8003d34:	d11b      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d111      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d4a:	4b10      	ldr	r3, [pc, #64]	@ (8003d8c <HAL_ADC_ConfigChannel+0x23c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a10      	ldr	r2, [pc, #64]	@ (8003d90 <HAL_ADC_ConfigChannel+0x240>)
 8003d50:	fba2 2303 	umull	r2, r3, r2, r3
 8003d54:	0c9a      	lsrs	r2, r3, #18
 8003d56:	4613      	mov	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003d60:	e002      	b.n	8003d68 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f9      	bne.n	8003d62 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	40012300 	.word	0x40012300
 8003d88:	40012000 	.word	0x40012000
 8003d8c:	20000008 	.word	0x20000008
 8003d90:	431bde83 	.word	0x431bde83

08003d94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d9c:	4b79      	ldr	r3, [pc, #484]	@ (8003f84 <ADC_Init+0x1f0>)
 8003d9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	431a      	orrs	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003dc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6859      	ldr	r1, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	021a      	lsls	r2, r3, #8
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003dec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6859      	ldr	r1, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6899      	ldr	r1, [r3, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e26:	4a58      	ldr	r2, [pc, #352]	@ (8003f88 <ADC_Init+0x1f4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d022      	beq.n	8003e72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6899      	ldr	r1, [r3, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003e5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6899      	ldr	r1, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	609a      	str	r2, [r3, #8]
 8003e70:	e00f      	b.n	8003e92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003e90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0202 	bic.w	r2, r2, #2
 8003ea0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6899      	ldr	r1, [r3, #8]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	7e1b      	ldrb	r3, [r3, #24]
 8003eac:	005a      	lsls	r2, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d01b      	beq.n	8003ef8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ece:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003ede:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6859      	ldr	r1, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eea:	3b01      	subs	r3, #1
 8003eec:	035a      	lsls	r2, r3, #13
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	605a      	str	r2, [r3, #4]
 8003ef6:	e007      	b.n	8003f08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003f16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	051a      	lsls	r2, r3, #20
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003f3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6899      	ldr	r1, [r3, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003f4a:	025a      	lsls	r2, r3, #9
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6899      	ldr	r1, [r3, #8]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	029a      	lsls	r2, r3, #10
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	609a      	str	r2, [r3, #8]
}
 8003f78:	bf00      	nop
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	40012300 	.word	0x40012300
 8003f88:	0f000001 	.word	0x0f000001

08003f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003fa8:	4013      	ands	r3, r2
 8003faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fbe:	4a04      	ldr	r2, [pc, #16]	@ (8003fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	60d3      	str	r3, [r2, #12]
}
 8003fc4:	bf00      	nop
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	e000ed00 	.word	0xe000ed00

08003fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fd8:	4b04      	ldr	r3, [pc, #16]	@ (8003fec <__NVIC_GetPriorityGrouping+0x18>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	0a1b      	lsrs	r3, r3, #8
 8003fde:	f003 0307 	and.w	r3, r3, #7
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	e000ed00 	.word	0xe000ed00

08003ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	db0b      	blt.n	800401a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004002:	79fb      	ldrb	r3, [r7, #7]
 8004004:	f003 021f 	and.w	r2, r3, #31
 8004008:	4907      	ldr	r1, [pc, #28]	@ (8004028 <__NVIC_EnableIRQ+0x38>)
 800400a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	2001      	movs	r0, #1
 8004012:	fa00 f202 	lsl.w	r2, r0, r2
 8004016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	e000e100 	.word	0xe000e100

0800402c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	6039      	str	r1, [r7, #0]
 8004036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403c:	2b00      	cmp	r3, #0
 800403e:	db0a      	blt.n	8004056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	b2da      	uxtb	r2, r3
 8004044:	490c      	ldr	r1, [pc, #48]	@ (8004078 <__NVIC_SetPriority+0x4c>)
 8004046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404a:	0112      	lsls	r2, r2, #4
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	440b      	add	r3, r1
 8004050:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004054:	e00a      	b.n	800406c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	b2da      	uxtb	r2, r3
 800405a:	4908      	ldr	r1, [pc, #32]	@ (800407c <__NVIC_SetPriority+0x50>)
 800405c:	79fb      	ldrb	r3, [r7, #7]
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	3b04      	subs	r3, #4
 8004064:	0112      	lsls	r2, r2, #4
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	440b      	add	r3, r1
 800406a:	761a      	strb	r2, [r3, #24]
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	e000e100 	.word	0xe000e100
 800407c:	e000ed00 	.word	0xe000ed00

08004080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004080:	b480      	push	{r7}
 8004082:	b089      	sub	sp, #36	@ 0x24
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	f1c3 0307 	rsb	r3, r3, #7
 800409a:	2b04      	cmp	r3, #4
 800409c:	bf28      	it	cs
 800409e:	2304      	movcs	r3, #4
 80040a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	3304      	adds	r3, #4
 80040a6:	2b06      	cmp	r3, #6
 80040a8:	d902      	bls.n	80040b0 <NVIC_EncodePriority+0x30>
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	3b03      	subs	r3, #3
 80040ae:	e000      	b.n	80040b2 <NVIC_EncodePriority+0x32>
 80040b0:	2300      	movs	r3, #0
 80040b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040b4:	f04f 32ff 	mov.w	r2, #4294967295
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	43da      	mvns	r2, r3
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	401a      	ands	r2, r3
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040c8:	f04f 31ff 	mov.w	r1, #4294967295
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	fa01 f303 	lsl.w	r3, r1, r3
 80040d2:	43d9      	mvns	r1, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d8:	4313      	orrs	r3, r2
         );
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3724      	adds	r7, #36	@ 0x24
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
	...

080040e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040f8:	d301      	bcc.n	80040fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040fa:	2301      	movs	r3, #1
 80040fc:	e00f      	b.n	800411e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004128 <SysTick_Config+0x40>)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3b01      	subs	r3, #1
 8004104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004106:	210f      	movs	r1, #15
 8004108:	f04f 30ff 	mov.w	r0, #4294967295
 800410c:	f7ff ff8e 	bl	800402c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004110:	4b05      	ldr	r3, [pc, #20]	@ (8004128 <SysTick_Config+0x40>)
 8004112:	2200      	movs	r2, #0
 8004114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004116:	4b04      	ldr	r3, [pc, #16]	@ (8004128 <SysTick_Config+0x40>)
 8004118:	2207      	movs	r2, #7
 800411a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	e000e010 	.word	0xe000e010

0800412c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff ff29 	bl	8003f8c <__NVIC_SetPriorityGrouping>
}
 800413a:	bf00      	nop
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004142:	b580      	push	{r7, lr}
 8004144:	b086      	sub	sp, #24
 8004146:	af00      	add	r7, sp, #0
 8004148:	4603      	mov	r3, r0
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	607a      	str	r2, [r7, #4]
 800414e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004150:	2300      	movs	r3, #0
 8004152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004154:	f7ff ff3e 	bl	8003fd4 <__NVIC_GetPriorityGrouping>
 8004158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	68b9      	ldr	r1, [r7, #8]
 800415e:	6978      	ldr	r0, [r7, #20]
 8004160:	f7ff ff8e 	bl	8004080 <NVIC_EncodePriority>
 8004164:	4602      	mov	r2, r0
 8004166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800416a:	4611      	mov	r1, r2
 800416c:	4618      	mov	r0, r3
 800416e:	f7ff ff5d 	bl	800402c <__NVIC_SetPriority>
}
 8004172:	bf00      	nop
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b082      	sub	sp, #8
 800417e:	af00      	add	r7, sp, #0
 8004180:	4603      	mov	r3, r0
 8004182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff ff31 	bl	8003ff0 <__NVIC_EnableIRQ>
}
 800418e:	bf00      	nop
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b082      	sub	sp, #8
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7ff ffa2 	bl	80040e8 <SysTick_Config>
 80041a4:	4603      	mov	r3, r0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041bc:	f7ff fb08 	bl	80037d0 <HAL_GetTick>
 80041c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d008      	beq.n	80041e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2280      	movs	r2, #128	@ 0x80
 80041d2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e052      	b.n	8004286 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0216 	bic.w	r2, r2, #22
 80041ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695a      	ldr	r2, [r3, #20]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004204:	2b00      	cmp	r3, #0
 8004206:	d103      	bne.n	8004210 <HAL_DMA_Abort+0x62>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800420c:	2b00      	cmp	r3, #0
 800420e:	d007      	beq.n	8004220 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0208 	bic.w	r2, r2, #8
 800421e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0201 	bic.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004230:	e013      	b.n	800425a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004232:	f7ff facd 	bl	80037d0 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b05      	cmp	r3, #5
 800423e:	d90c      	bls.n	800425a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2220      	movs	r2, #32
 8004244:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2203      	movs	r2, #3
 800424a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e015      	b.n	8004286 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1e4      	bne.n	8004232 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800426c:	223f      	movs	r2, #63	@ 0x3f
 800426e:	409a      	lsls	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d004      	beq.n	80042ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2280      	movs	r2, #128	@ 0x80
 80042a6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e00c      	b.n	80042c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2205      	movs	r2, #5
 80042b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0201 	bic.w	r2, r2, #1
 80042c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
	...

080042d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b089      	sub	sp, #36	@ 0x24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042de:	2300      	movs	r3, #0
 80042e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
 80042ee:	e159      	b.n	80045a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042f0:	2201      	movs	r2, #1
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4013      	ands	r3, r2
 8004302:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	429a      	cmp	r2, r3
 800430a:	f040 8148 	bne.w	800459e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	2b01      	cmp	r3, #1
 8004318:	d005      	beq.n	8004326 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004322:	2b02      	cmp	r3, #2
 8004324:	d130      	bne.n	8004388 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	2203      	movs	r2, #3
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	43db      	mvns	r3, r3
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	4013      	ands	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	fa02 f303 	lsl.w	r3, r2, r3
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	4313      	orrs	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800435c:	2201      	movs	r2, #1
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	43db      	mvns	r3, r3
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	4013      	ands	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	091b      	lsrs	r3, r3, #4
 8004372:	f003 0201 	and.w	r2, r3, #1
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	4313      	orrs	r3, r2
 8004380:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f003 0303 	and.w	r3, r3, #3
 8004390:	2b03      	cmp	r3, #3
 8004392:	d017      	beq.n	80043c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	2203      	movs	r2, #3
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	43db      	mvns	r3, r3
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	4013      	ands	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f003 0303 	and.w	r3, r3, #3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d123      	bne.n	8004418 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	08da      	lsrs	r2, r3, #3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3208      	adds	r2, #8
 80043d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	220f      	movs	r2, #15
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	43db      	mvns	r3, r3
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	4013      	ands	r3, r2
 80043f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	691a      	ldr	r2, [r3, #16]
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	4313      	orrs	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	08da      	lsrs	r2, r3, #3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3208      	adds	r2, #8
 8004412:	69b9      	ldr	r1, [r7, #24]
 8004414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	2203      	movs	r2, #3
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	43db      	mvns	r3, r3
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	4013      	ands	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 0203 	and.w	r2, r3, #3
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	4313      	orrs	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 80a2 	beq.w	800459e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800445a:	2300      	movs	r3, #0
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	4b57      	ldr	r3, [pc, #348]	@ (80045bc <HAL_GPIO_Init+0x2e8>)
 8004460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004462:	4a56      	ldr	r2, [pc, #344]	@ (80045bc <HAL_GPIO_Init+0x2e8>)
 8004464:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004468:	6453      	str	r3, [r2, #68]	@ 0x44
 800446a:	4b54      	ldr	r3, [pc, #336]	@ (80045bc <HAL_GPIO_Init+0x2e8>)
 800446c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004476:	4a52      	ldr	r2, [pc, #328]	@ (80045c0 <HAL_GPIO_Init+0x2ec>)
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	089b      	lsrs	r3, r3, #2
 800447c:	3302      	adds	r3, #2
 800447e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	220f      	movs	r2, #15
 800448e:	fa02 f303 	lsl.w	r3, r2, r3
 8004492:	43db      	mvns	r3, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4013      	ands	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a49      	ldr	r2, [pc, #292]	@ (80045c4 <HAL_GPIO_Init+0x2f0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d019      	beq.n	80044d6 <HAL_GPIO_Init+0x202>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a48      	ldr	r2, [pc, #288]	@ (80045c8 <HAL_GPIO_Init+0x2f4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d013      	beq.n	80044d2 <HAL_GPIO_Init+0x1fe>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a47      	ldr	r2, [pc, #284]	@ (80045cc <HAL_GPIO_Init+0x2f8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00d      	beq.n	80044ce <HAL_GPIO_Init+0x1fa>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a46      	ldr	r2, [pc, #280]	@ (80045d0 <HAL_GPIO_Init+0x2fc>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d007      	beq.n	80044ca <HAL_GPIO_Init+0x1f6>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a45      	ldr	r2, [pc, #276]	@ (80045d4 <HAL_GPIO_Init+0x300>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d101      	bne.n	80044c6 <HAL_GPIO_Init+0x1f2>
 80044c2:	2304      	movs	r3, #4
 80044c4:	e008      	b.n	80044d8 <HAL_GPIO_Init+0x204>
 80044c6:	2307      	movs	r3, #7
 80044c8:	e006      	b.n	80044d8 <HAL_GPIO_Init+0x204>
 80044ca:	2303      	movs	r3, #3
 80044cc:	e004      	b.n	80044d8 <HAL_GPIO_Init+0x204>
 80044ce:	2302      	movs	r3, #2
 80044d0:	e002      	b.n	80044d8 <HAL_GPIO_Init+0x204>
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <HAL_GPIO_Init+0x204>
 80044d6:	2300      	movs	r3, #0
 80044d8:	69fa      	ldr	r2, [r7, #28]
 80044da:	f002 0203 	and.w	r2, r2, #3
 80044de:	0092      	lsls	r2, r2, #2
 80044e0:	4093      	lsls	r3, r2
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044e8:	4935      	ldr	r1, [pc, #212]	@ (80045c0 <HAL_GPIO_Init+0x2ec>)
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	089b      	lsrs	r3, r3, #2
 80044ee:	3302      	adds	r3, #2
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044f6:	4b38      	ldr	r3, [pc, #224]	@ (80045d8 <HAL_GPIO_Init+0x304>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	43db      	mvns	r3, r3
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	4013      	ands	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	4313      	orrs	r3, r2
 8004518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800451a:	4a2f      	ldr	r2, [pc, #188]	@ (80045d8 <HAL_GPIO_Init+0x304>)
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004520:	4b2d      	ldr	r3, [pc, #180]	@ (80045d8 <HAL_GPIO_Init+0x304>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	43db      	mvns	r3, r3
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	4013      	ands	r3, r2
 800452e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	4313      	orrs	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004544:	4a24      	ldr	r2, [pc, #144]	@ (80045d8 <HAL_GPIO_Init+0x304>)
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800454a:	4b23      	ldr	r3, [pc, #140]	@ (80045d8 <HAL_GPIO_Init+0x304>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	43db      	mvns	r3, r3
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	4013      	ands	r3, r2
 8004558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800456e:	4a1a      	ldr	r2, [pc, #104]	@ (80045d8 <HAL_GPIO_Init+0x304>)
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004574:	4b18      	ldr	r3, [pc, #96]	@ (80045d8 <HAL_GPIO_Init+0x304>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	43db      	mvns	r3, r3
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4013      	ands	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	4313      	orrs	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004598:	4a0f      	ldr	r2, [pc, #60]	@ (80045d8 <HAL_GPIO_Init+0x304>)
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	3301      	adds	r3, #1
 80045a2:	61fb      	str	r3, [r7, #28]
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	2b0f      	cmp	r3, #15
 80045a8:	f67f aea2 	bls.w	80042f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045ac:	bf00      	nop
 80045ae:	bf00      	nop
 80045b0:	3724      	adds	r7, #36	@ 0x24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40023800 	.word	0x40023800
 80045c0:	40013800 	.word	0x40013800
 80045c4:	40020000 	.word	0x40020000
 80045c8:	40020400 	.word	0x40020400
 80045cc:	40020800 	.word	0x40020800
 80045d0:	40020c00 	.word	0x40020c00
 80045d4:	40021000 	.word	0x40021000
 80045d8:	40013c00 	.word	0x40013c00

080045dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	887b      	ldrh	r3, [r7, #2]
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
 80045f8:	e001      	b.n	80045fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045fa:	2300      	movs	r3, #0
 80045fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	807b      	strh	r3, [r7, #2]
 8004618:	4613      	mov	r3, r2
 800461a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800461c:	787b      	ldrb	r3, [r7, #1]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004622:	887a      	ldrh	r2, [r7, #2]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004628:	e003      	b.n	8004632 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800462a:	887b      	ldrh	r3, [r7, #2]
 800462c:	041a      	lsls	r2, r3, #16
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	619a      	str	r2, [r3, #24]
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
	...

08004640 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800464a:	4b08      	ldr	r3, [pc, #32]	@ (800466c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800464c:	695a      	ldr	r2, [r3, #20]
 800464e:	88fb      	ldrh	r3, [r7, #6]
 8004650:	4013      	ands	r3, r2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d006      	beq.n	8004664 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004656:	4a05      	ldr	r2, [pc, #20]	@ (800466c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004658:	88fb      	ldrh	r3, [r7, #6]
 800465a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800465c:	88fb      	ldrh	r3, [r7, #6]
 800465e:	4618      	mov	r0, r3
 8004660:	f7fe fcc4 	bl	8002fec <HAL_GPIO_EXTI_Callback>
  }
}
 8004664:	bf00      	nop
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	40013c00 	.word	0x40013c00

08004670 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e267      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d075      	beq.n	800477a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800468e:	4b88      	ldr	r3, [pc, #544]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 030c 	and.w	r3, r3, #12
 8004696:	2b04      	cmp	r3, #4
 8004698:	d00c      	beq.n	80046b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800469a:	4b85      	ldr	r3, [pc, #532]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d112      	bne.n	80046cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046a6:	4b82      	ldr	r3, [pc, #520]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046b2:	d10b      	bne.n	80046cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b4:	4b7e      	ldr	r3, [pc, #504]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d05b      	beq.n	8004778 <HAL_RCC_OscConfig+0x108>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d157      	bne.n	8004778 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e242      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046d4:	d106      	bne.n	80046e4 <HAL_RCC_OscConfig+0x74>
 80046d6:	4b76      	ldr	r3, [pc, #472]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a75      	ldr	r2, [pc, #468]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 80046dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	e01d      	b.n	8004720 <HAL_RCC_OscConfig+0xb0>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046ec:	d10c      	bne.n	8004708 <HAL_RCC_OscConfig+0x98>
 80046ee:	4b70      	ldr	r3, [pc, #448]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a6f      	ldr	r2, [pc, #444]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 80046f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	4b6d      	ldr	r3, [pc, #436]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a6c      	ldr	r2, [pc, #432]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	e00b      	b.n	8004720 <HAL_RCC_OscConfig+0xb0>
 8004708:	4b69      	ldr	r3, [pc, #420]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a68      	ldr	r2, [pc, #416]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 800470e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	4b66      	ldr	r3, [pc, #408]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a65      	ldr	r2, [pc, #404]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 800471a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800471e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d013      	beq.n	8004750 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004728:	f7ff f852 	bl	80037d0 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004730:	f7ff f84e 	bl	80037d0 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b64      	cmp	r3, #100	@ 0x64
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e207      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004742:	4b5b      	ldr	r3, [pc, #364]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0f0      	beq.n	8004730 <HAL_RCC_OscConfig+0xc0>
 800474e:	e014      	b.n	800477a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004750:	f7ff f83e 	bl	80037d0 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004758:	f7ff f83a 	bl	80037d0 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b64      	cmp	r3, #100	@ 0x64
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e1f3      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800476a:	4b51      	ldr	r3, [pc, #324]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0xe8>
 8004776:	e000      	b.n	800477a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d063      	beq.n	800484e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004786:	4b4a      	ldr	r3, [pc, #296]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 030c 	and.w	r3, r3, #12
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00b      	beq.n	80047aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004792:	4b47      	ldr	r3, [pc, #284]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800479a:	2b08      	cmp	r3, #8
 800479c:	d11c      	bne.n	80047d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800479e:	4b44      	ldr	r3, [pc, #272]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d116      	bne.n	80047d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047aa:	4b41      	ldr	r3, [pc, #260]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d005      	beq.n	80047c2 <HAL_RCC_OscConfig+0x152>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d001      	beq.n	80047c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e1c7      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c2:	4b3b      	ldr	r3, [pc, #236]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	4937      	ldr	r1, [pc, #220]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047d6:	e03a      	b.n	800484e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d020      	beq.n	8004822 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047e0:	4b34      	ldr	r3, [pc, #208]	@ (80048b4 <HAL_RCC_OscConfig+0x244>)
 80047e2:	2201      	movs	r2, #1
 80047e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e6:	f7fe fff3 	bl	80037d0 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ee:	f7fe ffef 	bl	80037d0 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e1a8      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004800:	4b2b      	ldr	r3, [pc, #172]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0f0      	beq.n	80047ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800480c:	4b28      	ldr	r3, [pc, #160]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	4925      	ldr	r1, [pc, #148]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 800481c:	4313      	orrs	r3, r2
 800481e:	600b      	str	r3, [r1, #0]
 8004820:	e015      	b.n	800484e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004822:	4b24      	ldr	r3, [pc, #144]	@ (80048b4 <HAL_RCC_OscConfig+0x244>)
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004828:	f7fe ffd2 	bl	80037d0 <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004830:	f7fe ffce 	bl	80037d0 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e187      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004842:	4b1b      	ldr	r3, [pc, #108]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1f0      	bne.n	8004830 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0308 	and.w	r3, r3, #8
 8004856:	2b00      	cmp	r3, #0
 8004858:	d036      	beq.n	80048c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d016      	beq.n	8004890 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004862:	4b15      	ldr	r3, [pc, #84]	@ (80048b8 <HAL_RCC_OscConfig+0x248>)
 8004864:	2201      	movs	r2, #1
 8004866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004868:	f7fe ffb2 	bl	80037d0 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004870:	f7fe ffae 	bl	80037d0 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e167      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004882:	4b0b      	ldr	r3, [pc, #44]	@ (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f0      	beq.n	8004870 <HAL_RCC_OscConfig+0x200>
 800488e:	e01b      	b.n	80048c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004890:	4b09      	ldr	r3, [pc, #36]	@ (80048b8 <HAL_RCC_OscConfig+0x248>)
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004896:	f7fe ff9b 	bl	80037d0 <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800489c:	e00e      	b.n	80048bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800489e:	f7fe ff97 	bl	80037d0 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d907      	bls.n	80048bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e150      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
 80048b0:	40023800 	.word	0x40023800
 80048b4:	42470000 	.word	0x42470000
 80048b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048bc:	4b88      	ldr	r3, [pc, #544]	@ (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80048be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1ea      	bne.n	800489e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 8097 	beq.w	8004a04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048d6:	2300      	movs	r3, #0
 80048d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048da:	4b81      	ldr	r3, [pc, #516]	@ (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80048dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10f      	bne.n	8004906 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048e6:	2300      	movs	r3, #0
 80048e8:	60bb      	str	r3, [r7, #8]
 80048ea:	4b7d      	ldr	r3, [pc, #500]	@ (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80048ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ee:	4a7c      	ldr	r2, [pc, #496]	@ (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80048f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80048f6:	4b7a      	ldr	r3, [pc, #488]	@ (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048fe:	60bb      	str	r3, [r7, #8]
 8004900:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004902:	2301      	movs	r3, #1
 8004904:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004906:	4b77      	ldr	r3, [pc, #476]	@ (8004ae4 <HAL_RCC_OscConfig+0x474>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800490e:	2b00      	cmp	r3, #0
 8004910:	d118      	bne.n	8004944 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004912:	4b74      	ldr	r3, [pc, #464]	@ (8004ae4 <HAL_RCC_OscConfig+0x474>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a73      	ldr	r2, [pc, #460]	@ (8004ae4 <HAL_RCC_OscConfig+0x474>)
 8004918:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800491c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800491e:	f7fe ff57 	bl	80037d0 <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004924:	e008      	b.n	8004938 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004926:	f7fe ff53 	bl	80037d0 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e10c      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004938:	4b6a      	ldr	r3, [pc, #424]	@ (8004ae4 <HAL_RCC_OscConfig+0x474>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0f0      	beq.n	8004926 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d106      	bne.n	800495a <HAL_RCC_OscConfig+0x2ea>
 800494c:	4b64      	ldr	r3, [pc, #400]	@ (8004ae0 <HAL_RCC_OscConfig+0x470>)
 800494e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004950:	4a63      	ldr	r2, [pc, #396]	@ (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	6713      	str	r3, [r2, #112]	@ 0x70
 8004958:	e01c      	b.n	8004994 <HAL_RCC_OscConfig+0x324>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	2b05      	cmp	r3, #5
 8004960:	d10c      	bne.n	800497c <HAL_RCC_OscConfig+0x30c>
 8004962:	4b5f      	ldr	r3, [pc, #380]	@ (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004966:	4a5e      	ldr	r2, [pc, #376]	@ (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004968:	f043 0304 	orr.w	r3, r3, #4
 800496c:	6713      	str	r3, [r2, #112]	@ 0x70
 800496e:	4b5c      	ldr	r3, [pc, #368]	@ (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004972:	4a5b      	ldr	r2, [pc, #364]	@ (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004974:	f043 0301 	orr.w	r3, r3, #1
 8004978:	6713      	str	r3, [r2, #112]	@ 0x70
 800497a:	e00b      	b.n	8004994 <HAL_RCC_OscConfig+0x324>
 800497c:	4b58      	ldr	r3, [pc, #352]	@ (8004ae0 <HAL_RCC_OscConfig+0x470>)
 800497e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004980:	4a57      	ldr	r2, [pc, #348]	@ (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004982:	f023 0301 	bic.w	r3, r3, #1
 8004986:	6713      	str	r3, [r2, #112]	@ 0x70
 8004988:	4b55      	ldr	r3, [pc, #340]	@ (8004ae0 <HAL_RCC_OscConfig+0x470>)
 800498a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800498c:	4a54      	ldr	r2, [pc, #336]	@ (8004ae0 <HAL_RCC_OscConfig+0x470>)
 800498e:	f023 0304 	bic.w	r3, r3, #4
 8004992:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d015      	beq.n	80049c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499c:	f7fe ff18 	bl	80037d0 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049a2:	e00a      	b.n	80049ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049a4:	f7fe ff14 	bl	80037d0 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e0cb      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ba:	4b49      	ldr	r3, [pc, #292]	@ (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80049bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0ee      	beq.n	80049a4 <HAL_RCC_OscConfig+0x334>
 80049c6:	e014      	b.n	80049f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049c8:	f7fe ff02 	bl	80037d0 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ce:	e00a      	b.n	80049e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d0:	f7fe fefe 	bl	80037d0 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e0b5      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049e6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80049e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1ee      	bne.n	80049d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049f2:	7dfb      	ldrb	r3, [r7, #23]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d105      	bne.n	8004a04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049f8:	4b39      	ldr	r3, [pc, #228]	@ (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80049fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fc:	4a38      	ldr	r2, [pc, #224]	@ (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80049fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a02:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 80a1 	beq.w	8004b50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a0e:	4b34      	ldr	r3, [pc, #208]	@ (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 030c 	and.w	r3, r3, #12
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d05c      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d141      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a22:	4b31      	ldr	r3, [pc, #196]	@ (8004ae8 <HAL_RCC_OscConfig+0x478>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a28:	f7fe fed2 	bl	80037d0 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a30:	f7fe fece 	bl	80037d0 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e087      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a42:	4b27      	ldr	r3, [pc, #156]	@ (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1f0      	bne.n	8004a30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69da      	ldr	r2, [r3, #28]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5c:	019b      	lsls	r3, r3, #6
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a64:	085b      	lsrs	r3, r3, #1
 8004a66:	3b01      	subs	r3, #1
 8004a68:	041b      	lsls	r3, r3, #16
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a70:	061b      	lsls	r3, r3, #24
 8004a72:	491b      	ldr	r1, [pc, #108]	@ (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a78:	4b1b      	ldr	r3, [pc, #108]	@ (8004ae8 <HAL_RCC_OscConfig+0x478>)
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7e:	f7fe fea7 	bl	80037d0 <HAL_GetTick>
 8004a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a84:	e008      	b.n	8004a98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a86:	f7fe fea3 	bl	80037d0 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e05c      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a98:	4b11      	ldr	r3, [pc, #68]	@ (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0f0      	beq.n	8004a86 <HAL_RCC_OscConfig+0x416>
 8004aa4:	e054      	b.n	8004b50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa6:	4b10      	ldr	r3, [pc, #64]	@ (8004ae8 <HAL_RCC_OscConfig+0x478>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aac:	f7fe fe90 	bl	80037d0 <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab4:	f7fe fe8c 	bl	80037d0 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e045      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac6:	4b06      	ldr	r3, [pc, #24]	@ (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f0      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x444>
 8004ad2:	e03d      	b.n	8004b50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d107      	bne.n	8004aec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e038      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	40007000 	.word	0x40007000
 8004ae8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004aec:	4b1b      	ldr	r3, [pc, #108]	@ (8004b5c <HAL_RCC_OscConfig+0x4ec>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d028      	beq.n	8004b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d121      	bne.n	8004b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d11a      	bne.n	8004b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d111      	bne.n	8004b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b32:	085b      	lsrs	r3, r3, #1
 8004b34:	3b01      	subs	r3, #1
 8004b36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d107      	bne.n	8004b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d001      	beq.n	8004b50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e000      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40023800 	.word	0x40023800

08004b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e0cc      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b74:	4b68      	ldr	r3, [pc, #416]	@ (8004d18 <HAL_RCC_ClockConfig+0x1b8>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d90c      	bls.n	8004b9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b82:	4b65      	ldr	r3, [pc, #404]	@ (8004d18 <HAL_RCC_ClockConfig+0x1b8>)
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8a:	4b63      	ldr	r3, [pc, #396]	@ (8004d18 <HAL_RCC_ClockConfig+0x1b8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d001      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e0b8      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d020      	beq.n	8004bea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bb4:	4b59      	ldr	r3, [pc, #356]	@ (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	4a58      	ldr	r2, [pc, #352]	@ (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004bbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0308 	and.w	r3, r3, #8
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bcc:	4b53      	ldr	r3, [pc, #332]	@ (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	4a52      	ldr	r2, [pc, #328]	@ (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004bd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd8:	4b50      	ldr	r3, [pc, #320]	@ (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	494d      	ldr	r1, [pc, #308]	@ (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d044      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d107      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bfe:	4b47      	ldr	r3, [pc, #284]	@ (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d119      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e07f      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d003      	beq.n	8004c1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c1a:	2b03      	cmp	r3, #3
 8004c1c:	d107      	bne.n	8004c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c1e:	4b3f      	ldr	r3, [pc, #252]	@ (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d109      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e06f      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e067      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c3e:	4b37      	ldr	r3, [pc, #220]	@ (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f023 0203 	bic.w	r2, r3, #3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	4934      	ldr	r1, [pc, #208]	@ (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c50:	f7fe fdbe 	bl	80037d0 <HAL_GetTick>
 8004c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c56:	e00a      	b.n	8004c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c58:	f7fe fdba 	bl	80037d0 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e04f      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 020c 	and.w	r2, r3, #12
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d1eb      	bne.n	8004c58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c80:	4b25      	ldr	r3, [pc, #148]	@ (8004d18 <HAL_RCC_ClockConfig+0x1b8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d20c      	bcs.n	8004ca8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8e:	4b22      	ldr	r3, [pc, #136]	@ (8004d18 <HAL_RCC_ClockConfig+0x1b8>)
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c96:	4b20      	ldr	r3, [pc, #128]	@ (8004d18 <HAL_RCC_ClockConfig+0x1b8>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d001      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e032      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d008      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cb4:	4b19      	ldr	r3, [pc, #100]	@ (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	4916      	ldr	r1, [pc, #88]	@ (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d009      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cd2:	4b12      	ldr	r3, [pc, #72]	@ (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	490e      	ldr	r1, [pc, #56]	@ (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ce6:	f000 f821 	bl	8004d2c <HAL_RCC_GetSysClockFreq>
 8004cea:	4602      	mov	r2, r0
 8004cec:	4b0b      	ldr	r3, [pc, #44]	@ (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	091b      	lsrs	r3, r3, #4
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	490a      	ldr	r1, [pc, #40]	@ (8004d20 <HAL_RCC_ClockConfig+0x1c0>)
 8004cf8:	5ccb      	ldrb	r3, [r1, r3]
 8004cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8004cfe:	4a09      	ldr	r2, [pc, #36]	@ (8004d24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d02:	4b09      	ldr	r3, [pc, #36]	@ (8004d28 <HAL_RCC_ClockConfig+0x1c8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fe fd1e 	bl	8003748 <HAL_InitTick>

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	40023c00 	.word	0x40023c00
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	08007e38 	.word	0x08007e38
 8004d24:	20000008 	.word	0x20000008
 8004d28:	2000000c 	.word	0x2000000c

08004d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d30:	b094      	sub	sp, #80	@ 0x50
 8004d32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d38:	2300      	movs	r3, #0
 8004d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d44:	4b79      	ldr	r3, [pc, #484]	@ (8004f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f003 030c 	and.w	r3, r3, #12
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d00d      	beq.n	8004d6c <HAL_RCC_GetSysClockFreq+0x40>
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	f200 80e1 	bhi.w	8004f18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <HAL_RCC_GetSysClockFreq+0x34>
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d003      	beq.n	8004d66 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d5e:	e0db      	b.n	8004f18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d60:	4b73      	ldr	r3, [pc, #460]	@ (8004f30 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d62:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004d64:	e0db      	b.n	8004f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d66:	4b73      	ldr	r3, [pc, #460]	@ (8004f34 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d6a:	e0d8      	b.n	8004f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d6c:	4b6f      	ldr	r3, [pc, #444]	@ (8004f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d74:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d76:	4b6d      	ldr	r3, [pc, #436]	@ (8004f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d063      	beq.n	8004e4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d82:	4b6a      	ldr	r3, [pc, #424]	@ (8004f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	099b      	lsrs	r3, r3, #6
 8004d88:	2200      	movs	r2, #0
 8004d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d94:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d96:	2300      	movs	r3, #0
 8004d98:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004d9e:	4622      	mov	r2, r4
 8004da0:	462b      	mov	r3, r5
 8004da2:	f04f 0000 	mov.w	r0, #0
 8004da6:	f04f 0100 	mov.w	r1, #0
 8004daa:	0159      	lsls	r1, r3, #5
 8004dac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004db0:	0150      	lsls	r0, r2, #5
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	4621      	mov	r1, r4
 8004db8:	1a51      	subs	r1, r2, r1
 8004dba:	6139      	str	r1, [r7, #16]
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	eb63 0301 	sbc.w	r3, r3, r1
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dd0:	4659      	mov	r1, fp
 8004dd2:	018b      	lsls	r3, r1, #6
 8004dd4:	4651      	mov	r1, sl
 8004dd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dda:	4651      	mov	r1, sl
 8004ddc:	018a      	lsls	r2, r1, #6
 8004dde:	4651      	mov	r1, sl
 8004de0:	ebb2 0801 	subs.w	r8, r2, r1
 8004de4:	4659      	mov	r1, fp
 8004de6:	eb63 0901 	sbc.w	r9, r3, r1
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	f04f 0300 	mov.w	r3, #0
 8004df2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004df6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dfe:	4690      	mov	r8, r2
 8004e00:	4699      	mov	r9, r3
 8004e02:	4623      	mov	r3, r4
 8004e04:	eb18 0303 	adds.w	r3, r8, r3
 8004e08:	60bb      	str	r3, [r7, #8]
 8004e0a:	462b      	mov	r3, r5
 8004e0c:	eb49 0303 	adc.w	r3, r9, r3
 8004e10:	60fb      	str	r3, [r7, #12]
 8004e12:	f04f 0200 	mov.w	r2, #0
 8004e16:	f04f 0300 	mov.w	r3, #0
 8004e1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e1e:	4629      	mov	r1, r5
 8004e20:	024b      	lsls	r3, r1, #9
 8004e22:	4621      	mov	r1, r4
 8004e24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e28:	4621      	mov	r1, r4
 8004e2a:	024a      	lsls	r2, r1, #9
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	4619      	mov	r1, r3
 8004e30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e32:	2200      	movs	r2, #0
 8004e34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e3c:	f7fb fe1e 	bl	8000a7c <__aeabi_uldivmod>
 8004e40:	4602      	mov	r2, r0
 8004e42:	460b      	mov	r3, r1
 8004e44:	4613      	mov	r3, r2
 8004e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e48:	e058      	b.n	8004efc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e4a:	4b38      	ldr	r3, [pc, #224]	@ (8004f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	099b      	lsrs	r3, r3, #6
 8004e50:	2200      	movs	r2, #0
 8004e52:	4618      	mov	r0, r3
 8004e54:	4611      	mov	r1, r2
 8004e56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e5a:	623b      	str	r3, [r7, #32]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e64:	4642      	mov	r2, r8
 8004e66:	464b      	mov	r3, r9
 8004e68:	f04f 0000 	mov.w	r0, #0
 8004e6c:	f04f 0100 	mov.w	r1, #0
 8004e70:	0159      	lsls	r1, r3, #5
 8004e72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e76:	0150      	lsls	r0, r2, #5
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4641      	mov	r1, r8
 8004e7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e82:	4649      	mov	r1, r9
 8004e84:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e88:	f04f 0200 	mov.w	r2, #0
 8004e8c:	f04f 0300 	mov.w	r3, #0
 8004e90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e9c:	ebb2 040a 	subs.w	r4, r2, sl
 8004ea0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	00eb      	lsls	r3, r5, #3
 8004eae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004eb2:	00e2      	lsls	r2, r4, #3
 8004eb4:	4614      	mov	r4, r2
 8004eb6:	461d      	mov	r5, r3
 8004eb8:	4643      	mov	r3, r8
 8004eba:	18e3      	adds	r3, r4, r3
 8004ebc:	603b      	str	r3, [r7, #0]
 8004ebe:	464b      	mov	r3, r9
 8004ec0:	eb45 0303 	adc.w	r3, r5, r3
 8004ec4:	607b      	str	r3, [r7, #4]
 8004ec6:	f04f 0200 	mov.w	r2, #0
 8004eca:	f04f 0300 	mov.w	r3, #0
 8004ece:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ed2:	4629      	mov	r1, r5
 8004ed4:	028b      	lsls	r3, r1, #10
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004edc:	4621      	mov	r1, r4
 8004ede:	028a      	lsls	r2, r1, #10
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	61bb      	str	r3, [r7, #24]
 8004eea:	61fa      	str	r2, [r7, #28]
 8004eec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ef0:	f7fb fdc4 	bl	8000a7c <__aeabi_uldivmod>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4613      	mov	r3, r2
 8004efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004efc:	4b0b      	ldr	r3, [pc, #44]	@ (8004f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	0c1b      	lsrs	r3, r3, #16
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	3301      	adds	r3, #1
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004f0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f16:	e002      	b.n	8004f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f18:	4b05      	ldr	r3, [pc, #20]	@ (8004f30 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3750      	adds	r7, #80	@ 0x50
 8004f24:	46bd      	mov	sp, r7
 8004f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	00f42400 	.word	0x00f42400
 8004f34:	007a1200 	.word	0x007a1200

08004f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f3c:	4b03      	ldr	r3, [pc, #12]	@ (8004f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	20000008 	.word	0x20000008

08004f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f54:	f7ff fff0 	bl	8004f38 <HAL_RCC_GetHCLKFreq>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	4b05      	ldr	r3, [pc, #20]	@ (8004f70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	0a9b      	lsrs	r3, r3, #10
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	4903      	ldr	r1, [pc, #12]	@ (8004f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f66:	5ccb      	ldrb	r3, [r1, r3]
 8004f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40023800 	.word	0x40023800
 8004f74:	08007e48 	.word	0x08007e48

08004f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f7c:	f7ff ffdc 	bl	8004f38 <HAL_RCC_GetHCLKFreq>
 8004f80:	4602      	mov	r2, r0
 8004f82:	4b05      	ldr	r3, [pc, #20]	@ (8004f98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	0b5b      	lsrs	r3, r3, #13
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	4903      	ldr	r1, [pc, #12]	@ (8004f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f8e:	5ccb      	ldrb	r3, [r1, r3]
 8004f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40023800 	.word	0x40023800
 8004f9c:	08007e48 	.word	0x08007e48

08004fa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e041      	b.n	8005036 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d106      	bne.n	8004fcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7fe f942 	bl	8003250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3304      	adds	r3, #4
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4610      	mov	r0, r2
 8004fe0:	f000 fcae 	bl	8005940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	d001      	beq.n	8005058 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e03c      	b.n	80050d2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a1e      	ldr	r2, [pc, #120]	@ (80050e0 <HAL_TIM_Base_Start+0xa0>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d018      	beq.n	800509c <HAL_TIM_Base_Start+0x5c>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005072:	d013      	beq.n	800509c <HAL_TIM_Base_Start+0x5c>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a1a      	ldr	r2, [pc, #104]	@ (80050e4 <HAL_TIM_Base_Start+0xa4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00e      	beq.n	800509c <HAL_TIM_Base_Start+0x5c>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a19      	ldr	r2, [pc, #100]	@ (80050e8 <HAL_TIM_Base_Start+0xa8>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d009      	beq.n	800509c <HAL_TIM_Base_Start+0x5c>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a17      	ldr	r2, [pc, #92]	@ (80050ec <HAL_TIM_Base_Start+0xac>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d004      	beq.n	800509c <HAL_TIM_Base_Start+0x5c>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a16      	ldr	r2, [pc, #88]	@ (80050f0 <HAL_TIM_Base_Start+0xb0>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d111      	bne.n	80050c0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b06      	cmp	r3, #6
 80050ac:	d010      	beq.n	80050d0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f042 0201 	orr.w	r2, r2, #1
 80050bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050be:	e007      	b.n	80050d0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	40010000 	.word	0x40010000
 80050e4:	40000400 	.word	0x40000400
 80050e8:	40000800 	.word	0x40000800
 80050ec:	40000c00 	.word	0x40000c00
 80050f0:	40014000 	.word	0x40014000

080050f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b01      	cmp	r3, #1
 8005106:	d001      	beq.n	800510c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e044      	b.n	8005196 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68da      	ldr	r2, [r3, #12]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0201 	orr.w	r2, r2, #1
 8005122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a1e      	ldr	r2, [pc, #120]	@ (80051a4 <HAL_TIM_Base_Start_IT+0xb0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d018      	beq.n	8005160 <HAL_TIM_Base_Start_IT+0x6c>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005136:	d013      	beq.n	8005160 <HAL_TIM_Base_Start_IT+0x6c>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a1a      	ldr	r2, [pc, #104]	@ (80051a8 <HAL_TIM_Base_Start_IT+0xb4>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d00e      	beq.n	8005160 <HAL_TIM_Base_Start_IT+0x6c>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a19      	ldr	r2, [pc, #100]	@ (80051ac <HAL_TIM_Base_Start_IT+0xb8>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d009      	beq.n	8005160 <HAL_TIM_Base_Start_IT+0x6c>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a17      	ldr	r2, [pc, #92]	@ (80051b0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d004      	beq.n	8005160 <HAL_TIM_Base_Start_IT+0x6c>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a16      	ldr	r2, [pc, #88]	@ (80051b4 <HAL_TIM_Base_Start_IT+0xc0>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d111      	bne.n	8005184 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2b06      	cmp	r3, #6
 8005170:	d010      	beq.n	8005194 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f042 0201 	orr.w	r2, r2, #1
 8005180:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005182:	e007      	b.n	8005194 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0201 	orr.w	r2, r2, #1
 8005192:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40010000 	.word	0x40010000
 80051a8:	40000400 	.word	0x40000400
 80051ac:	40000800 	.word	0x40000800
 80051b0:	40000c00 	.word	0x40000c00
 80051b4:	40014000 	.word	0x40014000

080051b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e041      	b.n	800524e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f839 	bl	8005256 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3304      	adds	r3, #4
 80051f4:	4619      	mov	r1, r3
 80051f6:	4610      	mov	r0, r2
 80051f8:	f000 fba2 	bl	8005940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
	...

0800526c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d109      	bne.n	8005290 <HAL_TIM_PWM_Start+0x24>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b01      	cmp	r3, #1
 8005286:	bf14      	ite	ne
 8005288:	2301      	movne	r3, #1
 800528a:	2300      	moveq	r3, #0
 800528c:	b2db      	uxtb	r3, r3
 800528e:	e022      	b.n	80052d6 <HAL_TIM_PWM_Start+0x6a>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b04      	cmp	r3, #4
 8005294:	d109      	bne.n	80052aa <HAL_TIM_PWM_Start+0x3e>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b01      	cmp	r3, #1
 80052a0:	bf14      	ite	ne
 80052a2:	2301      	movne	r3, #1
 80052a4:	2300      	moveq	r3, #0
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	e015      	b.n	80052d6 <HAL_TIM_PWM_Start+0x6a>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d109      	bne.n	80052c4 <HAL_TIM_PWM_Start+0x58>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	bf14      	ite	ne
 80052bc:	2301      	movne	r3, #1
 80052be:	2300      	moveq	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	e008      	b.n	80052d6 <HAL_TIM_PWM_Start+0x6a>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	bf14      	ite	ne
 80052d0:	2301      	movne	r3, #1
 80052d2:	2300      	moveq	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e068      	b.n	80053b0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d104      	bne.n	80052ee <HAL_TIM_PWM_Start+0x82>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052ec:	e013      	b.n	8005316 <HAL_TIM_PWM_Start+0xaa>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b04      	cmp	r3, #4
 80052f2:	d104      	bne.n	80052fe <HAL_TIM_PWM_Start+0x92>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052fc:	e00b      	b.n	8005316 <HAL_TIM_PWM_Start+0xaa>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b08      	cmp	r3, #8
 8005302:	d104      	bne.n	800530e <HAL_TIM_PWM_Start+0xa2>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800530c:	e003      	b.n	8005316 <HAL_TIM_PWM_Start+0xaa>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2202      	movs	r2, #2
 8005312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2201      	movs	r2, #1
 800531c:	6839      	ldr	r1, [r7, #0]
 800531e:	4618      	mov	r0, r3
 8005320:	f000 fdb4 	bl	8005e8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a23      	ldr	r2, [pc, #140]	@ (80053b8 <HAL_TIM_PWM_Start+0x14c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d107      	bne.n	800533e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800533c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a1d      	ldr	r2, [pc, #116]	@ (80053b8 <HAL_TIM_PWM_Start+0x14c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d018      	beq.n	800537a <HAL_TIM_PWM_Start+0x10e>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005350:	d013      	beq.n	800537a <HAL_TIM_PWM_Start+0x10e>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a19      	ldr	r2, [pc, #100]	@ (80053bc <HAL_TIM_PWM_Start+0x150>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d00e      	beq.n	800537a <HAL_TIM_PWM_Start+0x10e>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a17      	ldr	r2, [pc, #92]	@ (80053c0 <HAL_TIM_PWM_Start+0x154>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d009      	beq.n	800537a <HAL_TIM_PWM_Start+0x10e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a16      	ldr	r2, [pc, #88]	@ (80053c4 <HAL_TIM_PWM_Start+0x158>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d004      	beq.n	800537a <HAL_TIM_PWM_Start+0x10e>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a14      	ldr	r2, [pc, #80]	@ (80053c8 <HAL_TIM_PWM_Start+0x15c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d111      	bne.n	800539e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f003 0307 	and.w	r3, r3, #7
 8005384:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2b06      	cmp	r3, #6
 800538a:	d010      	beq.n	80053ae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0201 	orr.w	r2, r2, #1
 800539a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800539c:	e007      	b.n	80053ae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f042 0201 	orr.w	r2, r2, #1
 80053ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	40010000 	.word	0x40010000
 80053bc:	40000400 	.word	0x40000400
 80053c0:	40000800 	.word	0x40000800
 80053c4:	40000c00 	.word	0x40000c00
 80053c8:	40014000 	.word	0x40014000

080053cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d122      	bne.n	8005428 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d11b      	bne.n	8005428 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f06f 0202 	mvn.w	r2, #2
 80053f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	f003 0303 	and.w	r3, r3, #3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fa77 	bl	8005902 <HAL_TIM_IC_CaptureCallback>
 8005414:	e005      	b.n	8005422 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fa69 	bl	80058ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fa7a 	bl	8005916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f003 0304 	and.w	r3, r3, #4
 8005432:	2b04      	cmp	r3, #4
 8005434:	d122      	bne.n	800547c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b04      	cmp	r3, #4
 8005442:	d11b      	bne.n	800547c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f06f 0204 	mvn.w	r2, #4
 800544c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2202      	movs	r2, #2
 8005452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fa4d 	bl	8005902 <HAL_TIM_IC_CaptureCallback>
 8005468:	e005      	b.n	8005476 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fa3f 	bl	80058ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fa50 	bl	8005916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f003 0308 	and.w	r3, r3, #8
 8005486:	2b08      	cmp	r3, #8
 8005488:	d122      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	2b08      	cmp	r3, #8
 8005496:	d11b      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f06f 0208 	mvn.w	r2, #8
 80054a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2204      	movs	r2, #4
 80054a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fa23 	bl	8005902 <HAL_TIM_IC_CaptureCallback>
 80054bc:	e005      	b.n	80054ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fa15 	bl	80058ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fa26 	bl	8005916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f003 0310 	and.w	r3, r3, #16
 80054da:	2b10      	cmp	r3, #16
 80054dc:	d122      	bne.n	8005524 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f003 0310 	and.w	r3, r3, #16
 80054e8:	2b10      	cmp	r3, #16
 80054ea:	d11b      	bne.n	8005524 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f06f 0210 	mvn.w	r2, #16
 80054f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2208      	movs	r2, #8
 80054fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f9f9 	bl	8005902 <HAL_TIM_IC_CaptureCallback>
 8005510:	e005      	b.n	800551e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f9eb 	bl	80058ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f9fc 	bl	8005916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b01      	cmp	r3, #1
 8005530:	d10e      	bne.n	8005550 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b01      	cmp	r3, #1
 800553e:	d107      	bne.n	8005550 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f06f 0201 	mvn.w	r2, #1
 8005548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fd fd8e 	bl	800306c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800555a:	2b80      	cmp	r3, #128	@ 0x80
 800555c:	d10e      	bne.n	800557c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005568:	2b80      	cmp	r3, #128	@ 0x80
 800556a:	d107      	bne.n	800557c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 fd26 	bl	8005fc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005586:	2b40      	cmp	r3, #64	@ 0x40
 8005588:	d10e      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005594:	2b40      	cmp	r3, #64	@ 0x40
 8005596:	d107      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f9c1 	bl	800592a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f003 0320 	and.w	r3, r3, #32
 80055b2:	2b20      	cmp	r3, #32
 80055b4:	d10e      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f003 0320 	and.w	r3, r3, #32
 80055c0:	2b20      	cmp	r3, #32
 80055c2:	d107      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f06f 0220 	mvn.w	r2, #32
 80055cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fcf0 	bl	8005fb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055d4:	bf00      	nop
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055e8:	2300      	movs	r3, #0
 80055ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d101      	bne.n	80055fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055f6:	2302      	movs	r3, #2
 80055f8:	e0ae      	b.n	8005758 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b0c      	cmp	r3, #12
 8005606:	f200 809f 	bhi.w	8005748 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800560a:	a201      	add	r2, pc, #4	@ (adr r2, 8005610 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800560c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005610:	08005645 	.word	0x08005645
 8005614:	08005749 	.word	0x08005749
 8005618:	08005749 	.word	0x08005749
 800561c:	08005749 	.word	0x08005749
 8005620:	08005685 	.word	0x08005685
 8005624:	08005749 	.word	0x08005749
 8005628:	08005749 	.word	0x08005749
 800562c:	08005749 	.word	0x08005749
 8005630:	080056c7 	.word	0x080056c7
 8005634:	08005749 	.word	0x08005749
 8005638:	08005749 	.word	0x08005749
 800563c:	08005749 	.word	0x08005749
 8005640:	08005707 	.word	0x08005707
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68b9      	ldr	r1, [r7, #8]
 800564a:	4618      	mov	r0, r3
 800564c:	f000 f9f8 	bl	8005a40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699a      	ldr	r2, [r3, #24]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0208 	orr.w	r2, r2, #8
 800565e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699a      	ldr	r2, [r3, #24]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0204 	bic.w	r2, r2, #4
 800566e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6999      	ldr	r1, [r3, #24]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	691a      	ldr	r2, [r3, #16]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	619a      	str	r2, [r3, #24]
      break;
 8005682:	e064      	b.n	800574e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68b9      	ldr	r1, [r7, #8]
 800568a:	4618      	mov	r0, r3
 800568c:	f000 fa3e 	bl	8005b0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699a      	ldr	r2, [r3, #24]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800569e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699a      	ldr	r2, [r3, #24]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6999      	ldr	r1, [r3, #24]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	021a      	lsls	r2, r3, #8
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	619a      	str	r2, [r3, #24]
      break;
 80056c4:	e043      	b.n	800574e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68b9      	ldr	r1, [r7, #8]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 fa89 	bl	8005be4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	69da      	ldr	r2, [r3, #28]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f042 0208 	orr.w	r2, r2, #8
 80056e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69da      	ldr	r2, [r3, #28]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0204 	bic.w	r2, r2, #4
 80056f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69d9      	ldr	r1, [r3, #28]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	691a      	ldr	r2, [r3, #16]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	61da      	str	r2, [r3, #28]
      break;
 8005704:	e023      	b.n	800574e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68b9      	ldr	r1, [r7, #8]
 800570c:	4618      	mov	r0, r3
 800570e:	f000 fad3 	bl	8005cb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69da      	ldr	r2, [r3, #28]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005720:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69da      	ldr	r2, [r3, #28]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005730:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69d9      	ldr	r1, [r3, #28]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	021a      	lsls	r2, r3, #8
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	61da      	str	r2, [r3, #28]
      break;
 8005746:	e002      	b.n	800574e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	75fb      	strb	r3, [r7, #23]
      break;
 800574c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005756:	7dfb      	ldrb	r3, [r7, #23]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <HAL_TIM_ConfigClockSource+0x1c>
 8005778:	2302      	movs	r3, #2
 800577a:	e0b4      	b.n	80058e6 <HAL_TIM_ConfigClockSource+0x186>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800579a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057b4:	d03e      	beq.n	8005834 <HAL_TIM_ConfigClockSource+0xd4>
 80057b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057ba:	f200 8087 	bhi.w	80058cc <HAL_TIM_ConfigClockSource+0x16c>
 80057be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057c2:	f000 8086 	beq.w	80058d2 <HAL_TIM_ConfigClockSource+0x172>
 80057c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ca:	d87f      	bhi.n	80058cc <HAL_TIM_ConfigClockSource+0x16c>
 80057cc:	2b70      	cmp	r3, #112	@ 0x70
 80057ce:	d01a      	beq.n	8005806 <HAL_TIM_ConfigClockSource+0xa6>
 80057d0:	2b70      	cmp	r3, #112	@ 0x70
 80057d2:	d87b      	bhi.n	80058cc <HAL_TIM_ConfigClockSource+0x16c>
 80057d4:	2b60      	cmp	r3, #96	@ 0x60
 80057d6:	d050      	beq.n	800587a <HAL_TIM_ConfigClockSource+0x11a>
 80057d8:	2b60      	cmp	r3, #96	@ 0x60
 80057da:	d877      	bhi.n	80058cc <HAL_TIM_ConfigClockSource+0x16c>
 80057dc:	2b50      	cmp	r3, #80	@ 0x50
 80057de:	d03c      	beq.n	800585a <HAL_TIM_ConfigClockSource+0xfa>
 80057e0:	2b50      	cmp	r3, #80	@ 0x50
 80057e2:	d873      	bhi.n	80058cc <HAL_TIM_ConfigClockSource+0x16c>
 80057e4:	2b40      	cmp	r3, #64	@ 0x40
 80057e6:	d058      	beq.n	800589a <HAL_TIM_ConfigClockSource+0x13a>
 80057e8:	2b40      	cmp	r3, #64	@ 0x40
 80057ea:	d86f      	bhi.n	80058cc <HAL_TIM_ConfigClockSource+0x16c>
 80057ec:	2b30      	cmp	r3, #48	@ 0x30
 80057ee:	d064      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0x15a>
 80057f0:	2b30      	cmp	r3, #48	@ 0x30
 80057f2:	d86b      	bhi.n	80058cc <HAL_TIM_ConfigClockSource+0x16c>
 80057f4:	2b20      	cmp	r3, #32
 80057f6:	d060      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0x15a>
 80057f8:	2b20      	cmp	r3, #32
 80057fa:	d867      	bhi.n	80058cc <HAL_TIM_ConfigClockSource+0x16c>
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d05c      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0x15a>
 8005800:	2b10      	cmp	r3, #16
 8005802:	d05a      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0x15a>
 8005804:	e062      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6818      	ldr	r0, [r3, #0]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	6899      	ldr	r1, [r3, #8]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f000 fb19 	bl	8005e4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005828:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	609a      	str	r2, [r3, #8]
      break;
 8005832:	e04f      	b.n	80058d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6818      	ldr	r0, [r3, #0]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	6899      	ldr	r1, [r3, #8]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	f000 fb02 	bl	8005e4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689a      	ldr	r2, [r3, #8]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005856:	609a      	str	r2, [r3, #8]
      break;
 8005858:	e03c      	b.n	80058d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6818      	ldr	r0, [r3, #0]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	6859      	ldr	r1, [r3, #4]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	461a      	mov	r2, r3
 8005868:	f000 fa76 	bl	8005d58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2150      	movs	r1, #80	@ 0x50
 8005872:	4618      	mov	r0, r3
 8005874:	f000 facf 	bl	8005e16 <TIM_ITRx_SetConfig>
      break;
 8005878:	e02c      	b.n	80058d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6818      	ldr	r0, [r3, #0]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	6859      	ldr	r1, [r3, #4]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	461a      	mov	r2, r3
 8005888:	f000 fa95 	bl	8005db6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2160      	movs	r1, #96	@ 0x60
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fabf 	bl	8005e16 <TIM_ITRx_SetConfig>
      break;
 8005898:	e01c      	b.n	80058d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6818      	ldr	r0, [r3, #0]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	6859      	ldr	r1, [r3, #4]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	461a      	mov	r2, r3
 80058a8:	f000 fa56 	bl	8005d58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2140      	movs	r1, #64	@ 0x40
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 faaf 	bl	8005e16 <TIM_ITRx_SetConfig>
      break;
 80058b8:	e00c      	b.n	80058d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4619      	mov	r1, r3
 80058c4:	4610      	mov	r0, r2
 80058c6:	f000 faa6 	bl	8005e16 <TIM_ITRx_SetConfig>
      break;
 80058ca:	e003      	b.n	80058d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	73fb      	strb	r3, [r7, #15]
      break;
 80058d0:	e000      	b.n	80058d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800592a:	b480      	push	{r7}
 800592c:	b083      	sub	sp, #12
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005932:	bf00      	nop
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
	...

08005940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a34      	ldr	r2, [pc, #208]	@ (8005a24 <TIM_Base_SetConfig+0xe4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d00f      	beq.n	8005978 <TIM_Base_SetConfig+0x38>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800595e:	d00b      	beq.n	8005978 <TIM_Base_SetConfig+0x38>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a31      	ldr	r2, [pc, #196]	@ (8005a28 <TIM_Base_SetConfig+0xe8>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d007      	beq.n	8005978 <TIM_Base_SetConfig+0x38>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a30      	ldr	r2, [pc, #192]	@ (8005a2c <TIM_Base_SetConfig+0xec>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d003      	beq.n	8005978 <TIM_Base_SetConfig+0x38>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a2f      	ldr	r2, [pc, #188]	@ (8005a30 <TIM_Base_SetConfig+0xf0>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d108      	bne.n	800598a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800597e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a25      	ldr	r2, [pc, #148]	@ (8005a24 <TIM_Base_SetConfig+0xe4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d01b      	beq.n	80059ca <TIM_Base_SetConfig+0x8a>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005998:	d017      	beq.n	80059ca <TIM_Base_SetConfig+0x8a>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a22      	ldr	r2, [pc, #136]	@ (8005a28 <TIM_Base_SetConfig+0xe8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d013      	beq.n	80059ca <TIM_Base_SetConfig+0x8a>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a21      	ldr	r2, [pc, #132]	@ (8005a2c <TIM_Base_SetConfig+0xec>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00f      	beq.n	80059ca <TIM_Base_SetConfig+0x8a>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a20      	ldr	r2, [pc, #128]	@ (8005a30 <TIM_Base_SetConfig+0xf0>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d00b      	beq.n	80059ca <TIM_Base_SetConfig+0x8a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a1f      	ldr	r2, [pc, #124]	@ (8005a34 <TIM_Base_SetConfig+0xf4>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d007      	beq.n	80059ca <TIM_Base_SetConfig+0x8a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a1e      	ldr	r2, [pc, #120]	@ (8005a38 <TIM_Base_SetConfig+0xf8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d003      	beq.n	80059ca <TIM_Base_SetConfig+0x8a>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a3c <TIM_Base_SetConfig+0xfc>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d108      	bne.n	80059dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4313      	orrs	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a08      	ldr	r2, [pc, #32]	@ (8005a24 <TIM_Base_SetConfig+0xe4>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d103      	bne.n	8005a10 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	691a      	ldr	r2, [r3, #16]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	615a      	str	r2, [r3, #20]
}
 8005a16:	bf00      	nop
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	40010000 	.word	0x40010000
 8005a28:	40000400 	.word	0x40000400
 8005a2c:	40000800 	.word	0x40000800
 8005a30:	40000c00 	.word	0x40000c00
 8005a34:	40014000 	.word	0x40014000
 8005a38:	40014400 	.word	0x40014400
 8005a3c:	40014800 	.word	0x40014800

08005a40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	f023 0201 	bic.w	r2, r3, #1
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0303 	bic.w	r3, r3, #3
 8005a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f023 0302 	bic.w	r3, r3, #2
 8005a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a1c      	ldr	r2, [pc, #112]	@ (8005b08 <TIM_OC1_SetConfig+0xc8>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d10c      	bne.n	8005ab6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f023 0308 	bic.w	r3, r3, #8
 8005aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f023 0304 	bic.w	r3, r3, #4
 8005ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a13      	ldr	r2, [pc, #76]	@ (8005b08 <TIM_OC1_SetConfig+0xc8>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d111      	bne.n	8005ae2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	621a      	str	r2, [r3, #32]
}
 8005afc:	bf00      	nop
 8005afe:	371c      	adds	r7, #28
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	40010000 	.word	0x40010000

08005b0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	f023 0210 	bic.w	r2, r3, #16
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	021b      	lsls	r3, r3, #8
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f023 0320 	bic.w	r3, r3, #32
 8005b56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	011b      	lsls	r3, r3, #4
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a1e      	ldr	r2, [pc, #120]	@ (8005be0 <TIM_OC2_SetConfig+0xd4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d10d      	bne.n	8005b88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	011b      	lsls	r3, r3, #4
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a15      	ldr	r2, [pc, #84]	@ (8005be0 <TIM_OC2_SetConfig+0xd4>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d113      	bne.n	8005bb8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	621a      	str	r2, [r3, #32]
}
 8005bd2:	bf00      	nop
 8005bd4:	371c      	adds	r7, #28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	40010000 	.word	0x40010000

08005be4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0303 	bic.w	r3, r3, #3
 8005c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	021b      	lsls	r3, r3, #8
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8005cb4 <TIM_OC3_SetConfig+0xd0>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d10d      	bne.n	8005c5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	021b      	lsls	r3, r3, #8
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a14      	ldr	r2, [pc, #80]	@ (8005cb4 <TIM_OC3_SetConfig+0xd0>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d113      	bne.n	8005c8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	621a      	str	r2, [r3, #32]
}
 8005ca8:	bf00      	nop
 8005caa:	371c      	adds	r7, #28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	40010000 	.word	0x40010000

08005cb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	021b      	lsls	r3, r3, #8
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	031b      	lsls	r3, r3, #12
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a10      	ldr	r2, [pc, #64]	@ (8005d54 <TIM_OC4_SetConfig+0x9c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d109      	bne.n	8005d2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	019b      	lsls	r3, r3, #6
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	621a      	str	r2, [r3, #32]
}
 8005d46:	bf00      	nop
 8005d48:	371c      	adds	r7, #28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	40010000 	.word	0x40010000

08005d58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	f023 0201 	bic.w	r2, r3, #1
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	011b      	lsls	r3, r3, #4
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f023 030a 	bic.w	r3, r3, #10
 8005d94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	621a      	str	r2, [r3, #32]
}
 8005daa:	bf00      	nop
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b087      	sub	sp, #28
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	f023 0210 	bic.w	r2, r3, #16
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005de0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	031b      	lsls	r3, r3, #12
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005df2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	621a      	str	r2, [r3, #32]
}
 8005e0a:	bf00      	nop
 8005e0c:	371c      	adds	r7, #28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b085      	sub	sp, #20
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f043 0307 	orr.w	r3, r3, #7
 8005e38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	609a      	str	r2, [r3, #8]
}
 8005e40:	bf00      	nop
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b087      	sub	sp, #28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	021a      	lsls	r2, r3, #8
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	609a      	str	r2, [r3, #8]
}
 8005e80:	bf00      	nop
 8005e82:	371c      	adds	r7, #28
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f003 031f 	and.w	r3, r3, #31
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6a1a      	ldr	r2, [r3, #32]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	43db      	mvns	r3, r3
 8005eae:	401a      	ands	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a1a      	ldr	r2, [r3, #32]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f003 031f 	and.w	r3, r3, #31
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	621a      	str	r2, [r3, #32]
}
 8005eca:	bf00      	nop
 8005ecc:	371c      	adds	r7, #28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
	...

08005ed8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d101      	bne.n	8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005eec:	2302      	movs	r3, #2
 8005eee:	e050      	b.n	8005f92 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2202      	movs	r2, #2
 8005efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d018      	beq.n	8005f66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f3c:	d013      	beq.n	8005f66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a18      	ldr	r2, [pc, #96]	@ (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d00e      	beq.n	8005f66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a16      	ldr	r2, [pc, #88]	@ (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d009      	beq.n	8005f66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a15      	ldr	r2, [pc, #84]	@ (8005fac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d004      	beq.n	8005f66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a13      	ldr	r2, [pc, #76]	@ (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d10c      	bne.n	8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	40010000 	.word	0x40010000
 8005fa4:	40000400 	.word	0x40000400
 8005fa8:	40000800 	.word	0x40000800
 8005fac:	40000c00 	.word	0x40000c00
 8005fb0:	40014000 	.word	0x40014000

08005fb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e03f      	b.n	800606e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d106      	bne.n	8006008 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7fd f9f4 	bl	80033f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2224      	movs	r2, #36	@ 0x24
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68da      	ldr	r2, [r3, #12]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800601e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fddf 	bl	8006be4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	691a      	ldr	r2, [r3, #16]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006034:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	695a      	ldr	r2, [r3, #20]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006044:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68da      	ldr	r2, [r3, #12]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006054:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2220      	movs	r2, #32
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2220      	movs	r2, #32
 8006068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3708      	adds	r7, #8
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b08a      	sub	sp, #40	@ 0x28
 800607a:	af02      	add	r7, sp, #8
 800607c:	60f8      	str	r0, [r7, #12]
 800607e:	60b9      	str	r1, [r7, #8]
 8006080:	603b      	str	r3, [r7, #0]
 8006082:	4613      	mov	r3, r2
 8006084:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b20      	cmp	r3, #32
 8006094:	d17c      	bne.n	8006190 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d002      	beq.n	80060a2 <HAL_UART_Transmit+0x2c>
 800609c:	88fb      	ldrh	r3, [r7, #6]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e075      	b.n	8006192 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d101      	bne.n	80060b4 <HAL_UART_Transmit+0x3e>
 80060b0:	2302      	movs	r3, #2
 80060b2:	e06e      	b.n	8006192 <HAL_UART_Transmit+0x11c>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2221      	movs	r2, #33	@ 0x21
 80060c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060ca:	f7fd fb81 	bl	80037d0 <HAL_GetTick>
 80060ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	88fa      	ldrh	r2, [r7, #6]
 80060d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	88fa      	ldrh	r2, [r7, #6]
 80060da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060e4:	d108      	bne.n	80060f8 <HAL_UART_Transmit+0x82>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d104      	bne.n	80060f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80060ee:	2300      	movs	r3, #0
 80060f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	61bb      	str	r3, [r7, #24]
 80060f6:	e003      	b.n	8006100 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060fc:	2300      	movs	r3, #0
 80060fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8006108:	e02a      	b.n	8006160 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2200      	movs	r2, #0
 8006112:	2180      	movs	r1, #128	@ 0x80
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f000 fb1f 	bl	8006758 <UART_WaitOnFlagUntilTimeout>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e036      	b.n	8006192 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10b      	bne.n	8006142 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	461a      	mov	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006138:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	3302      	adds	r3, #2
 800613e:	61bb      	str	r3, [r7, #24]
 8006140:	e007      	b.n	8006152 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	781a      	ldrb	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	3301      	adds	r3, #1
 8006150:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006156:	b29b      	uxth	r3, r3
 8006158:	3b01      	subs	r3, #1
 800615a:	b29a      	uxth	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006164:	b29b      	uxth	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1cf      	bne.n	800610a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	2200      	movs	r2, #0
 8006172:	2140      	movs	r1, #64	@ 0x40
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 faef 	bl	8006758 <UART_WaitOnFlagUntilTimeout>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d001      	beq.n	8006184 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e006      	b.n	8006192 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2220      	movs	r2, #32
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800618c:	2300      	movs	r3, #0
 800618e:	e000      	b.n	8006192 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006190:	2302      	movs	r3, #2
  }
}
 8006192:	4618      	mov	r0, r3
 8006194:	3720      	adds	r7, #32
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b084      	sub	sp, #16
 800619e:	af00      	add	r7, sp, #0
 80061a0:	60f8      	str	r0, [r7, #12]
 80061a2:	60b9      	str	r1, [r7, #8]
 80061a4:	4613      	mov	r3, r2
 80061a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b20      	cmp	r3, #32
 80061b2:	d11d      	bne.n	80061f0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <HAL_UART_Receive_IT+0x26>
 80061ba:	88fb      	ldrh	r3, [r7, #6]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d101      	bne.n	80061c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e016      	b.n	80061f2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d101      	bne.n	80061d2 <HAL_UART_Receive_IT+0x38>
 80061ce:	2302      	movs	r3, #2
 80061d0:	e00f      	b.n	80061f2 <HAL_UART_Receive_IT+0x58>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80061e0:	88fb      	ldrh	r3, [r7, #6]
 80061e2:	461a      	mov	r2, r3
 80061e4:	68b9      	ldr	r1, [r7, #8]
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f000 fb24 	bl	8006834 <UART_Start_Receive_IT>
 80061ec:	4603      	mov	r3, r0
 80061ee:	e000      	b.n	80061f2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80061f0:	2302      	movs	r3, #2
  }
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
	...

080061fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b0ba      	sub	sp, #232	@ 0xe8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006222:	2300      	movs	r3, #0
 8006224:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006228:	2300      	movs	r3, #0
 800622a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800622e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006232:	f003 030f 	and.w	r3, r3, #15
 8006236:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800623a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10f      	bne.n	8006262 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006246:	f003 0320 	and.w	r3, r3, #32
 800624a:	2b00      	cmp	r3, #0
 800624c:	d009      	beq.n	8006262 <HAL_UART_IRQHandler+0x66>
 800624e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006252:	f003 0320 	and.w	r3, r3, #32
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fc07 	bl	8006a6e <UART_Receive_IT>
      return;
 8006260:	e256      	b.n	8006710 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006262:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 80de 	beq.w	8006428 <HAL_UART_IRQHandler+0x22c>
 800626c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b00      	cmp	r3, #0
 8006276:	d106      	bne.n	8006286 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800627c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 80d1 	beq.w	8006428 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00b      	beq.n	80062aa <HAL_UART_IRQHandler+0xae>
 8006292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800629a:	2b00      	cmp	r3, #0
 800629c:	d005      	beq.n	80062aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a2:	f043 0201 	orr.w	r2, r3, #1
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ae:	f003 0304 	and.w	r3, r3, #4
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00b      	beq.n	80062ce <HAL_UART_IRQHandler+0xd2>
 80062b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d005      	beq.n	80062ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c6:	f043 0202 	orr.w	r2, r3, #2
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00b      	beq.n	80062f2 <HAL_UART_IRQHandler+0xf6>
 80062da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d005      	beq.n	80062f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ea:	f043 0204 	orr.w	r2, r3, #4
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80062f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062f6:	f003 0308 	and.w	r3, r3, #8
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d011      	beq.n	8006322 <HAL_UART_IRQHandler+0x126>
 80062fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006302:	f003 0320 	and.w	r3, r3, #32
 8006306:	2b00      	cmp	r3, #0
 8006308:	d105      	bne.n	8006316 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800630a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d005      	beq.n	8006322 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631a:	f043 0208 	orr.w	r2, r3, #8
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006326:	2b00      	cmp	r3, #0
 8006328:	f000 81ed 	beq.w	8006706 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800632c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006330:	f003 0320 	and.w	r3, r3, #32
 8006334:	2b00      	cmp	r3, #0
 8006336:	d008      	beq.n	800634a <HAL_UART_IRQHandler+0x14e>
 8006338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800633c:	f003 0320 	and.w	r3, r3, #32
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fb92 	bl	8006a6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006354:	2b40      	cmp	r3, #64	@ 0x40
 8006356:	bf0c      	ite	eq
 8006358:	2301      	moveq	r3, #1
 800635a:	2300      	movne	r3, #0
 800635c:	b2db      	uxtb	r3, r3
 800635e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006366:	f003 0308 	and.w	r3, r3, #8
 800636a:	2b00      	cmp	r3, #0
 800636c:	d103      	bne.n	8006376 <HAL_UART_IRQHandler+0x17a>
 800636e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006372:	2b00      	cmp	r3, #0
 8006374:	d04f      	beq.n	8006416 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fa9a 	bl	80068b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006386:	2b40      	cmp	r3, #64	@ 0x40
 8006388:	d141      	bne.n	800640e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3314      	adds	r3, #20
 8006390:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006394:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006398:	e853 3f00 	ldrex	r3, [r3]
 800639c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80063a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	3314      	adds	r3, #20
 80063b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80063b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80063ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80063c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80063c6:	e841 2300 	strex	r3, r2, [r1]
 80063ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80063ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1d9      	bne.n	800638a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d013      	beq.n	8006406 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e2:	4a7d      	ldr	r2, [pc, #500]	@ (80065d8 <HAL_UART_IRQHandler+0x3dc>)
 80063e4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7fd ff4f 	bl	800428e <HAL_DMA_Abort_IT>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d016      	beq.n	8006424 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006400:	4610      	mov	r0, r2
 8006402:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006404:	e00e      	b.n	8006424 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f990 	bl	800672c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800640c:	e00a      	b.n	8006424 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f98c 	bl	800672c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006414:	e006      	b.n	8006424 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f988 	bl	800672c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8006422:	e170      	b.n	8006706 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006424:	bf00      	nop
    return;
 8006426:	e16e      	b.n	8006706 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800642c:	2b01      	cmp	r3, #1
 800642e:	f040 814a 	bne.w	80066c6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006436:	f003 0310 	and.w	r3, r3, #16
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 8143 	beq.w	80066c6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	2b00      	cmp	r3, #0
 800644a:	f000 813c 	beq.w	80066c6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800644e:	2300      	movs	r3, #0
 8006450:	60bb      	str	r3, [r7, #8]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	60bb      	str	r3, [r7, #8]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	60bb      	str	r3, [r7, #8]
 8006462:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800646e:	2b40      	cmp	r3, #64	@ 0x40
 8006470:	f040 80b4 	bne.w	80065dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006480:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 8140 	beq.w	800670a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800648e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006492:	429a      	cmp	r2, r3
 8006494:	f080 8139 	bcs.w	800670a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800649e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064aa:	f000 8088 	beq.w	80065be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	330c      	adds	r3, #12
 80064b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80064c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	330c      	adds	r3, #12
 80064d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80064da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80064de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80064e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80064ea:	e841 2300 	strex	r3, r2, [r1]
 80064ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80064f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1d9      	bne.n	80064ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3314      	adds	r3, #20
 8006500:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006502:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006504:	e853 3f00 	ldrex	r3, [r3]
 8006508:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800650a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800650c:	f023 0301 	bic.w	r3, r3, #1
 8006510:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3314      	adds	r3, #20
 800651a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800651e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006522:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006524:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006526:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800652a:	e841 2300 	strex	r3, r2, [r1]
 800652e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006530:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1e1      	bne.n	80064fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	3314      	adds	r3, #20
 800653c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006540:	e853 3f00 	ldrex	r3, [r3]
 8006544:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006546:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006548:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800654c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3314      	adds	r3, #20
 8006556:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800655a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800655c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006560:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006562:	e841 2300 	strex	r3, r2, [r1]
 8006566:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006568:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1e3      	bne.n	8006536 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2220      	movs	r2, #32
 8006572:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	330c      	adds	r3, #12
 8006582:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006586:	e853 3f00 	ldrex	r3, [r3]
 800658a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800658c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800658e:	f023 0310 	bic.w	r3, r3, #16
 8006592:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	330c      	adds	r3, #12
 800659c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80065a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80065a2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065a8:	e841 2300 	strex	r3, r2, [r1]
 80065ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80065ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1e3      	bne.n	800657c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7fd fdf8 	bl	80041ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	4619      	mov	r1, r3
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f8b6 	bl	8006740 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065d4:	e099      	b.n	800670a <HAL_UART_IRQHandler+0x50e>
 80065d6:	bf00      	nop
 80065d8:	08006977 	.word	0x08006977
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 808b 	beq.w	800670e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80065f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 8086 	beq.w	800670e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	330c      	adds	r3, #12
 8006608:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800660c:	e853 3f00 	ldrex	r3, [r3]
 8006610:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006614:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006618:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	330c      	adds	r3, #12
 8006622:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006626:	647a      	str	r2, [r7, #68]	@ 0x44
 8006628:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800662c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800662e:	e841 2300 	strex	r3, r2, [r1]
 8006632:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1e3      	bne.n	8006602 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	3314      	adds	r3, #20
 8006640:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006644:	e853 3f00 	ldrex	r3, [r3]
 8006648:	623b      	str	r3, [r7, #32]
   return(result);
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	f023 0301 	bic.w	r3, r3, #1
 8006650:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3314      	adds	r3, #20
 800665a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800665e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006660:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006662:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006666:	e841 2300 	strex	r3, r2, [r1]
 800666a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800666c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1e3      	bne.n	800663a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2220      	movs	r2, #32
 8006676:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	330c      	adds	r3, #12
 8006686:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	e853 3f00 	ldrex	r3, [r3]
 800668e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f023 0310 	bic.w	r3, r3, #16
 8006696:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	330c      	adds	r3, #12
 80066a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80066a4:	61fa      	str	r2, [r7, #28]
 80066a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a8:	69b9      	ldr	r1, [r7, #24]
 80066aa:	69fa      	ldr	r2, [r7, #28]
 80066ac:	e841 2300 	strex	r3, r2, [r1]
 80066b0:	617b      	str	r3, [r7, #20]
   return(result);
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1e3      	bne.n	8006680 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066bc:	4619      	mov	r1, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f83e 	bl	8006740 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066c4:	e023      	b.n	800670e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d009      	beq.n	80066e6 <HAL_UART_IRQHandler+0x4ea>
 80066d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f95d 	bl	800699e <UART_Transmit_IT>
    return;
 80066e4:	e014      	b.n	8006710 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00e      	beq.n	8006710 <HAL_UART_IRQHandler+0x514>
 80066f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d008      	beq.n	8006710 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f99d 	bl	8006a3e <UART_EndTransmit_IT>
    return;
 8006704:	e004      	b.n	8006710 <HAL_UART_IRQHandler+0x514>
    return;
 8006706:	bf00      	nop
 8006708:	e002      	b.n	8006710 <HAL_UART_IRQHandler+0x514>
      return;
 800670a:	bf00      	nop
 800670c:	e000      	b.n	8006710 <HAL_UART_IRQHandler+0x514>
      return;
 800670e:	bf00      	nop
  }
}
 8006710:	37e8      	adds	r7, #232	@ 0xe8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop

08006718 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	460b      	mov	r3, r1
 800674a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b090      	sub	sp, #64	@ 0x40
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	603b      	str	r3, [r7, #0]
 8006764:	4613      	mov	r3, r2
 8006766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006768:	e050      	b.n	800680c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800676a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800676c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006770:	d04c      	beq.n	800680c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006772:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006774:	2b00      	cmp	r3, #0
 8006776:	d007      	beq.n	8006788 <UART_WaitOnFlagUntilTimeout+0x30>
 8006778:	f7fd f82a 	bl	80037d0 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006784:	429a      	cmp	r2, r3
 8006786:	d241      	bcs.n	800680c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	330c      	adds	r3, #12
 800678e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006792:	e853 3f00 	ldrex	r3, [r3]
 8006796:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800679e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	330c      	adds	r3, #12
 80067a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80067a8:	637a      	str	r2, [r7, #52]	@ 0x34
 80067aa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80067ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067b0:	e841 2300 	strex	r3, r2, [r1]
 80067b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80067b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1e5      	bne.n	8006788 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3314      	adds	r3, #20
 80067c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	e853 3f00 	ldrex	r3, [r3]
 80067ca:	613b      	str	r3, [r7, #16]
   return(result);
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f023 0301 	bic.w	r3, r3, #1
 80067d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3314      	adds	r3, #20
 80067da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067dc:	623a      	str	r2, [r7, #32]
 80067de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e0:	69f9      	ldr	r1, [r7, #28]
 80067e2:	6a3a      	ldr	r2, [r7, #32]
 80067e4:	e841 2300 	strex	r3, r2, [r1]
 80067e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1e5      	bne.n	80067bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2220      	movs	r2, #32
 80067f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2220      	movs	r2, #32
 80067fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e00f      	b.n	800682c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	4013      	ands	r3, r2
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	429a      	cmp	r2, r3
 800681a:	bf0c      	ite	eq
 800681c:	2301      	moveq	r3, #1
 800681e:	2300      	movne	r3, #0
 8006820:	b2db      	uxtb	r3, r3
 8006822:	461a      	mov	r2, r3
 8006824:	79fb      	ldrb	r3, [r7, #7]
 8006826:	429a      	cmp	r2, r3
 8006828:	d09f      	beq.n	800676a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3740      	adds	r7, #64	@ 0x40
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	4613      	mov	r3, r2
 8006840:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	88fa      	ldrh	r2, [r7, #6]
 800684c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	88fa      	ldrh	r2, [r7, #6]
 8006852:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2222      	movs	r2, #34	@ 0x22
 800685e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d007      	beq.n	8006882 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68da      	ldr	r2, [r3, #12]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006880:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	695a      	ldr	r2, [r3, #20]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f042 0201 	orr.w	r2, r2, #1
 8006890:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68da      	ldr	r2, [r3, #12]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f042 0220 	orr.w	r2, r2, #32
 80068a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b095      	sub	sp, #84	@ 0x54
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	330c      	adds	r3, #12
 80068be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c2:	e853 3f00 	ldrex	r3, [r3]
 80068c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	330c      	adds	r3, #12
 80068d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068d8:	643a      	str	r2, [r7, #64]	@ 0x40
 80068da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068e0:	e841 2300 	strex	r3, r2, [r1]
 80068e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1e5      	bne.n	80068b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3314      	adds	r3, #20
 80068f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	e853 3f00 	ldrex	r3, [r3]
 80068fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	f023 0301 	bic.w	r3, r3, #1
 8006902:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3314      	adds	r3, #20
 800690a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800690c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800690e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006910:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006912:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006914:	e841 2300 	strex	r3, r2, [r1]
 8006918:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800691a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1e5      	bne.n	80068ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006924:	2b01      	cmp	r3, #1
 8006926:	d119      	bne.n	800695c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	330c      	adds	r3, #12
 800692e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	e853 3f00 	ldrex	r3, [r3]
 8006936:	60bb      	str	r3, [r7, #8]
   return(result);
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f023 0310 	bic.w	r3, r3, #16
 800693e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	330c      	adds	r3, #12
 8006946:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006948:	61ba      	str	r2, [r7, #24]
 800694a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694c:	6979      	ldr	r1, [r7, #20]
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	e841 2300 	strex	r3, r2, [r1]
 8006954:	613b      	str	r3, [r7, #16]
   return(result);
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1e5      	bne.n	8006928 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2220      	movs	r2, #32
 8006960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800696a:	bf00      	nop
 800696c:	3754      	adds	r7, #84	@ 0x54
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b084      	sub	sp, #16
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006982:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f7ff fecb 	bl	800672c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006996:	bf00      	nop
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800699e:	b480      	push	{r7}
 80069a0:	b085      	sub	sp, #20
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b21      	cmp	r3, #33	@ 0x21
 80069b0:	d13e      	bne.n	8006a30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069ba:	d114      	bne.n	80069e6 <UART_Transmit_IT+0x48>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d110      	bne.n	80069e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	881b      	ldrh	r3, [r3, #0]
 80069ce:	461a      	mov	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	1c9a      	adds	r2, r3, #2
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	621a      	str	r2, [r3, #32]
 80069e4:	e008      	b.n	80069f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	1c59      	adds	r1, r3, #1
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	6211      	str	r1, [r2, #32]
 80069f0:	781a      	ldrb	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	3b01      	subs	r3, #1
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	4619      	mov	r1, r3
 8006a06:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10f      	bne.n	8006a2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68da      	ldr	r2, [r3, #12]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68da      	ldr	r2, [r3, #12]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	e000      	b.n	8006a32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a30:	2302      	movs	r3, #2
  }
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b082      	sub	sp, #8
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68da      	ldr	r2, [r3, #12]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7ff fe5a 	bl	8006718 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3708      	adds	r7, #8
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b08c      	sub	sp, #48	@ 0x30
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b22      	cmp	r3, #34	@ 0x22
 8006a80:	f040 80ab 	bne.w	8006bda <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a8c:	d117      	bne.n	8006abe <UART_Receive_IT+0x50>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d113      	bne.n	8006abe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a96:	2300      	movs	r3, #0
 8006a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab6:	1c9a      	adds	r2, r3, #2
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	629a      	str	r2, [r3, #40]	@ 0x28
 8006abc:	e026      	b.n	8006b0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ad0:	d007      	beq.n	8006ae2 <UART_Receive_IT+0x74>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10a      	bne.n	8006af0 <UART_Receive_IT+0x82>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d106      	bne.n	8006af0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aec:	701a      	strb	r2, [r3, #0]
 8006aee:	e008      	b.n	8006b02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	3b01      	subs	r3, #1
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d15a      	bne.n	8006bd6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68da      	ldr	r2, [r3, #12]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 0220 	bic.w	r2, r2, #32
 8006b2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68da      	ldr	r2, [r3, #12]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	695a      	ldr	r2, [r3, #20]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f022 0201 	bic.w	r2, r2, #1
 8006b4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2220      	movs	r2, #32
 8006b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d135      	bne.n	8006bcc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	330c      	adds	r3, #12
 8006b6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	613b      	str	r3, [r7, #16]
   return(result);
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f023 0310 	bic.w	r3, r3, #16
 8006b7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	330c      	adds	r3, #12
 8006b84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b86:	623a      	str	r2, [r7, #32]
 8006b88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	69f9      	ldr	r1, [r7, #28]
 8006b8c:	6a3a      	ldr	r2, [r7, #32]
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e5      	bne.n	8006b66 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0310 	and.w	r3, r3, #16
 8006ba4:	2b10      	cmp	r3, #16
 8006ba6:	d10a      	bne.n	8006bbe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	60fb      	str	r3, [r7, #12]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f7ff fdbb 	bl	8006740 <HAL_UARTEx_RxEventCallback>
 8006bca:	e002      	b.n	8006bd2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7fc fa23 	bl	8003018 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	e002      	b.n	8006bdc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	e000      	b.n	8006bdc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006bda:	2302      	movs	r3, #2
  }
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3730      	adds	r7, #48	@ 0x30
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006be8:	b0c0      	sub	sp, #256	@ 0x100
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c00:	68d9      	ldr	r1, [r3, #12]
 8006c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	ea40 0301 	orr.w	r3, r0, r1
 8006c0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	431a      	orrs	r2, r3
 8006c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006c3c:	f021 010c 	bic.w	r1, r1, #12
 8006c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c4a:	430b      	orrs	r3, r1
 8006c4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c5e:	6999      	ldr	r1, [r3, #24]
 8006c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	ea40 0301 	orr.w	r3, r0, r1
 8006c6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	4b8f      	ldr	r3, [pc, #572]	@ (8006eb0 <UART_SetConfig+0x2cc>)
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d005      	beq.n	8006c84 <UART_SetConfig+0xa0>
 8006c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	4b8d      	ldr	r3, [pc, #564]	@ (8006eb4 <UART_SetConfig+0x2d0>)
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d104      	bne.n	8006c8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c84:	f7fe f978 	bl	8004f78 <HAL_RCC_GetPCLK2Freq>
 8006c88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006c8c:	e003      	b.n	8006c96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c8e:	f7fe f95f 	bl	8004f50 <HAL_RCC_GetPCLK1Freq>
 8006c92:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c9a:	69db      	ldr	r3, [r3, #28]
 8006c9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ca0:	f040 810c 	bne.w	8006ebc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006cae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006cb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006cb6:	4622      	mov	r2, r4
 8006cb8:	462b      	mov	r3, r5
 8006cba:	1891      	adds	r1, r2, r2
 8006cbc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006cbe:	415b      	adcs	r3, r3
 8006cc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	eb12 0801 	adds.w	r8, r2, r1
 8006ccc:	4629      	mov	r1, r5
 8006cce:	eb43 0901 	adc.w	r9, r3, r1
 8006cd2:	f04f 0200 	mov.w	r2, #0
 8006cd6:	f04f 0300 	mov.w	r3, #0
 8006cda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ce2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ce6:	4690      	mov	r8, r2
 8006ce8:	4699      	mov	r9, r3
 8006cea:	4623      	mov	r3, r4
 8006cec:	eb18 0303 	adds.w	r3, r8, r3
 8006cf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006cf4:	462b      	mov	r3, r5
 8006cf6:	eb49 0303 	adc.w	r3, r9, r3
 8006cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d0a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006d0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d12:	460b      	mov	r3, r1
 8006d14:	18db      	adds	r3, r3, r3
 8006d16:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d18:	4613      	mov	r3, r2
 8006d1a:	eb42 0303 	adc.w	r3, r2, r3
 8006d1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006d24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006d28:	f7f9 fea8 	bl	8000a7c <__aeabi_uldivmod>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	460b      	mov	r3, r1
 8006d30:	4b61      	ldr	r3, [pc, #388]	@ (8006eb8 <UART_SetConfig+0x2d4>)
 8006d32:	fba3 2302 	umull	r2, r3, r3, r2
 8006d36:	095b      	lsrs	r3, r3, #5
 8006d38:	011c      	lsls	r4, r3, #4
 8006d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d44:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006d48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006d4c:	4642      	mov	r2, r8
 8006d4e:	464b      	mov	r3, r9
 8006d50:	1891      	adds	r1, r2, r2
 8006d52:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d54:	415b      	adcs	r3, r3
 8006d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d5c:	4641      	mov	r1, r8
 8006d5e:	eb12 0a01 	adds.w	sl, r2, r1
 8006d62:	4649      	mov	r1, r9
 8006d64:	eb43 0b01 	adc.w	fp, r3, r1
 8006d68:	f04f 0200 	mov.w	r2, #0
 8006d6c:	f04f 0300 	mov.w	r3, #0
 8006d70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d7c:	4692      	mov	sl, r2
 8006d7e:	469b      	mov	fp, r3
 8006d80:	4643      	mov	r3, r8
 8006d82:	eb1a 0303 	adds.w	r3, sl, r3
 8006d86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d8a:	464b      	mov	r3, r9
 8006d8c:	eb4b 0303 	adc.w	r3, fp, r3
 8006d90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006da0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006da4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006da8:	460b      	mov	r3, r1
 8006daa:	18db      	adds	r3, r3, r3
 8006dac:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dae:	4613      	mov	r3, r2
 8006db0:	eb42 0303 	adc.w	r3, r2, r3
 8006db4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006db6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006dba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006dbe:	f7f9 fe5d 	bl	8000a7c <__aeabi_uldivmod>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	4611      	mov	r1, r2
 8006dc8:	4b3b      	ldr	r3, [pc, #236]	@ (8006eb8 <UART_SetConfig+0x2d4>)
 8006dca:	fba3 2301 	umull	r2, r3, r3, r1
 8006dce:	095b      	lsrs	r3, r3, #5
 8006dd0:	2264      	movs	r2, #100	@ 0x64
 8006dd2:	fb02 f303 	mul.w	r3, r2, r3
 8006dd6:	1acb      	subs	r3, r1, r3
 8006dd8:	00db      	lsls	r3, r3, #3
 8006dda:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006dde:	4b36      	ldr	r3, [pc, #216]	@ (8006eb8 <UART_SetConfig+0x2d4>)
 8006de0:	fba3 2302 	umull	r2, r3, r3, r2
 8006de4:	095b      	lsrs	r3, r3, #5
 8006de6:	005b      	lsls	r3, r3, #1
 8006de8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006dec:	441c      	add	r4, r3
 8006dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006df8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006dfc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006e00:	4642      	mov	r2, r8
 8006e02:	464b      	mov	r3, r9
 8006e04:	1891      	adds	r1, r2, r2
 8006e06:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006e08:	415b      	adcs	r3, r3
 8006e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006e10:	4641      	mov	r1, r8
 8006e12:	1851      	adds	r1, r2, r1
 8006e14:	6339      	str	r1, [r7, #48]	@ 0x30
 8006e16:	4649      	mov	r1, r9
 8006e18:	414b      	adcs	r3, r1
 8006e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e1c:	f04f 0200 	mov.w	r2, #0
 8006e20:	f04f 0300 	mov.w	r3, #0
 8006e24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006e28:	4659      	mov	r1, fp
 8006e2a:	00cb      	lsls	r3, r1, #3
 8006e2c:	4651      	mov	r1, sl
 8006e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e32:	4651      	mov	r1, sl
 8006e34:	00ca      	lsls	r2, r1, #3
 8006e36:	4610      	mov	r0, r2
 8006e38:	4619      	mov	r1, r3
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	4642      	mov	r2, r8
 8006e3e:	189b      	adds	r3, r3, r2
 8006e40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e44:	464b      	mov	r3, r9
 8006e46:	460a      	mov	r2, r1
 8006e48:	eb42 0303 	adc.w	r3, r2, r3
 8006e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e5c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e64:	460b      	mov	r3, r1
 8006e66:	18db      	adds	r3, r3, r3
 8006e68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	eb42 0303 	adc.w	r3, r2, r3
 8006e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e7a:	f7f9 fdff 	bl	8000a7c <__aeabi_uldivmod>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb8 <UART_SetConfig+0x2d4>)
 8006e84:	fba3 1302 	umull	r1, r3, r3, r2
 8006e88:	095b      	lsrs	r3, r3, #5
 8006e8a:	2164      	movs	r1, #100	@ 0x64
 8006e8c:	fb01 f303 	mul.w	r3, r1, r3
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	00db      	lsls	r3, r3, #3
 8006e94:	3332      	adds	r3, #50	@ 0x32
 8006e96:	4a08      	ldr	r2, [pc, #32]	@ (8006eb8 <UART_SetConfig+0x2d4>)
 8006e98:	fba2 2303 	umull	r2, r3, r2, r3
 8006e9c:	095b      	lsrs	r3, r3, #5
 8006e9e:	f003 0207 	and.w	r2, r3, #7
 8006ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4422      	add	r2, r4
 8006eaa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006eac:	e106      	b.n	80070bc <UART_SetConfig+0x4d8>
 8006eae:	bf00      	nop
 8006eb0:	40011000 	.word	0x40011000
 8006eb4:	40011400 	.word	0x40011400
 8006eb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006ec6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006eca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006ece:	4642      	mov	r2, r8
 8006ed0:	464b      	mov	r3, r9
 8006ed2:	1891      	adds	r1, r2, r2
 8006ed4:	6239      	str	r1, [r7, #32]
 8006ed6:	415b      	adcs	r3, r3
 8006ed8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ede:	4641      	mov	r1, r8
 8006ee0:	1854      	adds	r4, r2, r1
 8006ee2:	4649      	mov	r1, r9
 8006ee4:	eb43 0501 	adc.w	r5, r3, r1
 8006ee8:	f04f 0200 	mov.w	r2, #0
 8006eec:	f04f 0300 	mov.w	r3, #0
 8006ef0:	00eb      	lsls	r3, r5, #3
 8006ef2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ef6:	00e2      	lsls	r2, r4, #3
 8006ef8:	4614      	mov	r4, r2
 8006efa:	461d      	mov	r5, r3
 8006efc:	4643      	mov	r3, r8
 8006efe:	18e3      	adds	r3, r4, r3
 8006f00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f04:	464b      	mov	r3, r9
 8006f06:	eb45 0303 	adc.w	r3, r5, r3
 8006f0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f1e:	f04f 0200 	mov.w	r2, #0
 8006f22:	f04f 0300 	mov.w	r3, #0
 8006f26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f2a:	4629      	mov	r1, r5
 8006f2c:	008b      	lsls	r3, r1, #2
 8006f2e:	4621      	mov	r1, r4
 8006f30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f34:	4621      	mov	r1, r4
 8006f36:	008a      	lsls	r2, r1, #2
 8006f38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006f3c:	f7f9 fd9e 	bl	8000a7c <__aeabi_uldivmod>
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	4b60      	ldr	r3, [pc, #384]	@ (80070c8 <UART_SetConfig+0x4e4>)
 8006f46:	fba3 2302 	umull	r2, r3, r3, r2
 8006f4a:	095b      	lsrs	r3, r3, #5
 8006f4c:	011c      	lsls	r4, r3, #4
 8006f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f52:	2200      	movs	r2, #0
 8006f54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f60:	4642      	mov	r2, r8
 8006f62:	464b      	mov	r3, r9
 8006f64:	1891      	adds	r1, r2, r2
 8006f66:	61b9      	str	r1, [r7, #24]
 8006f68:	415b      	adcs	r3, r3
 8006f6a:	61fb      	str	r3, [r7, #28]
 8006f6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f70:	4641      	mov	r1, r8
 8006f72:	1851      	adds	r1, r2, r1
 8006f74:	6139      	str	r1, [r7, #16]
 8006f76:	4649      	mov	r1, r9
 8006f78:	414b      	adcs	r3, r1
 8006f7a:	617b      	str	r3, [r7, #20]
 8006f7c:	f04f 0200 	mov.w	r2, #0
 8006f80:	f04f 0300 	mov.w	r3, #0
 8006f84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f88:	4659      	mov	r1, fp
 8006f8a:	00cb      	lsls	r3, r1, #3
 8006f8c:	4651      	mov	r1, sl
 8006f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f92:	4651      	mov	r1, sl
 8006f94:	00ca      	lsls	r2, r1, #3
 8006f96:	4610      	mov	r0, r2
 8006f98:	4619      	mov	r1, r3
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	4642      	mov	r2, r8
 8006f9e:	189b      	adds	r3, r3, r2
 8006fa0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006fa4:	464b      	mov	r3, r9
 8006fa6:	460a      	mov	r2, r1
 8006fa8:	eb42 0303 	adc.w	r3, r2, r3
 8006fac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006fba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006fbc:	f04f 0200 	mov.w	r2, #0
 8006fc0:	f04f 0300 	mov.w	r3, #0
 8006fc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006fc8:	4649      	mov	r1, r9
 8006fca:	008b      	lsls	r3, r1, #2
 8006fcc:	4641      	mov	r1, r8
 8006fce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fd2:	4641      	mov	r1, r8
 8006fd4:	008a      	lsls	r2, r1, #2
 8006fd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006fda:	f7f9 fd4f 	bl	8000a7c <__aeabi_uldivmod>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	4b38      	ldr	r3, [pc, #224]	@ (80070c8 <UART_SetConfig+0x4e4>)
 8006fe6:	fba3 2301 	umull	r2, r3, r3, r1
 8006fea:	095b      	lsrs	r3, r3, #5
 8006fec:	2264      	movs	r2, #100	@ 0x64
 8006fee:	fb02 f303 	mul.w	r3, r2, r3
 8006ff2:	1acb      	subs	r3, r1, r3
 8006ff4:	011b      	lsls	r3, r3, #4
 8006ff6:	3332      	adds	r3, #50	@ 0x32
 8006ff8:	4a33      	ldr	r2, [pc, #204]	@ (80070c8 <UART_SetConfig+0x4e4>)
 8006ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8006ffe:	095b      	lsrs	r3, r3, #5
 8007000:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007004:	441c      	add	r4, r3
 8007006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800700a:	2200      	movs	r2, #0
 800700c:	673b      	str	r3, [r7, #112]	@ 0x70
 800700e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007010:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007014:	4642      	mov	r2, r8
 8007016:	464b      	mov	r3, r9
 8007018:	1891      	adds	r1, r2, r2
 800701a:	60b9      	str	r1, [r7, #8]
 800701c:	415b      	adcs	r3, r3
 800701e:	60fb      	str	r3, [r7, #12]
 8007020:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007024:	4641      	mov	r1, r8
 8007026:	1851      	adds	r1, r2, r1
 8007028:	6039      	str	r1, [r7, #0]
 800702a:	4649      	mov	r1, r9
 800702c:	414b      	adcs	r3, r1
 800702e:	607b      	str	r3, [r7, #4]
 8007030:	f04f 0200 	mov.w	r2, #0
 8007034:	f04f 0300 	mov.w	r3, #0
 8007038:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800703c:	4659      	mov	r1, fp
 800703e:	00cb      	lsls	r3, r1, #3
 8007040:	4651      	mov	r1, sl
 8007042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007046:	4651      	mov	r1, sl
 8007048:	00ca      	lsls	r2, r1, #3
 800704a:	4610      	mov	r0, r2
 800704c:	4619      	mov	r1, r3
 800704e:	4603      	mov	r3, r0
 8007050:	4642      	mov	r2, r8
 8007052:	189b      	adds	r3, r3, r2
 8007054:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007056:	464b      	mov	r3, r9
 8007058:	460a      	mov	r2, r1
 800705a:	eb42 0303 	adc.w	r3, r2, r3
 800705e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	663b      	str	r3, [r7, #96]	@ 0x60
 800706a:	667a      	str	r2, [r7, #100]	@ 0x64
 800706c:	f04f 0200 	mov.w	r2, #0
 8007070:	f04f 0300 	mov.w	r3, #0
 8007074:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007078:	4649      	mov	r1, r9
 800707a:	008b      	lsls	r3, r1, #2
 800707c:	4641      	mov	r1, r8
 800707e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007082:	4641      	mov	r1, r8
 8007084:	008a      	lsls	r2, r1, #2
 8007086:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800708a:	f7f9 fcf7 	bl	8000a7c <__aeabi_uldivmod>
 800708e:	4602      	mov	r2, r0
 8007090:	460b      	mov	r3, r1
 8007092:	4b0d      	ldr	r3, [pc, #52]	@ (80070c8 <UART_SetConfig+0x4e4>)
 8007094:	fba3 1302 	umull	r1, r3, r3, r2
 8007098:	095b      	lsrs	r3, r3, #5
 800709a:	2164      	movs	r1, #100	@ 0x64
 800709c:	fb01 f303 	mul.w	r3, r1, r3
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	3332      	adds	r3, #50	@ 0x32
 80070a6:	4a08      	ldr	r2, [pc, #32]	@ (80070c8 <UART_SetConfig+0x4e4>)
 80070a8:	fba2 2303 	umull	r2, r3, r2, r3
 80070ac:	095b      	lsrs	r3, r3, #5
 80070ae:	f003 020f 	and.w	r2, r3, #15
 80070b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4422      	add	r2, r4
 80070ba:	609a      	str	r2, [r3, #8]
}
 80070bc:	bf00      	nop
 80070be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80070c2:	46bd      	mov	sp, r7
 80070c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070c8:	51eb851f 	.word	0x51eb851f

080070cc <siprintf>:
 80070cc:	b40e      	push	{r1, r2, r3}
 80070ce:	b500      	push	{lr}
 80070d0:	b09c      	sub	sp, #112	@ 0x70
 80070d2:	ab1d      	add	r3, sp, #116	@ 0x74
 80070d4:	9002      	str	r0, [sp, #8]
 80070d6:	9006      	str	r0, [sp, #24]
 80070d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80070dc:	4809      	ldr	r0, [pc, #36]	@ (8007104 <siprintf+0x38>)
 80070de:	9107      	str	r1, [sp, #28]
 80070e0:	9104      	str	r1, [sp, #16]
 80070e2:	4909      	ldr	r1, [pc, #36]	@ (8007108 <siprintf+0x3c>)
 80070e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80070e8:	9105      	str	r1, [sp, #20]
 80070ea:	6800      	ldr	r0, [r0, #0]
 80070ec:	9301      	str	r3, [sp, #4]
 80070ee:	a902      	add	r1, sp, #8
 80070f0:	f000 f994 	bl	800741c <_svfiprintf_r>
 80070f4:	9b02      	ldr	r3, [sp, #8]
 80070f6:	2200      	movs	r2, #0
 80070f8:	701a      	strb	r2, [r3, #0]
 80070fa:	b01c      	add	sp, #112	@ 0x70
 80070fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007100:	b003      	add	sp, #12
 8007102:	4770      	bx	lr
 8007104:	20000014 	.word	0x20000014
 8007108:	ffff0208 	.word	0xffff0208

0800710c <memset>:
 800710c:	4402      	add	r2, r0
 800710e:	4603      	mov	r3, r0
 8007110:	4293      	cmp	r3, r2
 8007112:	d100      	bne.n	8007116 <memset+0xa>
 8007114:	4770      	bx	lr
 8007116:	f803 1b01 	strb.w	r1, [r3], #1
 800711a:	e7f9      	b.n	8007110 <memset+0x4>

0800711c <__errno>:
 800711c:	4b01      	ldr	r3, [pc, #4]	@ (8007124 <__errno+0x8>)
 800711e:	6818      	ldr	r0, [r3, #0]
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	20000014 	.word	0x20000014

08007128 <__libc_init_array>:
 8007128:	b570      	push	{r4, r5, r6, lr}
 800712a:	4d0d      	ldr	r5, [pc, #52]	@ (8007160 <__libc_init_array+0x38>)
 800712c:	4c0d      	ldr	r4, [pc, #52]	@ (8007164 <__libc_init_array+0x3c>)
 800712e:	1b64      	subs	r4, r4, r5
 8007130:	10a4      	asrs	r4, r4, #2
 8007132:	2600      	movs	r6, #0
 8007134:	42a6      	cmp	r6, r4
 8007136:	d109      	bne.n	800714c <__libc_init_array+0x24>
 8007138:	4d0b      	ldr	r5, [pc, #44]	@ (8007168 <__libc_init_array+0x40>)
 800713a:	4c0c      	ldr	r4, [pc, #48]	@ (800716c <__libc_init_array+0x44>)
 800713c:	f000 fc66 	bl	8007a0c <_init>
 8007140:	1b64      	subs	r4, r4, r5
 8007142:	10a4      	asrs	r4, r4, #2
 8007144:	2600      	movs	r6, #0
 8007146:	42a6      	cmp	r6, r4
 8007148:	d105      	bne.n	8007156 <__libc_init_array+0x2e>
 800714a:	bd70      	pop	{r4, r5, r6, pc}
 800714c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007150:	4798      	blx	r3
 8007152:	3601      	adds	r6, #1
 8007154:	e7ee      	b.n	8007134 <__libc_init_array+0xc>
 8007156:	f855 3b04 	ldr.w	r3, [r5], #4
 800715a:	4798      	blx	r3
 800715c:	3601      	adds	r6, #1
 800715e:	e7f2      	b.n	8007146 <__libc_init_array+0x1e>
 8007160:	08007e8c 	.word	0x08007e8c
 8007164:	08007e8c 	.word	0x08007e8c
 8007168:	08007e8c 	.word	0x08007e8c
 800716c:	08007e90 	.word	0x08007e90

08007170 <__retarget_lock_acquire_recursive>:
 8007170:	4770      	bx	lr

08007172 <__retarget_lock_release_recursive>:
 8007172:	4770      	bx	lr

08007174 <_free_r>:
 8007174:	b538      	push	{r3, r4, r5, lr}
 8007176:	4605      	mov	r5, r0
 8007178:	2900      	cmp	r1, #0
 800717a:	d041      	beq.n	8007200 <_free_r+0x8c>
 800717c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007180:	1f0c      	subs	r4, r1, #4
 8007182:	2b00      	cmp	r3, #0
 8007184:	bfb8      	it	lt
 8007186:	18e4      	addlt	r4, r4, r3
 8007188:	f000 f8e0 	bl	800734c <__malloc_lock>
 800718c:	4a1d      	ldr	r2, [pc, #116]	@ (8007204 <_free_r+0x90>)
 800718e:	6813      	ldr	r3, [r2, #0]
 8007190:	b933      	cbnz	r3, 80071a0 <_free_r+0x2c>
 8007192:	6063      	str	r3, [r4, #4]
 8007194:	6014      	str	r4, [r2, #0]
 8007196:	4628      	mov	r0, r5
 8007198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800719c:	f000 b8dc 	b.w	8007358 <__malloc_unlock>
 80071a0:	42a3      	cmp	r3, r4
 80071a2:	d908      	bls.n	80071b6 <_free_r+0x42>
 80071a4:	6820      	ldr	r0, [r4, #0]
 80071a6:	1821      	adds	r1, r4, r0
 80071a8:	428b      	cmp	r3, r1
 80071aa:	bf01      	itttt	eq
 80071ac:	6819      	ldreq	r1, [r3, #0]
 80071ae:	685b      	ldreq	r3, [r3, #4]
 80071b0:	1809      	addeq	r1, r1, r0
 80071b2:	6021      	streq	r1, [r4, #0]
 80071b4:	e7ed      	b.n	8007192 <_free_r+0x1e>
 80071b6:	461a      	mov	r2, r3
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	b10b      	cbz	r3, 80071c0 <_free_r+0x4c>
 80071bc:	42a3      	cmp	r3, r4
 80071be:	d9fa      	bls.n	80071b6 <_free_r+0x42>
 80071c0:	6811      	ldr	r1, [r2, #0]
 80071c2:	1850      	adds	r0, r2, r1
 80071c4:	42a0      	cmp	r0, r4
 80071c6:	d10b      	bne.n	80071e0 <_free_r+0x6c>
 80071c8:	6820      	ldr	r0, [r4, #0]
 80071ca:	4401      	add	r1, r0
 80071cc:	1850      	adds	r0, r2, r1
 80071ce:	4283      	cmp	r3, r0
 80071d0:	6011      	str	r1, [r2, #0]
 80071d2:	d1e0      	bne.n	8007196 <_free_r+0x22>
 80071d4:	6818      	ldr	r0, [r3, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	6053      	str	r3, [r2, #4]
 80071da:	4408      	add	r0, r1
 80071dc:	6010      	str	r0, [r2, #0]
 80071de:	e7da      	b.n	8007196 <_free_r+0x22>
 80071e0:	d902      	bls.n	80071e8 <_free_r+0x74>
 80071e2:	230c      	movs	r3, #12
 80071e4:	602b      	str	r3, [r5, #0]
 80071e6:	e7d6      	b.n	8007196 <_free_r+0x22>
 80071e8:	6820      	ldr	r0, [r4, #0]
 80071ea:	1821      	adds	r1, r4, r0
 80071ec:	428b      	cmp	r3, r1
 80071ee:	bf04      	itt	eq
 80071f0:	6819      	ldreq	r1, [r3, #0]
 80071f2:	685b      	ldreq	r3, [r3, #4]
 80071f4:	6063      	str	r3, [r4, #4]
 80071f6:	bf04      	itt	eq
 80071f8:	1809      	addeq	r1, r1, r0
 80071fa:	6021      	streq	r1, [r4, #0]
 80071fc:	6054      	str	r4, [r2, #4]
 80071fe:	e7ca      	b.n	8007196 <_free_r+0x22>
 8007200:	bd38      	pop	{r3, r4, r5, pc}
 8007202:	bf00      	nop
 8007204:	2000040c 	.word	0x2000040c

08007208 <sbrk_aligned>:
 8007208:	b570      	push	{r4, r5, r6, lr}
 800720a:	4e0f      	ldr	r6, [pc, #60]	@ (8007248 <sbrk_aligned+0x40>)
 800720c:	460c      	mov	r4, r1
 800720e:	6831      	ldr	r1, [r6, #0]
 8007210:	4605      	mov	r5, r0
 8007212:	b911      	cbnz	r1, 800721a <sbrk_aligned+0x12>
 8007214:	f000 fba6 	bl	8007964 <_sbrk_r>
 8007218:	6030      	str	r0, [r6, #0]
 800721a:	4621      	mov	r1, r4
 800721c:	4628      	mov	r0, r5
 800721e:	f000 fba1 	bl	8007964 <_sbrk_r>
 8007222:	1c43      	adds	r3, r0, #1
 8007224:	d103      	bne.n	800722e <sbrk_aligned+0x26>
 8007226:	f04f 34ff 	mov.w	r4, #4294967295
 800722a:	4620      	mov	r0, r4
 800722c:	bd70      	pop	{r4, r5, r6, pc}
 800722e:	1cc4      	adds	r4, r0, #3
 8007230:	f024 0403 	bic.w	r4, r4, #3
 8007234:	42a0      	cmp	r0, r4
 8007236:	d0f8      	beq.n	800722a <sbrk_aligned+0x22>
 8007238:	1a21      	subs	r1, r4, r0
 800723a:	4628      	mov	r0, r5
 800723c:	f000 fb92 	bl	8007964 <_sbrk_r>
 8007240:	3001      	adds	r0, #1
 8007242:	d1f2      	bne.n	800722a <sbrk_aligned+0x22>
 8007244:	e7ef      	b.n	8007226 <sbrk_aligned+0x1e>
 8007246:	bf00      	nop
 8007248:	20000408 	.word	0x20000408

0800724c <_malloc_r>:
 800724c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007250:	1ccd      	adds	r5, r1, #3
 8007252:	f025 0503 	bic.w	r5, r5, #3
 8007256:	3508      	adds	r5, #8
 8007258:	2d0c      	cmp	r5, #12
 800725a:	bf38      	it	cc
 800725c:	250c      	movcc	r5, #12
 800725e:	2d00      	cmp	r5, #0
 8007260:	4606      	mov	r6, r0
 8007262:	db01      	blt.n	8007268 <_malloc_r+0x1c>
 8007264:	42a9      	cmp	r1, r5
 8007266:	d904      	bls.n	8007272 <_malloc_r+0x26>
 8007268:	230c      	movs	r3, #12
 800726a:	6033      	str	r3, [r6, #0]
 800726c:	2000      	movs	r0, #0
 800726e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007272:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007348 <_malloc_r+0xfc>
 8007276:	f000 f869 	bl	800734c <__malloc_lock>
 800727a:	f8d8 3000 	ldr.w	r3, [r8]
 800727e:	461c      	mov	r4, r3
 8007280:	bb44      	cbnz	r4, 80072d4 <_malloc_r+0x88>
 8007282:	4629      	mov	r1, r5
 8007284:	4630      	mov	r0, r6
 8007286:	f7ff ffbf 	bl	8007208 <sbrk_aligned>
 800728a:	1c43      	adds	r3, r0, #1
 800728c:	4604      	mov	r4, r0
 800728e:	d158      	bne.n	8007342 <_malloc_r+0xf6>
 8007290:	f8d8 4000 	ldr.w	r4, [r8]
 8007294:	4627      	mov	r7, r4
 8007296:	2f00      	cmp	r7, #0
 8007298:	d143      	bne.n	8007322 <_malloc_r+0xd6>
 800729a:	2c00      	cmp	r4, #0
 800729c:	d04b      	beq.n	8007336 <_malloc_r+0xea>
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	4639      	mov	r1, r7
 80072a2:	4630      	mov	r0, r6
 80072a4:	eb04 0903 	add.w	r9, r4, r3
 80072a8:	f000 fb5c 	bl	8007964 <_sbrk_r>
 80072ac:	4581      	cmp	r9, r0
 80072ae:	d142      	bne.n	8007336 <_malloc_r+0xea>
 80072b0:	6821      	ldr	r1, [r4, #0]
 80072b2:	1a6d      	subs	r5, r5, r1
 80072b4:	4629      	mov	r1, r5
 80072b6:	4630      	mov	r0, r6
 80072b8:	f7ff ffa6 	bl	8007208 <sbrk_aligned>
 80072bc:	3001      	adds	r0, #1
 80072be:	d03a      	beq.n	8007336 <_malloc_r+0xea>
 80072c0:	6823      	ldr	r3, [r4, #0]
 80072c2:	442b      	add	r3, r5
 80072c4:	6023      	str	r3, [r4, #0]
 80072c6:	f8d8 3000 	ldr.w	r3, [r8]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	bb62      	cbnz	r2, 8007328 <_malloc_r+0xdc>
 80072ce:	f8c8 7000 	str.w	r7, [r8]
 80072d2:	e00f      	b.n	80072f4 <_malloc_r+0xa8>
 80072d4:	6822      	ldr	r2, [r4, #0]
 80072d6:	1b52      	subs	r2, r2, r5
 80072d8:	d420      	bmi.n	800731c <_malloc_r+0xd0>
 80072da:	2a0b      	cmp	r2, #11
 80072dc:	d917      	bls.n	800730e <_malloc_r+0xc2>
 80072de:	1961      	adds	r1, r4, r5
 80072e0:	42a3      	cmp	r3, r4
 80072e2:	6025      	str	r5, [r4, #0]
 80072e4:	bf18      	it	ne
 80072e6:	6059      	strne	r1, [r3, #4]
 80072e8:	6863      	ldr	r3, [r4, #4]
 80072ea:	bf08      	it	eq
 80072ec:	f8c8 1000 	streq.w	r1, [r8]
 80072f0:	5162      	str	r2, [r4, r5]
 80072f2:	604b      	str	r3, [r1, #4]
 80072f4:	4630      	mov	r0, r6
 80072f6:	f000 f82f 	bl	8007358 <__malloc_unlock>
 80072fa:	f104 000b 	add.w	r0, r4, #11
 80072fe:	1d23      	adds	r3, r4, #4
 8007300:	f020 0007 	bic.w	r0, r0, #7
 8007304:	1ac2      	subs	r2, r0, r3
 8007306:	bf1c      	itt	ne
 8007308:	1a1b      	subne	r3, r3, r0
 800730a:	50a3      	strne	r3, [r4, r2]
 800730c:	e7af      	b.n	800726e <_malloc_r+0x22>
 800730e:	6862      	ldr	r2, [r4, #4]
 8007310:	42a3      	cmp	r3, r4
 8007312:	bf0c      	ite	eq
 8007314:	f8c8 2000 	streq.w	r2, [r8]
 8007318:	605a      	strne	r2, [r3, #4]
 800731a:	e7eb      	b.n	80072f4 <_malloc_r+0xa8>
 800731c:	4623      	mov	r3, r4
 800731e:	6864      	ldr	r4, [r4, #4]
 8007320:	e7ae      	b.n	8007280 <_malloc_r+0x34>
 8007322:	463c      	mov	r4, r7
 8007324:	687f      	ldr	r7, [r7, #4]
 8007326:	e7b6      	b.n	8007296 <_malloc_r+0x4a>
 8007328:	461a      	mov	r2, r3
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	42a3      	cmp	r3, r4
 800732e:	d1fb      	bne.n	8007328 <_malloc_r+0xdc>
 8007330:	2300      	movs	r3, #0
 8007332:	6053      	str	r3, [r2, #4]
 8007334:	e7de      	b.n	80072f4 <_malloc_r+0xa8>
 8007336:	230c      	movs	r3, #12
 8007338:	6033      	str	r3, [r6, #0]
 800733a:	4630      	mov	r0, r6
 800733c:	f000 f80c 	bl	8007358 <__malloc_unlock>
 8007340:	e794      	b.n	800726c <_malloc_r+0x20>
 8007342:	6005      	str	r5, [r0, #0]
 8007344:	e7d6      	b.n	80072f4 <_malloc_r+0xa8>
 8007346:	bf00      	nop
 8007348:	2000040c 	.word	0x2000040c

0800734c <__malloc_lock>:
 800734c:	4801      	ldr	r0, [pc, #4]	@ (8007354 <__malloc_lock+0x8>)
 800734e:	f7ff bf0f 	b.w	8007170 <__retarget_lock_acquire_recursive>
 8007352:	bf00      	nop
 8007354:	20000404 	.word	0x20000404

08007358 <__malloc_unlock>:
 8007358:	4801      	ldr	r0, [pc, #4]	@ (8007360 <__malloc_unlock+0x8>)
 800735a:	f7ff bf0a 	b.w	8007172 <__retarget_lock_release_recursive>
 800735e:	bf00      	nop
 8007360:	20000404 	.word	0x20000404

08007364 <__ssputs_r>:
 8007364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007368:	688e      	ldr	r6, [r1, #8]
 800736a:	461f      	mov	r7, r3
 800736c:	42be      	cmp	r6, r7
 800736e:	680b      	ldr	r3, [r1, #0]
 8007370:	4682      	mov	sl, r0
 8007372:	460c      	mov	r4, r1
 8007374:	4690      	mov	r8, r2
 8007376:	d82d      	bhi.n	80073d4 <__ssputs_r+0x70>
 8007378:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800737c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007380:	d026      	beq.n	80073d0 <__ssputs_r+0x6c>
 8007382:	6965      	ldr	r5, [r4, #20]
 8007384:	6909      	ldr	r1, [r1, #16]
 8007386:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800738a:	eba3 0901 	sub.w	r9, r3, r1
 800738e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007392:	1c7b      	adds	r3, r7, #1
 8007394:	444b      	add	r3, r9
 8007396:	106d      	asrs	r5, r5, #1
 8007398:	429d      	cmp	r5, r3
 800739a:	bf38      	it	cc
 800739c:	461d      	movcc	r5, r3
 800739e:	0553      	lsls	r3, r2, #21
 80073a0:	d527      	bpl.n	80073f2 <__ssputs_r+0x8e>
 80073a2:	4629      	mov	r1, r5
 80073a4:	f7ff ff52 	bl	800724c <_malloc_r>
 80073a8:	4606      	mov	r6, r0
 80073aa:	b360      	cbz	r0, 8007406 <__ssputs_r+0xa2>
 80073ac:	6921      	ldr	r1, [r4, #16]
 80073ae:	464a      	mov	r2, r9
 80073b0:	f000 fae8 	bl	8007984 <memcpy>
 80073b4:	89a3      	ldrh	r3, [r4, #12]
 80073b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80073ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073be:	81a3      	strh	r3, [r4, #12]
 80073c0:	6126      	str	r6, [r4, #16]
 80073c2:	6165      	str	r5, [r4, #20]
 80073c4:	444e      	add	r6, r9
 80073c6:	eba5 0509 	sub.w	r5, r5, r9
 80073ca:	6026      	str	r6, [r4, #0]
 80073cc:	60a5      	str	r5, [r4, #8]
 80073ce:	463e      	mov	r6, r7
 80073d0:	42be      	cmp	r6, r7
 80073d2:	d900      	bls.n	80073d6 <__ssputs_r+0x72>
 80073d4:	463e      	mov	r6, r7
 80073d6:	6820      	ldr	r0, [r4, #0]
 80073d8:	4632      	mov	r2, r6
 80073da:	4641      	mov	r1, r8
 80073dc:	f000 faa8 	bl	8007930 <memmove>
 80073e0:	68a3      	ldr	r3, [r4, #8]
 80073e2:	1b9b      	subs	r3, r3, r6
 80073e4:	60a3      	str	r3, [r4, #8]
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	4433      	add	r3, r6
 80073ea:	6023      	str	r3, [r4, #0]
 80073ec:	2000      	movs	r0, #0
 80073ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073f2:	462a      	mov	r2, r5
 80073f4:	f000 fad4 	bl	80079a0 <_realloc_r>
 80073f8:	4606      	mov	r6, r0
 80073fa:	2800      	cmp	r0, #0
 80073fc:	d1e0      	bne.n	80073c0 <__ssputs_r+0x5c>
 80073fe:	6921      	ldr	r1, [r4, #16]
 8007400:	4650      	mov	r0, sl
 8007402:	f7ff feb7 	bl	8007174 <_free_r>
 8007406:	230c      	movs	r3, #12
 8007408:	f8ca 3000 	str.w	r3, [sl]
 800740c:	89a3      	ldrh	r3, [r4, #12]
 800740e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007412:	81a3      	strh	r3, [r4, #12]
 8007414:	f04f 30ff 	mov.w	r0, #4294967295
 8007418:	e7e9      	b.n	80073ee <__ssputs_r+0x8a>
	...

0800741c <_svfiprintf_r>:
 800741c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007420:	4698      	mov	r8, r3
 8007422:	898b      	ldrh	r3, [r1, #12]
 8007424:	061b      	lsls	r3, r3, #24
 8007426:	b09d      	sub	sp, #116	@ 0x74
 8007428:	4607      	mov	r7, r0
 800742a:	460d      	mov	r5, r1
 800742c:	4614      	mov	r4, r2
 800742e:	d510      	bpl.n	8007452 <_svfiprintf_r+0x36>
 8007430:	690b      	ldr	r3, [r1, #16]
 8007432:	b973      	cbnz	r3, 8007452 <_svfiprintf_r+0x36>
 8007434:	2140      	movs	r1, #64	@ 0x40
 8007436:	f7ff ff09 	bl	800724c <_malloc_r>
 800743a:	6028      	str	r0, [r5, #0]
 800743c:	6128      	str	r0, [r5, #16]
 800743e:	b930      	cbnz	r0, 800744e <_svfiprintf_r+0x32>
 8007440:	230c      	movs	r3, #12
 8007442:	603b      	str	r3, [r7, #0]
 8007444:	f04f 30ff 	mov.w	r0, #4294967295
 8007448:	b01d      	add	sp, #116	@ 0x74
 800744a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744e:	2340      	movs	r3, #64	@ 0x40
 8007450:	616b      	str	r3, [r5, #20]
 8007452:	2300      	movs	r3, #0
 8007454:	9309      	str	r3, [sp, #36]	@ 0x24
 8007456:	2320      	movs	r3, #32
 8007458:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800745c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007460:	2330      	movs	r3, #48	@ 0x30
 8007462:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007600 <_svfiprintf_r+0x1e4>
 8007466:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800746a:	f04f 0901 	mov.w	r9, #1
 800746e:	4623      	mov	r3, r4
 8007470:	469a      	mov	sl, r3
 8007472:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007476:	b10a      	cbz	r2, 800747c <_svfiprintf_r+0x60>
 8007478:	2a25      	cmp	r2, #37	@ 0x25
 800747a:	d1f9      	bne.n	8007470 <_svfiprintf_r+0x54>
 800747c:	ebba 0b04 	subs.w	fp, sl, r4
 8007480:	d00b      	beq.n	800749a <_svfiprintf_r+0x7e>
 8007482:	465b      	mov	r3, fp
 8007484:	4622      	mov	r2, r4
 8007486:	4629      	mov	r1, r5
 8007488:	4638      	mov	r0, r7
 800748a:	f7ff ff6b 	bl	8007364 <__ssputs_r>
 800748e:	3001      	adds	r0, #1
 8007490:	f000 80a7 	beq.w	80075e2 <_svfiprintf_r+0x1c6>
 8007494:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007496:	445a      	add	r2, fp
 8007498:	9209      	str	r2, [sp, #36]	@ 0x24
 800749a:	f89a 3000 	ldrb.w	r3, [sl]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f000 809f 	beq.w	80075e2 <_svfiprintf_r+0x1c6>
 80074a4:	2300      	movs	r3, #0
 80074a6:	f04f 32ff 	mov.w	r2, #4294967295
 80074aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074ae:	f10a 0a01 	add.w	sl, sl, #1
 80074b2:	9304      	str	r3, [sp, #16]
 80074b4:	9307      	str	r3, [sp, #28]
 80074b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80074bc:	4654      	mov	r4, sl
 80074be:	2205      	movs	r2, #5
 80074c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074c4:	484e      	ldr	r0, [pc, #312]	@ (8007600 <_svfiprintf_r+0x1e4>)
 80074c6:	f7f8 fe93 	bl	80001f0 <memchr>
 80074ca:	9a04      	ldr	r2, [sp, #16]
 80074cc:	b9d8      	cbnz	r0, 8007506 <_svfiprintf_r+0xea>
 80074ce:	06d0      	lsls	r0, r2, #27
 80074d0:	bf44      	itt	mi
 80074d2:	2320      	movmi	r3, #32
 80074d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074d8:	0711      	lsls	r1, r2, #28
 80074da:	bf44      	itt	mi
 80074dc:	232b      	movmi	r3, #43	@ 0x2b
 80074de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074e2:	f89a 3000 	ldrb.w	r3, [sl]
 80074e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80074e8:	d015      	beq.n	8007516 <_svfiprintf_r+0xfa>
 80074ea:	9a07      	ldr	r2, [sp, #28]
 80074ec:	4654      	mov	r4, sl
 80074ee:	2000      	movs	r0, #0
 80074f0:	f04f 0c0a 	mov.w	ip, #10
 80074f4:	4621      	mov	r1, r4
 80074f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074fa:	3b30      	subs	r3, #48	@ 0x30
 80074fc:	2b09      	cmp	r3, #9
 80074fe:	d94b      	bls.n	8007598 <_svfiprintf_r+0x17c>
 8007500:	b1b0      	cbz	r0, 8007530 <_svfiprintf_r+0x114>
 8007502:	9207      	str	r2, [sp, #28]
 8007504:	e014      	b.n	8007530 <_svfiprintf_r+0x114>
 8007506:	eba0 0308 	sub.w	r3, r0, r8
 800750a:	fa09 f303 	lsl.w	r3, r9, r3
 800750e:	4313      	orrs	r3, r2
 8007510:	9304      	str	r3, [sp, #16]
 8007512:	46a2      	mov	sl, r4
 8007514:	e7d2      	b.n	80074bc <_svfiprintf_r+0xa0>
 8007516:	9b03      	ldr	r3, [sp, #12]
 8007518:	1d19      	adds	r1, r3, #4
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	9103      	str	r1, [sp, #12]
 800751e:	2b00      	cmp	r3, #0
 8007520:	bfbb      	ittet	lt
 8007522:	425b      	neglt	r3, r3
 8007524:	f042 0202 	orrlt.w	r2, r2, #2
 8007528:	9307      	strge	r3, [sp, #28]
 800752a:	9307      	strlt	r3, [sp, #28]
 800752c:	bfb8      	it	lt
 800752e:	9204      	strlt	r2, [sp, #16]
 8007530:	7823      	ldrb	r3, [r4, #0]
 8007532:	2b2e      	cmp	r3, #46	@ 0x2e
 8007534:	d10a      	bne.n	800754c <_svfiprintf_r+0x130>
 8007536:	7863      	ldrb	r3, [r4, #1]
 8007538:	2b2a      	cmp	r3, #42	@ 0x2a
 800753a:	d132      	bne.n	80075a2 <_svfiprintf_r+0x186>
 800753c:	9b03      	ldr	r3, [sp, #12]
 800753e:	1d1a      	adds	r2, r3, #4
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	9203      	str	r2, [sp, #12]
 8007544:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007548:	3402      	adds	r4, #2
 800754a:	9305      	str	r3, [sp, #20]
 800754c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007610 <_svfiprintf_r+0x1f4>
 8007550:	7821      	ldrb	r1, [r4, #0]
 8007552:	2203      	movs	r2, #3
 8007554:	4650      	mov	r0, sl
 8007556:	f7f8 fe4b 	bl	80001f0 <memchr>
 800755a:	b138      	cbz	r0, 800756c <_svfiprintf_r+0x150>
 800755c:	9b04      	ldr	r3, [sp, #16]
 800755e:	eba0 000a 	sub.w	r0, r0, sl
 8007562:	2240      	movs	r2, #64	@ 0x40
 8007564:	4082      	lsls	r2, r0
 8007566:	4313      	orrs	r3, r2
 8007568:	3401      	adds	r4, #1
 800756a:	9304      	str	r3, [sp, #16]
 800756c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007570:	4824      	ldr	r0, [pc, #144]	@ (8007604 <_svfiprintf_r+0x1e8>)
 8007572:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007576:	2206      	movs	r2, #6
 8007578:	f7f8 fe3a 	bl	80001f0 <memchr>
 800757c:	2800      	cmp	r0, #0
 800757e:	d036      	beq.n	80075ee <_svfiprintf_r+0x1d2>
 8007580:	4b21      	ldr	r3, [pc, #132]	@ (8007608 <_svfiprintf_r+0x1ec>)
 8007582:	bb1b      	cbnz	r3, 80075cc <_svfiprintf_r+0x1b0>
 8007584:	9b03      	ldr	r3, [sp, #12]
 8007586:	3307      	adds	r3, #7
 8007588:	f023 0307 	bic.w	r3, r3, #7
 800758c:	3308      	adds	r3, #8
 800758e:	9303      	str	r3, [sp, #12]
 8007590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007592:	4433      	add	r3, r6
 8007594:	9309      	str	r3, [sp, #36]	@ 0x24
 8007596:	e76a      	b.n	800746e <_svfiprintf_r+0x52>
 8007598:	fb0c 3202 	mla	r2, ip, r2, r3
 800759c:	460c      	mov	r4, r1
 800759e:	2001      	movs	r0, #1
 80075a0:	e7a8      	b.n	80074f4 <_svfiprintf_r+0xd8>
 80075a2:	2300      	movs	r3, #0
 80075a4:	3401      	adds	r4, #1
 80075a6:	9305      	str	r3, [sp, #20]
 80075a8:	4619      	mov	r1, r3
 80075aa:	f04f 0c0a 	mov.w	ip, #10
 80075ae:	4620      	mov	r0, r4
 80075b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075b4:	3a30      	subs	r2, #48	@ 0x30
 80075b6:	2a09      	cmp	r2, #9
 80075b8:	d903      	bls.n	80075c2 <_svfiprintf_r+0x1a6>
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d0c6      	beq.n	800754c <_svfiprintf_r+0x130>
 80075be:	9105      	str	r1, [sp, #20]
 80075c0:	e7c4      	b.n	800754c <_svfiprintf_r+0x130>
 80075c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80075c6:	4604      	mov	r4, r0
 80075c8:	2301      	movs	r3, #1
 80075ca:	e7f0      	b.n	80075ae <_svfiprintf_r+0x192>
 80075cc:	ab03      	add	r3, sp, #12
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	462a      	mov	r2, r5
 80075d2:	4b0e      	ldr	r3, [pc, #56]	@ (800760c <_svfiprintf_r+0x1f0>)
 80075d4:	a904      	add	r1, sp, #16
 80075d6:	4638      	mov	r0, r7
 80075d8:	f3af 8000 	nop.w
 80075dc:	1c42      	adds	r2, r0, #1
 80075de:	4606      	mov	r6, r0
 80075e0:	d1d6      	bne.n	8007590 <_svfiprintf_r+0x174>
 80075e2:	89ab      	ldrh	r3, [r5, #12]
 80075e4:	065b      	lsls	r3, r3, #25
 80075e6:	f53f af2d 	bmi.w	8007444 <_svfiprintf_r+0x28>
 80075ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075ec:	e72c      	b.n	8007448 <_svfiprintf_r+0x2c>
 80075ee:	ab03      	add	r3, sp, #12
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	462a      	mov	r2, r5
 80075f4:	4b05      	ldr	r3, [pc, #20]	@ (800760c <_svfiprintf_r+0x1f0>)
 80075f6:	a904      	add	r1, sp, #16
 80075f8:	4638      	mov	r0, r7
 80075fa:	f000 f879 	bl	80076f0 <_printf_i>
 80075fe:	e7ed      	b.n	80075dc <_svfiprintf_r+0x1c0>
 8007600:	08007e50 	.word	0x08007e50
 8007604:	08007e5a 	.word	0x08007e5a
 8007608:	00000000 	.word	0x00000000
 800760c:	08007365 	.word	0x08007365
 8007610:	08007e56 	.word	0x08007e56

08007614 <_printf_common>:
 8007614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007618:	4616      	mov	r6, r2
 800761a:	4698      	mov	r8, r3
 800761c:	688a      	ldr	r2, [r1, #8]
 800761e:	690b      	ldr	r3, [r1, #16]
 8007620:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007624:	4293      	cmp	r3, r2
 8007626:	bfb8      	it	lt
 8007628:	4613      	movlt	r3, r2
 800762a:	6033      	str	r3, [r6, #0]
 800762c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007630:	4607      	mov	r7, r0
 8007632:	460c      	mov	r4, r1
 8007634:	b10a      	cbz	r2, 800763a <_printf_common+0x26>
 8007636:	3301      	adds	r3, #1
 8007638:	6033      	str	r3, [r6, #0]
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	0699      	lsls	r1, r3, #26
 800763e:	bf42      	ittt	mi
 8007640:	6833      	ldrmi	r3, [r6, #0]
 8007642:	3302      	addmi	r3, #2
 8007644:	6033      	strmi	r3, [r6, #0]
 8007646:	6825      	ldr	r5, [r4, #0]
 8007648:	f015 0506 	ands.w	r5, r5, #6
 800764c:	d106      	bne.n	800765c <_printf_common+0x48>
 800764e:	f104 0a19 	add.w	sl, r4, #25
 8007652:	68e3      	ldr	r3, [r4, #12]
 8007654:	6832      	ldr	r2, [r6, #0]
 8007656:	1a9b      	subs	r3, r3, r2
 8007658:	42ab      	cmp	r3, r5
 800765a:	dc26      	bgt.n	80076aa <_printf_common+0x96>
 800765c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007660:	6822      	ldr	r2, [r4, #0]
 8007662:	3b00      	subs	r3, #0
 8007664:	bf18      	it	ne
 8007666:	2301      	movne	r3, #1
 8007668:	0692      	lsls	r2, r2, #26
 800766a:	d42b      	bmi.n	80076c4 <_printf_common+0xb0>
 800766c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007670:	4641      	mov	r1, r8
 8007672:	4638      	mov	r0, r7
 8007674:	47c8      	blx	r9
 8007676:	3001      	adds	r0, #1
 8007678:	d01e      	beq.n	80076b8 <_printf_common+0xa4>
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	6922      	ldr	r2, [r4, #16]
 800767e:	f003 0306 	and.w	r3, r3, #6
 8007682:	2b04      	cmp	r3, #4
 8007684:	bf02      	ittt	eq
 8007686:	68e5      	ldreq	r5, [r4, #12]
 8007688:	6833      	ldreq	r3, [r6, #0]
 800768a:	1aed      	subeq	r5, r5, r3
 800768c:	68a3      	ldr	r3, [r4, #8]
 800768e:	bf0c      	ite	eq
 8007690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007694:	2500      	movne	r5, #0
 8007696:	4293      	cmp	r3, r2
 8007698:	bfc4      	itt	gt
 800769a:	1a9b      	subgt	r3, r3, r2
 800769c:	18ed      	addgt	r5, r5, r3
 800769e:	2600      	movs	r6, #0
 80076a0:	341a      	adds	r4, #26
 80076a2:	42b5      	cmp	r5, r6
 80076a4:	d11a      	bne.n	80076dc <_printf_common+0xc8>
 80076a6:	2000      	movs	r0, #0
 80076a8:	e008      	b.n	80076bc <_printf_common+0xa8>
 80076aa:	2301      	movs	r3, #1
 80076ac:	4652      	mov	r2, sl
 80076ae:	4641      	mov	r1, r8
 80076b0:	4638      	mov	r0, r7
 80076b2:	47c8      	blx	r9
 80076b4:	3001      	adds	r0, #1
 80076b6:	d103      	bne.n	80076c0 <_printf_common+0xac>
 80076b8:	f04f 30ff 	mov.w	r0, #4294967295
 80076bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c0:	3501      	adds	r5, #1
 80076c2:	e7c6      	b.n	8007652 <_printf_common+0x3e>
 80076c4:	18e1      	adds	r1, r4, r3
 80076c6:	1c5a      	adds	r2, r3, #1
 80076c8:	2030      	movs	r0, #48	@ 0x30
 80076ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076ce:	4422      	add	r2, r4
 80076d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076d8:	3302      	adds	r3, #2
 80076da:	e7c7      	b.n	800766c <_printf_common+0x58>
 80076dc:	2301      	movs	r3, #1
 80076de:	4622      	mov	r2, r4
 80076e0:	4641      	mov	r1, r8
 80076e2:	4638      	mov	r0, r7
 80076e4:	47c8      	blx	r9
 80076e6:	3001      	adds	r0, #1
 80076e8:	d0e6      	beq.n	80076b8 <_printf_common+0xa4>
 80076ea:	3601      	adds	r6, #1
 80076ec:	e7d9      	b.n	80076a2 <_printf_common+0x8e>
	...

080076f0 <_printf_i>:
 80076f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076f4:	7e0f      	ldrb	r7, [r1, #24]
 80076f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076f8:	2f78      	cmp	r7, #120	@ 0x78
 80076fa:	4691      	mov	r9, r2
 80076fc:	4680      	mov	r8, r0
 80076fe:	460c      	mov	r4, r1
 8007700:	469a      	mov	sl, r3
 8007702:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007706:	d807      	bhi.n	8007718 <_printf_i+0x28>
 8007708:	2f62      	cmp	r7, #98	@ 0x62
 800770a:	d80a      	bhi.n	8007722 <_printf_i+0x32>
 800770c:	2f00      	cmp	r7, #0
 800770e:	f000 80d2 	beq.w	80078b6 <_printf_i+0x1c6>
 8007712:	2f58      	cmp	r7, #88	@ 0x58
 8007714:	f000 80b9 	beq.w	800788a <_printf_i+0x19a>
 8007718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800771c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007720:	e03a      	b.n	8007798 <_printf_i+0xa8>
 8007722:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007726:	2b15      	cmp	r3, #21
 8007728:	d8f6      	bhi.n	8007718 <_printf_i+0x28>
 800772a:	a101      	add	r1, pc, #4	@ (adr r1, 8007730 <_printf_i+0x40>)
 800772c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007730:	08007789 	.word	0x08007789
 8007734:	0800779d 	.word	0x0800779d
 8007738:	08007719 	.word	0x08007719
 800773c:	08007719 	.word	0x08007719
 8007740:	08007719 	.word	0x08007719
 8007744:	08007719 	.word	0x08007719
 8007748:	0800779d 	.word	0x0800779d
 800774c:	08007719 	.word	0x08007719
 8007750:	08007719 	.word	0x08007719
 8007754:	08007719 	.word	0x08007719
 8007758:	08007719 	.word	0x08007719
 800775c:	0800789d 	.word	0x0800789d
 8007760:	080077c7 	.word	0x080077c7
 8007764:	08007857 	.word	0x08007857
 8007768:	08007719 	.word	0x08007719
 800776c:	08007719 	.word	0x08007719
 8007770:	080078bf 	.word	0x080078bf
 8007774:	08007719 	.word	0x08007719
 8007778:	080077c7 	.word	0x080077c7
 800777c:	08007719 	.word	0x08007719
 8007780:	08007719 	.word	0x08007719
 8007784:	0800785f 	.word	0x0800785f
 8007788:	6833      	ldr	r3, [r6, #0]
 800778a:	1d1a      	adds	r2, r3, #4
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6032      	str	r2, [r6, #0]
 8007790:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007794:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007798:	2301      	movs	r3, #1
 800779a:	e09d      	b.n	80078d8 <_printf_i+0x1e8>
 800779c:	6833      	ldr	r3, [r6, #0]
 800779e:	6820      	ldr	r0, [r4, #0]
 80077a0:	1d19      	adds	r1, r3, #4
 80077a2:	6031      	str	r1, [r6, #0]
 80077a4:	0606      	lsls	r6, r0, #24
 80077a6:	d501      	bpl.n	80077ac <_printf_i+0xbc>
 80077a8:	681d      	ldr	r5, [r3, #0]
 80077aa:	e003      	b.n	80077b4 <_printf_i+0xc4>
 80077ac:	0645      	lsls	r5, r0, #25
 80077ae:	d5fb      	bpl.n	80077a8 <_printf_i+0xb8>
 80077b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80077b4:	2d00      	cmp	r5, #0
 80077b6:	da03      	bge.n	80077c0 <_printf_i+0xd0>
 80077b8:	232d      	movs	r3, #45	@ 0x2d
 80077ba:	426d      	negs	r5, r5
 80077bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077c0:	4859      	ldr	r0, [pc, #356]	@ (8007928 <_printf_i+0x238>)
 80077c2:	230a      	movs	r3, #10
 80077c4:	e011      	b.n	80077ea <_printf_i+0xfa>
 80077c6:	6821      	ldr	r1, [r4, #0]
 80077c8:	6833      	ldr	r3, [r6, #0]
 80077ca:	0608      	lsls	r0, r1, #24
 80077cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80077d0:	d402      	bmi.n	80077d8 <_printf_i+0xe8>
 80077d2:	0649      	lsls	r1, r1, #25
 80077d4:	bf48      	it	mi
 80077d6:	b2ad      	uxthmi	r5, r5
 80077d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80077da:	4853      	ldr	r0, [pc, #332]	@ (8007928 <_printf_i+0x238>)
 80077dc:	6033      	str	r3, [r6, #0]
 80077de:	bf14      	ite	ne
 80077e0:	230a      	movne	r3, #10
 80077e2:	2308      	moveq	r3, #8
 80077e4:	2100      	movs	r1, #0
 80077e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077ea:	6866      	ldr	r6, [r4, #4]
 80077ec:	60a6      	str	r6, [r4, #8]
 80077ee:	2e00      	cmp	r6, #0
 80077f0:	bfa2      	ittt	ge
 80077f2:	6821      	ldrge	r1, [r4, #0]
 80077f4:	f021 0104 	bicge.w	r1, r1, #4
 80077f8:	6021      	strge	r1, [r4, #0]
 80077fa:	b90d      	cbnz	r5, 8007800 <_printf_i+0x110>
 80077fc:	2e00      	cmp	r6, #0
 80077fe:	d04b      	beq.n	8007898 <_printf_i+0x1a8>
 8007800:	4616      	mov	r6, r2
 8007802:	fbb5 f1f3 	udiv	r1, r5, r3
 8007806:	fb03 5711 	mls	r7, r3, r1, r5
 800780a:	5dc7      	ldrb	r7, [r0, r7]
 800780c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007810:	462f      	mov	r7, r5
 8007812:	42bb      	cmp	r3, r7
 8007814:	460d      	mov	r5, r1
 8007816:	d9f4      	bls.n	8007802 <_printf_i+0x112>
 8007818:	2b08      	cmp	r3, #8
 800781a:	d10b      	bne.n	8007834 <_printf_i+0x144>
 800781c:	6823      	ldr	r3, [r4, #0]
 800781e:	07df      	lsls	r7, r3, #31
 8007820:	d508      	bpl.n	8007834 <_printf_i+0x144>
 8007822:	6923      	ldr	r3, [r4, #16]
 8007824:	6861      	ldr	r1, [r4, #4]
 8007826:	4299      	cmp	r1, r3
 8007828:	bfde      	ittt	le
 800782a:	2330      	movle	r3, #48	@ 0x30
 800782c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007830:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007834:	1b92      	subs	r2, r2, r6
 8007836:	6122      	str	r2, [r4, #16]
 8007838:	f8cd a000 	str.w	sl, [sp]
 800783c:	464b      	mov	r3, r9
 800783e:	aa03      	add	r2, sp, #12
 8007840:	4621      	mov	r1, r4
 8007842:	4640      	mov	r0, r8
 8007844:	f7ff fee6 	bl	8007614 <_printf_common>
 8007848:	3001      	adds	r0, #1
 800784a:	d14a      	bne.n	80078e2 <_printf_i+0x1f2>
 800784c:	f04f 30ff 	mov.w	r0, #4294967295
 8007850:	b004      	add	sp, #16
 8007852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	f043 0320 	orr.w	r3, r3, #32
 800785c:	6023      	str	r3, [r4, #0]
 800785e:	4833      	ldr	r0, [pc, #204]	@ (800792c <_printf_i+0x23c>)
 8007860:	2778      	movs	r7, #120	@ 0x78
 8007862:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007866:	6823      	ldr	r3, [r4, #0]
 8007868:	6831      	ldr	r1, [r6, #0]
 800786a:	061f      	lsls	r7, r3, #24
 800786c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007870:	d402      	bmi.n	8007878 <_printf_i+0x188>
 8007872:	065f      	lsls	r7, r3, #25
 8007874:	bf48      	it	mi
 8007876:	b2ad      	uxthmi	r5, r5
 8007878:	6031      	str	r1, [r6, #0]
 800787a:	07d9      	lsls	r1, r3, #31
 800787c:	bf44      	itt	mi
 800787e:	f043 0320 	orrmi.w	r3, r3, #32
 8007882:	6023      	strmi	r3, [r4, #0]
 8007884:	b11d      	cbz	r5, 800788e <_printf_i+0x19e>
 8007886:	2310      	movs	r3, #16
 8007888:	e7ac      	b.n	80077e4 <_printf_i+0xf4>
 800788a:	4827      	ldr	r0, [pc, #156]	@ (8007928 <_printf_i+0x238>)
 800788c:	e7e9      	b.n	8007862 <_printf_i+0x172>
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	f023 0320 	bic.w	r3, r3, #32
 8007894:	6023      	str	r3, [r4, #0]
 8007896:	e7f6      	b.n	8007886 <_printf_i+0x196>
 8007898:	4616      	mov	r6, r2
 800789a:	e7bd      	b.n	8007818 <_printf_i+0x128>
 800789c:	6833      	ldr	r3, [r6, #0]
 800789e:	6825      	ldr	r5, [r4, #0]
 80078a0:	6961      	ldr	r1, [r4, #20]
 80078a2:	1d18      	adds	r0, r3, #4
 80078a4:	6030      	str	r0, [r6, #0]
 80078a6:	062e      	lsls	r6, r5, #24
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	d501      	bpl.n	80078b0 <_printf_i+0x1c0>
 80078ac:	6019      	str	r1, [r3, #0]
 80078ae:	e002      	b.n	80078b6 <_printf_i+0x1c6>
 80078b0:	0668      	lsls	r0, r5, #25
 80078b2:	d5fb      	bpl.n	80078ac <_printf_i+0x1bc>
 80078b4:	8019      	strh	r1, [r3, #0]
 80078b6:	2300      	movs	r3, #0
 80078b8:	6123      	str	r3, [r4, #16]
 80078ba:	4616      	mov	r6, r2
 80078bc:	e7bc      	b.n	8007838 <_printf_i+0x148>
 80078be:	6833      	ldr	r3, [r6, #0]
 80078c0:	1d1a      	adds	r2, r3, #4
 80078c2:	6032      	str	r2, [r6, #0]
 80078c4:	681e      	ldr	r6, [r3, #0]
 80078c6:	6862      	ldr	r2, [r4, #4]
 80078c8:	2100      	movs	r1, #0
 80078ca:	4630      	mov	r0, r6
 80078cc:	f7f8 fc90 	bl	80001f0 <memchr>
 80078d0:	b108      	cbz	r0, 80078d6 <_printf_i+0x1e6>
 80078d2:	1b80      	subs	r0, r0, r6
 80078d4:	6060      	str	r0, [r4, #4]
 80078d6:	6863      	ldr	r3, [r4, #4]
 80078d8:	6123      	str	r3, [r4, #16]
 80078da:	2300      	movs	r3, #0
 80078dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078e0:	e7aa      	b.n	8007838 <_printf_i+0x148>
 80078e2:	6923      	ldr	r3, [r4, #16]
 80078e4:	4632      	mov	r2, r6
 80078e6:	4649      	mov	r1, r9
 80078e8:	4640      	mov	r0, r8
 80078ea:	47d0      	blx	sl
 80078ec:	3001      	adds	r0, #1
 80078ee:	d0ad      	beq.n	800784c <_printf_i+0x15c>
 80078f0:	6823      	ldr	r3, [r4, #0]
 80078f2:	079b      	lsls	r3, r3, #30
 80078f4:	d413      	bmi.n	800791e <_printf_i+0x22e>
 80078f6:	68e0      	ldr	r0, [r4, #12]
 80078f8:	9b03      	ldr	r3, [sp, #12]
 80078fa:	4298      	cmp	r0, r3
 80078fc:	bfb8      	it	lt
 80078fe:	4618      	movlt	r0, r3
 8007900:	e7a6      	b.n	8007850 <_printf_i+0x160>
 8007902:	2301      	movs	r3, #1
 8007904:	4632      	mov	r2, r6
 8007906:	4649      	mov	r1, r9
 8007908:	4640      	mov	r0, r8
 800790a:	47d0      	blx	sl
 800790c:	3001      	adds	r0, #1
 800790e:	d09d      	beq.n	800784c <_printf_i+0x15c>
 8007910:	3501      	adds	r5, #1
 8007912:	68e3      	ldr	r3, [r4, #12]
 8007914:	9903      	ldr	r1, [sp, #12]
 8007916:	1a5b      	subs	r3, r3, r1
 8007918:	42ab      	cmp	r3, r5
 800791a:	dcf2      	bgt.n	8007902 <_printf_i+0x212>
 800791c:	e7eb      	b.n	80078f6 <_printf_i+0x206>
 800791e:	2500      	movs	r5, #0
 8007920:	f104 0619 	add.w	r6, r4, #25
 8007924:	e7f5      	b.n	8007912 <_printf_i+0x222>
 8007926:	bf00      	nop
 8007928:	08007e61 	.word	0x08007e61
 800792c:	08007e72 	.word	0x08007e72

08007930 <memmove>:
 8007930:	4288      	cmp	r0, r1
 8007932:	b510      	push	{r4, lr}
 8007934:	eb01 0402 	add.w	r4, r1, r2
 8007938:	d902      	bls.n	8007940 <memmove+0x10>
 800793a:	4284      	cmp	r4, r0
 800793c:	4623      	mov	r3, r4
 800793e:	d807      	bhi.n	8007950 <memmove+0x20>
 8007940:	1e43      	subs	r3, r0, #1
 8007942:	42a1      	cmp	r1, r4
 8007944:	d008      	beq.n	8007958 <memmove+0x28>
 8007946:	f811 2b01 	ldrb.w	r2, [r1], #1
 800794a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800794e:	e7f8      	b.n	8007942 <memmove+0x12>
 8007950:	4402      	add	r2, r0
 8007952:	4601      	mov	r1, r0
 8007954:	428a      	cmp	r2, r1
 8007956:	d100      	bne.n	800795a <memmove+0x2a>
 8007958:	bd10      	pop	{r4, pc}
 800795a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800795e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007962:	e7f7      	b.n	8007954 <memmove+0x24>

08007964 <_sbrk_r>:
 8007964:	b538      	push	{r3, r4, r5, lr}
 8007966:	4d06      	ldr	r5, [pc, #24]	@ (8007980 <_sbrk_r+0x1c>)
 8007968:	2300      	movs	r3, #0
 800796a:	4604      	mov	r4, r0
 800796c:	4608      	mov	r0, r1
 800796e:	602b      	str	r3, [r5, #0]
 8007970:	f7fb fe56 	bl	8003620 <_sbrk>
 8007974:	1c43      	adds	r3, r0, #1
 8007976:	d102      	bne.n	800797e <_sbrk_r+0x1a>
 8007978:	682b      	ldr	r3, [r5, #0]
 800797a:	b103      	cbz	r3, 800797e <_sbrk_r+0x1a>
 800797c:	6023      	str	r3, [r4, #0]
 800797e:	bd38      	pop	{r3, r4, r5, pc}
 8007980:	20000400 	.word	0x20000400

08007984 <memcpy>:
 8007984:	440a      	add	r2, r1
 8007986:	4291      	cmp	r1, r2
 8007988:	f100 33ff 	add.w	r3, r0, #4294967295
 800798c:	d100      	bne.n	8007990 <memcpy+0xc>
 800798e:	4770      	bx	lr
 8007990:	b510      	push	{r4, lr}
 8007992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800799a:	4291      	cmp	r1, r2
 800799c:	d1f9      	bne.n	8007992 <memcpy+0xe>
 800799e:	bd10      	pop	{r4, pc}

080079a0 <_realloc_r>:
 80079a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a4:	4680      	mov	r8, r0
 80079a6:	4615      	mov	r5, r2
 80079a8:	460c      	mov	r4, r1
 80079aa:	b921      	cbnz	r1, 80079b6 <_realloc_r+0x16>
 80079ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079b0:	4611      	mov	r1, r2
 80079b2:	f7ff bc4b 	b.w	800724c <_malloc_r>
 80079b6:	b92a      	cbnz	r2, 80079c4 <_realloc_r+0x24>
 80079b8:	f7ff fbdc 	bl	8007174 <_free_r>
 80079bc:	2400      	movs	r4, #0
 80079be:	4620      	mov	r0, r4
 80079c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079c4:	f000 f81a 	bl	80079fc <_malloc_usable_size_r>
 80079c8:	4285      	cmp	r5, r0
 80079ca:	4606      	mov	r6, r0
 80079cc:	d802      	bhi.n	80079d4 <_realloc_r+0x34>
 80079ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80079d2:	d8f4      	bhi.n	80079be <_realloc_r+0x1e>
 80079d4:	4629      	mov	r1, r5
 80079d6:	4640      	mov	r0, r8
 80079d8:	f7ff fc38 	bl	800724c <_malloc_r>
 80079dc:	4607      	mov	r7, r0
 80079de:	2800      	cmp	r0, #0
 80079e0:	d0ec      	beq.n	80079bc <_realloc_r+0x1c>
 80079e2:	42b5      	cmp	r5, r6
 80079e4:	462a      	mov	r2, r5
 80079e6:	4621      	mov	r1, r4
 80079e8:	bf28      	it	cs
 80079ea:	4632      	movcs	r2, r6
 80079ec:	f7ff ffca 	bl	8007984 <memcpy>
 80079f0:	4621      	mov	r1, r4
 80079f2:	4640      	mov	r0, r8
 80079f4:	f7ff fbbe 	bl	8007174 <_free_r>
 80079f8:	463c      	mov	r4, r7
 80079fa:	e7e0      	b.n	80079be <_realloc_r+0x1e>

080079fc <_malloc_usable_size_r>:
 80079fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a00:	1f18      	subs	r0, r3, #4
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	bfbc      	itt	lt
 8007a06:	580b      	ldrlt	r3, [r1, r0]
 8007a08:	18c0      	addlt	r0, r0, r3
 8007a0a:	4770      	bx	lr

08007a0c <_init>:
 8007a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0e:	bf00      	nop
 8007a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a12:	bc08      	pop	{r3}
 8007a14:	469e      	mov	lr, r3
 8007a16:	4770      	bx	lr

08007a18 <_fini>:
 8007a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1a:	bf00      	nop
 8007a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a1e:	bc08      	pop	{r3}
 8007a20:	469e      	mov	lr, r3
 8007a22:	4770      	bx	lr
